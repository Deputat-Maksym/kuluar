!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Glide=e()}(this,function(){"use strict";var n={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perTouch:!1,touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",throttle:10,direction:"ltr",peek:0,breakpoints:{},classes:{direction:{ltr:"glide--ltr",rtl:"glide--rtl"},slider:"glide--slider",carousel:"glide--carousel",swipeable:"glide--swipeable",dragging:"glide--dragging",cloneSlide:"glide__slide--clone",activeNav:"glide__bullet--active",activeSlide:"glide__slide--active",disabledArrow:"glide__arrow--disabled"}};function u(t){console.error("[Glide warn]: "+t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t=function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t};function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function y(t){return parseInt(t)}function s(t){return"string"==typeof t}function c(t){var e=void 0===t?"undefined":r(t);return"function"===e||"object"===e&&t}function l(t){return"function"==typeof t}function f(t){return void 0===t}function d(t){return t.constructor===Array}function h(t,e,n){Object.defineProperty(t,e,n)}function v(t,e){var n=a({},t,e);return e.hasOwnProperty("classes")&&(n.classes=a({},t.classes,e.classes),e.classes.hasOwnProperty("direction")&&(n.classes.direction=a({},t.classes.direction,e.classes.direction))),e.hasOwnProperty("breakpoints")&&(n.breakpoints=a({},t.breakpoints,e.breakpoints)),n}var p=(t(e,[{key:"on",value:function(t,e){if(d(t))for(var n=0;n<t.length;n++)this.on(t[n],e);this.hop.call(this.events,t)||(this.events[t]=[]);var i=this.events[t].push(e)-1;return{remove:function(){delete this.events[t][i]}}}},{key:"emit",value:function(t,e){if(d(t))for(var n=0;n<t.length;n++)this.emit(t[n],e);this.hop.call(this.events,t)&&this.events[t].forEach(function(t){t(e||{})})}}]),e);function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,e),this.events=t,this.hop=t.hasOwnProperty}var m=(t(g,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this._e.emit("mount.before"),c(e)?this._c=function(t,e,n){var i={};for(var r in e)l(e[r])?i[r]=e[r](t,i,n):u("Extension must be a function");for(var o in i)l(i[o].mount)&&i[o].mount();return i}(this,e,this._e):u("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(t){var e=0<arguments.length&&void 0!==t?t:[];return d(e)?this._t=e:u("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return this.settings=v(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(t){return this._c.Run.make(t),this}},{key:"move",value:function(t){return this._c.Transition.disable(),this._c.Move.make(t),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(t){var e=0<arguments.length&&void 0!==t&&t;return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(t,e){return this._e.on(t,e),this}},{key:"isType",value:function(t){return this.settings.type===t}},{key:"settings",get:function(){return this._o},set:function(t){c(t)?this._o=t:u("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(t){this._i=y(t)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(t){this._d=!!t}}]),g);function g(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};i(this,g),this._c={},this._t=[],this._e=new p,this.disabled=!1,this.selector=t,this.settings=v(n,e),this.index=this.settings.startAt}function b(){return(new Date).getTime()}function w(n,i,r){var o=void 0,s=void 0,u=void 0,a=void 0,c=0;r=r||{};function l(){c=!1===r.leading?0:b(),o=null,a=n.apply(s,u),o||(s=u=null)}function t(){var t=b();c||!1!==r.leading||(c=t);var e=i-(t-c);return s=this,u=arguments,e<=0||i<e?(o&&(clearTimeout(o),o=null),c=t,a=n.apply(s,u),o||(s=u=null)):o||!1===r.trailing||(o=setTimeout(l,e)),a}return t.cancel=function(){clearTimeout(o),c=0,o=s=u=null},t}var _={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function k(t){if(t&&t.parentNode){for(var e=t.parentNode.firstChild,n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}return[]}function S(t){return!!(t&&t instanceof window.HTMLElement)}var H='[data-glide-el="track"]';var x=(t(T,[{key:"on",value:function(t,e,n,i){var r=3<arguments.length&&void 0!==i&&i;s(t)&&(t=[t]);for(var o=0;o<t.length;o++)this.listeners[t[o]]=n,e.addEventListener(t[o],this.listeners[t[o]],r)}},{key:"off",value:function(t,e,n){var i=2<arguments.length&&void 0!==n&&n;s(t)&&(t=[t]);for(var r=0;r<t.length;r++)e.removeEventListener(t[r],this.listeners[t[r]],i)}},{key:"destroy",value:function(){delete this.listeners}}]),T);function T(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};i(this,T),this.listeners=t}var A=["ltr","rtl"],O={">":"<","<":">","=":"="};function C(t,e){return{modify:function(t){return e.Direction.is("rtl")?-t:t}}}function M(i,r,o){var s=[function(e,n){return{modify:function(t){return t+n.Gaps.value*e.index}}},function(t,e){return{modify:function(t){return t+e.Clones.grow/2}}},function(n,i){return{modify:function(t){if(0<=n.settings.focusAt){var e=i.Peek.value;return c(e)?t-e.before:t-e}return t}}},function(o,s){return{modify:function(t){var e=s.Gaps.value,n=s.Sizes.width,i=o.settings.focusAt,r=s.Sizes.slideWidth;return"center"===i?t-(n/2-r/2):t-r*i-e*i}}}].concat(i._t,[C]);return{mutate:function(t){for(var e=0;e<s.length;e++){var n=s[e];l(n)&&l(n().modify)?t=n(i,r,o).modify(t):u("Transformer should be a function that returns an object with `modify()` method")}return t}}}var L=!1;try{var P=Object.defineProperty({},"passive",{get:function(){L=!0}});window.addEventListener("testPassive",null,P),window.removeEventListener("testPassive",null,P)}catch(t){}var j=L,E=["touchstart","mousedown"],z=["touchmove","mousemove"],D=["touchend","touchcancel","mouseup","mouseleave"],R=["mousedown","mousemove","mouseup","mouseleave"];function W(t){return c(t)?(n=t,Object.keys(n).sort().reduce(function(t,e){return t[e]=n[e],t[e],t},{})):(u("Breakpoints option must be an object"),{});var n}var q={Html:function(e,t){var n={mount:function(){this.root=e.selector,this.track=this.root.querySelector(H),this.slides=Array.prototype.slice.call(this.wrapper.children).filter(function(t){return!t.classList.contains(e.settings.classes.cloneSlide)})}};return h(n,"root",{get:function(){return n._r},set:function(t){s(t)&&(t=document.querySelector(t)),S(t)?n._r=t:u("Root element must be a existing Html node")}}),h(n,"track",{get:function(){return n._t},set:function(t){S(t)?n._t=t:u("Could not find track element. Please use "+H+" attribute.")}}),h(n,"wrapper",{get:function(){return n.track.children[0]}}),n},Translate:function(r,o,s){var u={set:function(t){var e=M(r,o).mutate(t);o.Html.wrapper.style.transform="translate3d("+-1*e+"px, 0px, 0px)"},remove:function(){o.Html.wrapper.style.transform=""}};return s.on("move",function(t){var e=o.Gaps.value,n=o.Sizes.length,i=o.Sizes.slideWidth;return r.isType("carousel")&&o.Run.isOffset("<")?(o.Transition.after(function(){s.emit("translate.jump"),u.set(i*(n-1))}),u.set(-i-e*n)):r.isType("carousel")&&o.Run.isOffset(">")?(o.Transition.after(function(){s.emit("translate.jump"),u.set(0)}),u.set(i*n+e*n)):u.set(t.movement)}),s.on("destroy",function(){u.remove()}),u},Transition:function(n,i,t){var r=!1,e={compose:function(t){var e=n.settings;return r?t+" 0ms "+e.animationTimingFunc:t+" "+this.duration+"ms "+e.animationTimingFunc},set:function(t){var e=0<arguments.length&&void 0!==t?t:"transform";i.Html.wrapper.style.transition=this.compose(e)},remove:function(){i.Html.wrapper.style.transition=""},after:function(t){setTimeout(function(){t()},this.duration)},enable:function(){r=!1,this.set()},disable:function(){r=!0,this.set()}};return h(e,"duration",{get:function(){var t=n.settings;return n.isType("slider")&&i.Run.offset?t.rewindDuration:t.animationDuration}}),t.on("move",function(){e.set()}),t.on(["build.before","resize","translate.jump"],function(){e.disable()}),t.on("run",function(){e.enable()}),t.on("destroy",function(){e.remove()}),e},Direction:function(t,e,n){var i={mount:function(){this.value=t.settings.direction},resolve:function(t){var e=t.slice(0,1);return this.is("rtl")?t.split(e).join(O[e]):t},is:function(t){return this.value===t},addClass:function(){e.Html.root.classList.add(t.settings.classes.direction[this.value])},removeClass:function(){e.Html.root.classList.remove(t.settings.classes.direction[this.value])}};return h(i,"value",{get:function(){return i._v},set:function(t){-1<A.indexOf(t)?i._v=t:u("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],function(){i.removeClass()}),n.on("update",function(){i.mount()}),n.on(["build.before","update"],function(){i.addClass()}),i},Peek:function(n,t,e){var i={mount:function(){this.value=n.settings.peek}};return h(i,"value",{get:function(){return i._v},set:function(t){c(t)?(t.before=y(t.before),t.after=y(t.after)):t=y(t),i._v=t}}),h(i,"reductor",{get:function(){var t=i.value,e=n.settings.perView;return c(t)?t.before/e+t.after/e:2*t/e}}),e.on(["resize","update"],function(){i.mount()}),i},Sizes:function(t,i,e){var n={setupSlides:function(){for(var t=this.slideWidth+"px",e=i.Html.slides,n=0;n<e.length;n++)e[n].style.width=t},setupWrapper:function(){i.Html.wrapper.style.width=this.wrapperSize+"px"},remove:function(){for(var t=i.Html.slides,e=0;e<t.length;e++)t[e].style.width="";i.Html.wrapper.style.width=""}};return h(n,"length",{get:function(){return i.Html.slides.length}}),h(n,"width",{get:function(){return i.Html.root.offsetWidth}}),h(n,"wrapperSize",{get:function(){return n.slideWidth*n.length+i.Gaps.grow+i.Clones.grow}}),h(n,"slideWidth",{get:function(){return n.width/t.settings.perView-i.Peek.reductor-i.Gaps.reductor}}),e.on(["build.before","resize","update"],function(){n.setupSlides(),n.setupWrapper()}),e.on("destroy",function(){n.remove()}),n},Gaps:function(e,o,t){var n={apply:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style,r=o.Direction.value;i[_[r][0]]=0!==e?this.value/2+"px":"",e!==t.length-1?i[_[r][1]]=this.value/2+"px":i[_[r][1]]=""}},remove:function(t){for(var e=0,n=t.length;e<n;e++){var i=t[e].style;i.marginLeft="",i.marginRight=""}}};return h(n,"value",{get:function(){return y(e.settings.gap)}}),h(n,"grow",{get:function(){return n.value*(o.Sizes.length-1)}}),h(n,"reductor",{get:function(){var t=e.settings.perView;return n.value*(t-1)/t}}),t.on(["build.after","update"],w(function(){n.apply(o.Html.wrapper.children)},30)),t.on("destroy",function(){n.remove(o.Html.wrapper.children)}),n},Move:function(t,i,r){var e={mount:function(){this._o=0},make:function(t){var e=this,n=0<arguments.length&&void 0!==t?t:0;this.offset=n,r.emit("move",{movement:this.value}),i.Transition.after(function(){r.emit("move.after",{movement:e.value})})}};return h(e,"offset",{get:function(){return e._o},set:function(t){e._o=f(t)?0:y(t)}}),h(e,"translate",{get:function(){return i.Sizes.slideWidth*t.index}}),h(e,"value",{get:function(){var t=this.offset,e=this.translate;return i.Direction.is("rtl")?e+t:e-t}}),r.on(["build.before","run"],function(){e.make()}),e},Clones:function(v,p,t){var e={mount:function(){this.items=[],v.isType("carousel")&&(this.items=this.collect())},collect:function(t){for(var e=0<arguments.length&&void 0!==t?t:[],n=p.Html.slides,i=v.settings,r=i.perView,o=i.classes,s=r+ +!!v.settings.peek,u=n.slice(0,s),a=n.slice(-s),c=0;c<Math.max(1,Math.floor(r/n.length));c++){for(var l=0;l<u.length;l++){var f=u[l].cloneNode(!0);f.classList.add(o.cloneSlide),e.push(f)}for(var d=0;d<a.length;d++){var h=a[d].cloneNode(!0);h.classList.add(o.cloneSlide),e.unshift(h)}}return e},append:function(){for(var t=this.items,e=p.Html,n=e.wrapper,i=e.slides,r=Math.floor(t.length/2),o=t.slice(0,r).reverse(),s=t.slice(r,t.length),u=p.Sizes.slideWidth+"px",a=0;a<s.length;a++)n.appendChild(s[a]);for(var c=0;c<o.length;c++)n.insertBefore(o[c],i[0]);for(var l=0;l<t.length;l++)t[l].style.width=u},remove:function(){for(var t=this.items,e=0;e<t.length;e++)p.Html.wrapper.removeChild(t[e])}};return h(e,"grow",{get:function(){return(p.Sizes.slideWidth+p.Gaps.value)*e.items.length}}),t.on("update",function(){e.remove(),e.mount(),e.append()}),t.on("build.before",function(){v.isType("carousel")&&e.append()}),t.on("destroy",function(){e.remove()}),e},Resize:function(t,e,n){var i=new x,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,w(function(){n.emit("resize")},t.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Build:function(n,i,t){var e={mount:function(){t.emit("build.before"),this.typeClass(),this.activeClass(),t.emit("build.after")},typeClass:function(){i.Html.root.classList.add(n.settings.classes[n.settings.type])},activeClass:function(){var e=n.settings.classes,t=i.Html.slides[n.index];t&&(t.classList.add(e.activeSlide),k(t).forEach(function(t){t.classList.remove(e.activeSlide)}))},removeClasses:function(){var e=n.settings.classes;i.Html.root.classList.remove(e[n.settings.type]),i.Html.slides.forEach(function(t){t.classList.remove(e.activeSlide)})}};return t.on(["destroy","update"],function(){e.removeClasses()}),t.on(["resize","update"],function(){e.mount()}),t.on("move",function(){e.activeClass()}),e},Run:function(o,n,i){var t={mount:function(){this._o=!1},make:function(t){var e=this;o.disabled||(o.disable(),this.move=t,i.emit("run.before",this.move),this.calculate(),i.emit("run",this.move),n.Transition.after(function(){e.isStart()&&i.emit("run.start",e.move),e.isEnd()&&i.emit("run.end",e.move),(e.isOffset("<")||e.isOffset(">"))&&(e._o=!1,i.emit("run.offset",e.move)),i.emit("run.after",e.move),o.enable()}))},calculate:function(){var t=this.move,e=this.length,n=t.steps,i=t.direction,r="number"==typeof y(n)&&0!==y(n);switch(i){case">":">"===n?o.index=e:this.isEnd()?o.isType("slider")&&!o.settings.rewind||(this._o=!0,o.index=0):r?o.index+=Math.min(e-o.index,-y(n)):o.index++;break;case"<":"<"===n?o.index=0:this.isStart()?o.isType("slider")&&!o.settings.rewind||(this._o=!0,o.index=e):r?o.index-=Math.min(o.index,y(n)):o.index--;break;case"=":o.index=n;break;default:u("Invalid direction pattern ["+i+n+"] has been used")}},isStart:function(){return 0===o.index},isEnd:function(){return o.index===this.length},isOffset:function(t){return this._o&&this.move.direction===t}};return h(t,"move",{get:function(){return this._m},set:function(t){var e=t.substr(1);this._m={direction:t.substr(0,1),steps:e?y(e)?y(e):e:0}}}),h(t,"length",{get:function(){var t=o.settings,e=n.Html.slides.length;return o.isType("slider")&&"center"!==t.focusAt&&t.bound?e-1-(y(t.perView)-1)+y(t.focusAt):e-1}}),h(t,"offset",{get:function(){return this._o}}),t},Swipe:function(d,h,v){var n=new x,p=0,m=0,g=0,i=!1,r=!!j&&{passive:!0},t={mount:function(){this.bindSwipeStart()},start:function(t){if(!i&&!d.disabled){this.disable();var e=this.touches(t);p=null,m=y(e.pageX),g=y(e.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),v.emit("swipe.start")}},move:function(t){if(!d.disabled){var e=d.settings,n=e.touchAngle,i=e.touchRatio,r=e.classes,o=this.touches(t),s=y(o.pageX)-m,u=y(o.pageY)-g,a=Math.abs(s<<2),c=Math.abs(u<<2),l=Math.sqrt(a+c),f=Math.sqrt(c);if(!(180*(p=Math.asin(f/l))/Math.PI<n))return!1;t.stopPropagation(),h.Move.make(s*parseFloat(i)),h.Html.root.classList.add(r.dragging),v.emit("swipe.move")}},end:function(t){if(!d.disabled){var e=d.settings,n=this.touches(t),i=this.threshold(t),r=n.pageX-m,o=180*p/Math.PI,s=Math.round(r/h.Sizes.slideWidth);this.enable(),i<r&&o<e.touchAngle?(e.perTouch&&(s=Math.min(s,y(e.perTouch))),h.Direction.is("rtl")&&(s=-s),h.Run.make(h.Direction.resolve("<"+s))):r<-i&&o<e.touchAngle?(e.perTouch&&(s=Math.max(s,-y(e.perTouch))),h.Direction.is("rtl")&&(s=-s),h.Run.make(h.Direction.resolve(">"+s))):h.Move.make(),h.Html.root.classList.remove(e.classes.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),v.emit("swipe.end")}},bindSwipeStart:function(){var e=this,t=d.settings;t.swipeThreshold&&n.on(E[0],h.Html.wrapper,function(t){e.start(t)},r),t.dragThreshold&&n.on(E[1],h.Html.wrapper,function(t){e.start(t)},r)},unbindSwipeStart:function(){n.off(E[0],h.Html.wrapper,r),n.off(E[1],h.Html.wrapper,r)},bindSwipeMove:function(){var e=this;n.on(z,h.Html.wrapper,w(function(t){e.move(t)},d.settings.throttle),r)},unbindSwipeMove:function(){n.off(z,h.Html.wrapper,r)},bindSwipeEnd:function(){var e=this;n.on(D,h.Html.wrapper,function(t){e.end(t)})},unbindSwipeEnd:function(){n.off(D,h.Html.wrapper)},touches:function(t){return-1<R.indexOf(t.type)?t:t.touches[0]||t.changedTouches[0]},threshold:function(t){var e=d.settings;return-1<R.indexOf(t.type)?e.dragThreshold:e.swipeThreshold},enable:function(){return i=!1,h.Transition.enable(),this},disable:function(){return i=!0,h.Transition.disable(),this}};return v.on("build.after",function(){h.Html.root.classList.add(d.settings.classes.swipeable)}),v.on("destroy",function(){t.unbindSwipeStart(),t.unbindSwipeMove(),t.unbindSwipeEnd(),n.destroy()}),t},Images:function(t,e,n){var i=new x,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",e.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",e.Html.wrapper)},dragstart:function(t){t.preventDefault()}};return n.on("destroy",function(){r.unbind(),i.destroy()}),r},Anchors:function(t,e,n){var i=new x,r=!1,o=!1,s={mount:function(){this._a=e.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",e.Html.wrapper,this.click)},unbind:function(){i.off("click",e.Html.wrapper)},click:function(t){o&&(t.stopPropagation(),t.preventDefault())},detach:function(){if(o=!0,!r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!1,this.items[t].setAttribute("data-href",this.items[t].getAttribute("href")),this.items[t].removeAttribute("href");r=!0}return this},attach:function(){if(o=!1,r){for(var t=0;t<this.items.length;t++)this.items[t].draggable=!0,this.items[t].setAttribute("href",this.items[t].getAttribute("data-href"));r=!1}return this}};return h(s,"items",{get:function(){return s._a}}),n.on("swipe.move",function(){s.detach()}),n.on("swipe.end",function(){e.Transition.after(function(){s.attach()})}),n.on("destroy",function(){s.attach(),s.unbind(),i.destroy()}),s},Controls:function(i,e,t){var n=new x,r=!!j&&{passive:!0},o={mount:function(){this._n=e.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=e.Html.root.querySelectorAll('[data-glide-el^="controls"]'),this.addBindings()},setActive:function(){for(var t=0;t<this._n.length;t++)this.addClass(this._n[t].children)},removeActive:function(){for(var t=0;t<this._n.length;t++)this.removeClass(this._n[t].children)},addClass:function(t){var e=i.settings,n=t[i.index];n&&(n.classList.add(e.classes.activeNav),k(n).forEach(function(t){t.classList.remove(e.classes.activeNav)}))},removeClass:function(t){var e=t[i.index];e&&e.classList.remove(i.settings.classes.activeNav)},addBindings:function(){for(var t=0;t<this._c.length;t++)this.bind(this._c[t].children)},removeBindings:function(){for(var t=0;t<this._c.length;t++)this.unbind(this._c[t].children)},bind:function(t){for(var e=0;e<t.length;e++)n.on("click",t[e],this.click),n.on("touchstart",t[e],this.click,r)},unbind:function(t){for(var e=0;e<t.length;e++)n.off(["click","touchstart"],t[e])},click:function(t){t.preventDefault(),e.Run.make(e.Direction.resolve(t.currentTarget.getAttribute("data-glide-dir")))}};return h(o,"items",{get:function(){return o._c}}),t.on(["mount.after","move.after"],function(){o.setActive()}),t.on("destroy",function(){o.removeBindings(),o.removeActive(),n.destroy()}),o},Keyboard:function(t,e,n){var i=new x,r={mount:function(){t.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(t){39===t.keyCode&&e.Run.make(e.Direction.resolve(">")),37===t.keyCode&&e.Run.make(e.Direction.resolve("<"))}};return n.on(["destroy","update"],function(){r.unbind()}),n.on("update",function(){r.mount()}),n.on("destroy",function(){i.destroy()}),r},Autoplay:function(e,n,t){var i=new x,r={mount:function(){this.start(),e.settings.hoverpause&&this.bind()},start:function(){var t=this;e.settings.autoplay&&f(this._i)&&(this._i=setInterval(function(){t.stop(),n.Run.make(">"),t.start()},this.time))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var t=this;i.on("mouseover",n.Html.root,function(){t.stop()}),i.on("mouseout",n.Html.root,function(){t.start()})},unbind:function(){i.off(["mouseover","mouseout"],n.Html.root)}};return h(r,"time",{get:function(){var t=n.Html.slides[e.index].getAttribute("data-glide-autoplay");return y(t||e.settings.autoplay)}}),t.on(["destroy","update"],function(){r.unbind()}),t.on(["run.before","pause","destroy","swipe.start","update"],function(){r.stop()}),t.on(["run.after","play","swipe.end"],function(){r.start()}),t.on("update",function(){r.mount()}),t.on("destroy",function(){i.destroy()}),r},Breakpoints:function(t,e,n){var i=new x,r=t.settings,o=W(r.breakpoints),s=a({},r),u={match:function(t){if(void 0!==window.matchMedia)for(var e in t)if(t.hasOwnProperty(e)&&window.matchMedia("(max-width: "+e+"px)").matches)return t[e];return s}};return a(r,u.match(o)),i.on("resize",window,w(function(){t.settings=v(r,u.match(o))},t.settings.throttle)),n.on("update",function(){o=W(o),s=a({},r)}),n.on("destroy",function(){i.off("resize",window)}),u}};function G(){return i(this,G),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(G.__proto__||Object.getPrototypeOf(G)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(G,m),t(G,[{key:"mount",value:function(t){var e=0<arguments.length&&void 0!==t?t:{};return function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in r)return r.value;var s=r.get;return void 0!==s?s.call(i):void 0}(G.prototype.__proto__||Object.getPrototypeOf(G.prototype),"mount",this).call(this,a({},q,e))}}]),G}),window.addEventListener("load",function(t){if(document.querySelector(".carousel")){var n=document.querySelector(".carousel-tools");n.scrollWidth>n.offsetWidth&&(n.style.justifyContent="flex-start");var e=new Glide(".carousel",{type:"carousel",perView:3,focusAt:"center",breakpoints:{1e3:{perView:2},640:{perView:1}}});function i(){var t=document.querySelector(".carousel .glide__slide--active"),e=t.previousElementSibling.querySelector(".carousel-item img"),n=t.querySelector(".carousel-item img"),i=t.nextElementSibling.querySelector(".carousel-item img");r(e),r(n),r(i)}function r(t){"false"===t.getAttribute("data-processed")&&(t.setAttribute("src",t.getAttribute("data-src")),t.setAttribute("data-processed","true"))}e.on("build.after",function(){i()}),e.on("move.after",function(){i()}),e.on("run.after",function(){var t=+document.querySelector(".glide__bullet--active").getAttribute("data-glide-dir").slice(1);console.log(t);var e=134*t;n.scrollLeft=e-(n.offsetWidth/2-67)}),e.mount()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJHbGlkZSIsInRoaXMiLCJkZWZhdWx0cyIsInR5cGUiLCJzdGFydEF0IiwicGVyVmlldyIsImZvY3VzQXQiLCJnYXAiLCJhdXRvcGxheSIsImhvdmVycGF1c2UiLCJrZXlib2FyZCIsImJvdW5kIiwic3dpcGVUaHJlc2hvbGQiLCJkcmFnVGhyZXNob2xkIiwicGVyVG91Y2giLCJ0b3VjaFJhdGlvIiwidG91Y2hBbmdsZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwicmV3aW5kIiwicmV3aW5kRHVyYXRpb24iLCJhbmltYXRpb25UaW1pbmdGdW5jIiwidGhyb3R0bGUiLCJkaXJlY3Rpb24iLCJwZWVrIiwiYnJlYWtwb2ludHMiLCJjbGFzc2VzIiwibHRyIiwicnRsIiwic2xpZGVyIiwiY2Fyb3VzZWwiLCJzd2lwZWFibGUiLCJkcmFnZ2luZyIsImNsb25lU2xpZGUiLCJhY3RpdmVOYXYiLCJhY3RpdmVTbGlkZSIsImRpc2FibGVkQXJyb3ciLCJ3YXJuIiwibXNnIiwiY29uc29sZSIsImVycm9yIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJjcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImFyZ3VtZW50cyIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInRvSW50IiwidmFsdWUiLCJwYXJzZUludCIsImlzU3RyaW5nIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwiaXNVbmRlZmluZWQiLCJpc0FycmF5IiwiQXJyYXkiLCJwcm9wIiwiZGVmaW5pdGlvbiIsIm1lcmdlT3B0aW9ucyIsInNldHRpbmdzIiwib3B0aW9ucyIsIkV2ZW50c0J1cyIsImV2ZW50IiwiaGFuZGxlciIsIm9uIiwiaG9wIiwiZXZlbnRzIiwiaW5kZXgiLCJwdXNoIiwicmVtb3ZlIiwiY29udGV4dCIsImVtaXQiLCJmb3JFYWNoIiwiaXRlbSIsInVuZGVmaW5lZCIsImV4dGVuc2lvbnMiLCJfZSIsIl9jIiwiZ2xpZGUiLCJjb21wb25lbnRzIiwibmFtZSIsIl9uYW1lIiwibW91bnQiLCJ0cmFuc2Zvcm1lcnMiLCJfdCIsInBhdHRlcm4iLCJSdW4iLCJtYWtlIiwiZGlzdGFuY2UiLCJUcmFuc2l0aW9uIiwiZGlzYWJsZSIsIk1vdmUiLCJpbnRlcnZhbCIsImRpc2FibGVkIiwiZ2V0IiwiX28iLCJzZXQiLCJvIiwiX2kiLCJfZCIsInN0YXR1cyIsInNlbGVjdG9yIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJhcmdzIiwicmVzdWx0IiwicHJldmlvdXMiLCJsYXRlciIsImxlYWRpbmciLCJhcHBseSIsInRocm90dGxlZCIsImF0IiwicmVtYWluaW5nIiwiY2xlYXJUaW1lb3V0IiwidHJhaWxpbmciLCJzZXRUaW1lb3V0IiwiY2FuY2VsIiwiTUFSR0lOX1RZUEUiLCJzaWJsaW5ncyIsIm5vZGUiLCJwYXJlbnROb2RlIiwibiIsImZpcnN0Q2hpbGQiLCJtYXRjaGVkIiwibmV4dFNpYmxpbmciLCJub2RlVHlwZSIsImV4aXN0Iiwid2luZG93IiwiSFRNTEVsZW1lbnQiLCJUUkFDS19TRUxFQ1RPUiIsIkV2ZW50c0JpbmRlciIsImVsIiwiY2xvc3VyZSIsImNhcHR1cmUiLCJsaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlZBTElEX0RJUkVDVElPTlMiLCJGTElQRURfTU9WRU1FTlRTIiwiPiIsIjwiLCI9IiwiUnRsIiwiQ29tcG9uZW50cyIsIm1vZGlmeSIsInRyYW5zbGF0ZSIsIkRpcmVjdGlvbiIsImlzIiwibXV0YXRvciIsIkV2ZW50cyIsIlRSQU5TRk9STUVSUyIsIkdhcHMiLCJDbG9uZXMiLCJncm93IiwiUGVlayIsImJlZm9yZSIsIndpZHRoIiwiU2l6ZXMiLCJzbGlkZVdpZHRoIiwiY29uY2F0IiwibXV0YXRlIiwidHJhbnNmb3JtZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiZSIsInN1cHBvcnRzUGFzc2l2ZSQxIiwiU1RBUlRfRVZFTlRTIiwiTU9WRV9FVkVOVFMiLCJFTkRfRVZFTlRTIiwiTU9VU0VfRVZFTlRTIiwic29ydEJyZWFrcG9pbnRzIiwicG9pbnRzIiwia2V5cyIsInNvcnQiLCJyZWR1Y2UiLCJyIiwiayIsIkNPTVBPTkVOVFMiLCJIdG1sIiwicm9vdCIsInRyYWNrIiwicXVlcnlTZWxlY3RvciIsInNsaWRlcyIsInNsaWNlIiwid3JhcHBlciIsImNoaWxkcmVuIiwiZmlsdGVyIiwic2xpZGUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIl9yIiwiZG9jdW1lbnQiLCJ0IiwiVHJhbnNsYXRlIiwidHJhbnNmb3JtIiwic3R5bGUiLCJpc1R5cGUiLCJpc09mZnNldCIsImFmdGVyIiwibW92ZW1lbnQiLCJjb21wb3NlIiwicHJvcGVydHkiLCJkdXJhdGlvbiIsInRyYW5zaXRpb24iLCJjYWxsYmFjayIsImVuYWJsZSIsIm9mZnNldCIsInJlc29sdmUiLCJ0b2tlbiIsInNwbGl0Iiwiam9pbiIsImFkZENsYXNzIiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJfdiIsImluZGV4T2YiLCJzZXR1cFNsaWRlcyIsInNldHVwV3JhcHBlciIsIndyYXBwZXJTaXplIiwib2Zmc2V0V2lkdGgiLCJyZWR1Y3RvciIsImxlbiIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIl90aGlzIiwiaXRlbXMiLCJjb2xsZWN0IiwiX0dsaWRlJHNldHRpbmdzIiwicGFydCIsInN0YXJ0IiwiZW5kIiwiTWF0aCIsIm1heCIsImZsb29yIiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJfY2xvbmUiLCJ1bnNoaWZ0IiwiYXBwZW5kIiwiX0NvbXBvbmVudHMkSHRtbCIsImhhbGYiLCJwcmVwZW5kIiwicmV2ZXJzZSIsImFwcGVuZENoaWxkIiwiX2kyIiwiaW5zZXJ0QmVmb3JlIiwiX2kzIiwicmVtb3ZlQ2hpbGQiLCJSZXNpemUiLCJCaW5kZXIiLCJiaW5kIiwidW5iaW5kIiwib2ZmIiwiZGVzdHJveSIsIkJ1aWxkIiwidHlwZUNsYXNzIiwiYWN0aXZlQ2xhc3MiLCJzaWJsaW5nIiwicmVtb3ZlQ2xhc3NlcyIsIm1vdmUiLCJjYWxjdWxhdGUiLCJpc1N0YXJ0IiwiaXNFbmQiLCJzdGVwcyIsImNvdW50YWJsZVN0ZXBzIiwibWluIiwiX20iLCJzdGVwIiwic3Vic3RyIiwiU3dpcGUiLCJzd2lwZVNpbiIsInN3aXBlU3RhcnRYIiwic3dpcGVTdGFydFkiLCJwYXNzaXZlIiwiYmluZFN3aXBlU3RhcnQiLCJzd2lwZSIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiYmluZFN3aXBlTW92ZSIsImJpbmRTd2lwZUVuZCIsInN1YkV4U3giLCJzdWJFeVN5IiwicG93RVgiLCJhYnMiLCJwb3dFWSIsInN3aXBlSHlwb3RlbnVzZSIsInNxcnQiLCJzd2lwZUNhdGhldHVzIiwiYXNpbiIsIlBJIiwic3RvcFByb3BhZ2F0aW9uIiwicGFyc2VGbG9hdCIsInRocmVzaG9sZCIsInN3aXBlRGlzdGFuY2UiLCJzd2lwZURlZyIsInJvdW5kIiwidW5iaW5kU3dpcGVNb3ZlIiwidW5iaW5kU3dpcGVFbmQiLCJ1bmJpbmRTd2lwZVN0YXJ0IiwiX3RoaXMyIiwiX3RoaXMzIiwiY2hhbmdlZFRvdWNoZXMiLCJJbWFnZXMiLCJkcmFnc3RhcnQiLCJwcmV2ZW50RGVmYXVsdCIsIkFuY2hvcnMiLCJkZXRhY2hlZCIsInByZXZlbnRlZCIsIl9hIiwicXVlcnlTZWxlY3RvckFsbCIsImNsaWNrIiwiZGV0YWNoIiwiZHJhZ2dhYmxlIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0YWNoIiwiQ29udHJvbHMiLCJfbiIsImFkZEJpbmRpbmdzIiwic2V0QWN0aXZlIiwicmVtb3ZlQWN0aXZlIiwiY29udHJvbHMiLCJyZW1vdmVCaW5kaW5ncyIsImVsZW1lbnRzIiwiY3VycmVudFRhcmdldCIsIktleWJvYXJkIiwicHJlc3MiLCJrZXlDb2RlIiwiQXV0b3BsYXkiLCJzZXRJbnRlcnZhbCIsInN0b3AiLCJ0aW1lIiwiY2xlYXJJbnRlcnZhbCIsIkJyZWFrcG9pbnRzIiwibWF0Y2giLCJtYXRjaE1lZGlhIiwicG9pbnQiLCJtYXRjaGVzIiwiR2xpZGUkJDEiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsImluaGVyaXRzIiwib2JqZWN0IiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJwYXJlbnQiLCJnZXR0ZXIiLCJjYXJvdXNlbFRvb2xzIiwic2Nyb2xsV2lkdGgiLCJqdXN0aWZ5Q29udGVudCIsInNsaWRlcjIiLCIxMDAwIiwiNjQwIiwiZ2V0U2xpZGVzIiwicHJldiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJjZW50ZXIiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwic2V0SW1nIiwiYWN0aXZlVG9vbEluZGV4IiwibG9nIiwic2Nyb2xsVmFsIiwic2Nyb2xsTGVmdCJdLCJtYXBwaW5ncyI6IkNBTUMsU0FBVUEsRUFBUUMsR0FDRSxpQkFBWkMsU0FBMEMsb0JBQVhDLE9BQXlCQSxPQUFPRCxRQUFVRCxJQUM5RCxtQkFBWEcsUUFBeUJBLE9BQU9DLElBQU1ELE9BQU9ILEdBQ25ERCxFQUFPTSxNQUFRTCxJQUhsQixDQUlFTSxLQUFNLFdBQWUsYUFFckIsSUFBSUMsRUFBVyxDQVViQyxLQUFNLFNBT05DLFFBQVMsRUFPVEMsUUFBUyxFQVdUQyxRQUFTLEVBT1RDLElBQUssR0FPTEMsVUFBVSxFQU9WQyxZQUFZLEVBT1pDLFVBQVUsRUFVVkMsT0FBTyxFQU9QQyxlQUFnQixHQU9oQkMsY0FBZSxJQU9mQyxVQUFVLEVBT1ZDLFdBQVksR0FPWkMsV0FBWSxHQU9aQyxrQkFBbUIsSUFPbkJDLFFBQVEsRUFPUkMsZUFBZ0IsSUFPaEJDLG9CQUFxQixvQ0FPckJDLFNBQVUsR0FXVkMsVUFBVyxNQWNYQyxLQUFNLEVBV05DLFlBQWEsR0FRYkMsUUFBUyxDQUNQSCxVQUFXLENBQ1RJLElBQUssYUFDTEMsSUFBSyxjQUVQQyxPQUFRLGdCQUNSQyxTQUFVLGtCQUNWQyxVQUFXLG1CQUNYQyxTQUFVLGtCQUNWQyxXQUFZLHNCQUNaQyxVQUFXLHdCQUNYQyxZQUFhLHVCQUNiQyxjQUFlLDJCQVVuQixTQUFTQyxFQUFLQyxHQUNaQyxRQUFRQyxNQUFNLGlCQUFtQkYsR0FTZCxTQUFqQkcsRUFBMkJDLEVBQVVDLEdBQ3ZDLEtBQU1ELGFBQW9CQyxHQUN4QixNQUFNLElBQUlDLFVBQVUscUNBUnhCLElBQUlDLEVBQTRCLG1CQUFYQyxRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQXdCLFNBQVVDLEdBQzVGLGNBQWNBLEdBQ1osU0FBVUEsR0FDWixPQUFPQSxHQUF5QixtQkFBWEYsUUFBeUJFLEVBQUlDLGNBQWdCSCxRQUFVRSxJQUFRRixPQUFPSSxVQUFZLGdCQUFrQkYsR0FTdkhHLEVBV0ssU0FBVVIsRUFBYVMsRUFBWUMsR0FHeEMsT0FGSUQsR0FBWUUsRUFBaUJYLEVBQVlPLFVBQVdFLEdBQ3BEQyxHQUFhQyxFQUFpQlgsRUFBYVUsR0FDeENWLEdBYlQsU0FBU1csRUFBaUJDLEVBQVFDLEdBQ2hDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQ3JDLElBQUlFLEVBQWFILEVBQU1DLEdBQ3ZCRSxFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQ2pERCxFQUFXRSxjQUFlLEVBQ3RCLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FDakRDLE9BQU9DLGVBQWVULEVBQVFJLEVBQVdNLElBQUtOLElBV3BELElBQUlPLEVBQVdILE9BQU9JLFFBQVUsU0FBVVosR0FDeEMsSUFBSyxJQUFJRSxFQUFJLEVBQUdBLEVBQUlXLFVBQVVWLE9BQVFELElBQUssQ0FDekMsSUFBSVksRUFBU0QsVUFBVVgsR0FFdkIsSUFBSyxJQUFJUSxLQUFPSSxFQUNWTixPQUFPYixVQUFVb0IsZUFBZUMsS0FBS0YsRUFBUUosS0FDL0NWLEVBQU9VLEdBQU9JLEVBQU9KLElBSzNCLE9BQU9WLEdBMkRULFNBQVNpQixFQUFNQyxHQUNiLE9BQU9DLFNBQVNELEdBb0JsQixTQUFTRSxFQUFTRixHQUNoQixNQUF3QixpQkFBVkEsRUFXaEIsU0FBU0csRUFBU0gsR0FDaEIsSUFBSXJFLE9BQXdCLElBQVZxRSxFQUF3QixZQUFjNUIsRUFBUTRCLEdBRWhFLE1BQWdCLGFBQVRyRSxHQUFnQyxXQUFUQSxHQUF1QnFFLEVBbUJ2RCxTQUFTSSxFQUFXSixHQUNsQixNQUF3QixtQkFBVkEsRUFTaEIsU0FBU0ssRUFBWUwsR0FDbkIsWUFBd0IsSUFBVkEsRUFTaEIsU0FBU00sRUFBUU4sR0FDZixPQUFPQSxFQUFNeEIsY0FBZ0IrQixNQXdDL0IsU0FBU2pGLEVBQU9pRCxFQUFLaUMsRUFBTUMsR0FDekJuQixPQUFPQyxlQUFlaEIsRUFBS2lDLEVBQU1DLEdBd0JuQyxTQUFTQyxFQUFhaEYsRUFBVWlGLEdBQzlCLElBQUlDLEVBQVVuQixFQUFTLEdBQUkvRCxFQUFVaUYsR0FtQnJDLE9BWklBLEVBQVNkLGVBQWUsYUFDMUJlLEVBQVEzRCxRQUFVd0MsRUFBUyxHQUFJL0QsRUFBU3VCLFFBQVMwRCxFQUFTMUQsU0FFdEQwRCxFQUFTMUQsUUFBUTRDLGVBQWUsZUFDbENlLEVBQVEzRCxRQUFRSCxVQUFZMkMsRUFBUyxHQUFJL0QsRUFBU3VCLFFBQVFILFVBQVc2RCxFQUFTMUQsUUFBUUgsYUFJdEY2RCxFQUFTZCxlQUFlLGlCQUMxQmUsRUFBUTVELFlBQWN5QyxFQUFTLEdBQUkvRCxFQUFTc0IsWUFBYTJELEVBQVMzRCxjQUc3RDRELEVBR1QsSUFBSUMsR0FzQkZuQyxFQUFZbUMsRUFBVyxDQUFDLENBQ3RCckIsSUFBSyxLQUNMUSxNQUFPLFNBQVljLEVBQU9DLEdBQ3hCLEdBQUlULEVBQVFRLEdBQ1YsSUFBSyxJQUFJOUIsRUFBSSxFQUFHQSxFQUFJOEIsRUFBTTdCLE9BQVFELElBQ2hDdkQsS0FBS3VGLEdBQUdGLEVBQU05QixHQUFJK0IsR0FLakJ0RixLQUFLd0YsSUFBSW5CLEtBQUtyRSxLQUFLeUYsT0FBUUosS0FDOUJyRixLQUFLeUYsT0FBT0osR0FBUyxJQUl2QixJQUFJSyxFQUFRMUYsS0FBS3lGLE9BQU9KLEdBQU9NLEtBQUtMLEdBQVcsRUFHL0MsTUFBTyxDQUNMTSxPQUFRLGtCQUNDNUYsS0FBS3lGLE9BQU9KLEdBQU9LLE9BWS9CLENBQ0QzQixJQUFLLE9BQ0xRLE1BQU8sU0FBY2MsRUFBT1EsR0FDMUIsR0FBSWhCLEVBQVFRLEdBQ1YsSUFBSyxJQUFJOUIsRUFBSSxFQUFHQSxFQUFJOEIsRUFBTTdCLE9BQVFELElBQ2hDdkQsS0FBSzhGLEtBQUtULEVBQU05QixHQUFJc0MsR0FLbkI3RixLQUFLd0YsSUFBSW5CLEtBQUtyRSxLQUFLeUYsT0FBUUosSUFLaENyRixLQUFLeUYsT0FBT0osR0FBT1UsUUFBUSxTQUFVQyxHQUNuQ0EsRUFBS0gsR0FBVyxVQUlmVCxHQXBFUCxTQUFTQSxJQUNQLElBQUlLLEVBQTRCLEVBQW5CdkIsVUFBVVYsYUFBK0J5QyxJQUFqQi9CLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUNqRjNCLEVBQWV2QyxLQUFNb0YsR0FFckJwRixLQUFLeUYsT0FBU0EsRUFDZHpGLEtBQUt3RixJQUFNQyxFQUFPckIsZUFrRXRCLElBQUlyRSxHQTZCRmtELEVBQVlsRCxFQUFPLENBQUMsQ0FDbEJnRSxJQUFLLFFBQ0xRLE1BQU8sU0FBQSxHQUNMLElBQUkyQixFQUFnQyxFQUFuQmhDLFVBQVVWLGFBQStCeUMsSUFEckQsRUFBQSxFQUNnRixHQVlyRixPQVZBakcsS0FBS21HLEdBQUdMLEtBQUssZ0JBRVRwQixFQUFTd0IsR0FDWGxHLEtBQUtvRyxHQTlMYixTQUFlQyxFQUFPSCxFQUFZVCxHQUNoQyxJQUFJYSxFQUFhLEdBRWpCLElBQUssSUFBSUMsS0FBUUwsRUFDWHZCLEVBQVd1QixFQUFXSyxJQUN4QkQsRUFBV0MsR0FBUUwsRUFBV0ssR0FBTUYsRUFBT0MsRUFBWWIsR0FFdkR0RCxFQUFLLGdDQUlULElBQUssSUFBSXFFLEtBQVNGLEVBQ1ozQixFQUFXMkIsRUFBV0UsR0FBT0MsUUFDL0JILEVBQVdFLEdBQU9DLFFBSXRCLE9BQU9ILEVBNktTRyxDQUFNekcsS0FBTWtHLEVBQVlsRyxLQUFLbUcsSUFFdkNoRSxFQUFLLDZDQUdQbkMsS0FBS21HLEdBQUdMLEtBQUssZUFFTjlGLE9BVVIsQ0FDRCtELElBQUssU0FDTFEsTUFBTyxTQUFBLEdBQ0wsSUFBSW1DLEVBQWtDLEVBQW5CeEMsVUFBVVYsYUFBK0J5QyxJQUR2RCxFQUFBLEVBQ2tGLEdBUXZGLE9BTklwQixFQUFRNkIsR0FDVjFHLEtBQUsyRyxHQUFLRCxFQUVWdkUsRUFBSyw2Q0FHQW5DLE9BVVIsQ0FDRCtELElBQUssU0FDTFEsTUFBTyxTQUFBLEdBQ0wsSUFBSVcsRUFBOEIsRUFBbkJoQixVQUFVVixhQUErQnlDLElBRG5ELEVBQUEsRUFDOEUsR0FVbkYsT0FSQWpHLEtBQUtrRixTQUFXRCxFQUFhakYsS0FBS2tGLFNBQVVBLEdBRXhDQSxFQUFTZCxlQUFlLGFBQzFCcEUsS0FBSzBGLE1BQVFSLEVBQVMvRSxTQUd4QkgsS0FBS21HLEdBQUdMLEtBQUssVUFFTjlGLE9BZVIsQ0FDRCtELElBQUssS0FDTFEsTUFBTyxTQUFZcUMsR0FHakIsT0FGQTVHLEtBQUtvRyxHQUFHUyxJQUFJQyxLQUFLRixHQUVWNUcsT0FVUixDQUNEK0QsSUFBSyxPQUNMUSxNQUFPLFNBQWN3QyxHQUluQixPQUhBL0csS0FBS29HLEdBQUdZLFdBQVdDLFVBQ25CakgsS0FBS29HLEdBQUdjLEtBQUtKLEtBQUtDLEdBRVgvRyxPQVNSLENBQ0QrRCxJQUFLLFVBQ0xRLE1BQU8sV0FHTCxPQUZBdkUsS0FBS21HLEdBQUdMLEtBQUssV0FFTjlGLE9BVVIsQ0FDRCtELElBQUssT0FDTFEsTUFBTyxTQUFBLEdBQ0wsSUFBSTRDLEVBQThCLEVBQW5CakQsVUFBVVYsYUFBK0J5QyxJQURuRCxHQUFBLEVBU0wsT0FOSWtCLElBQ0ZuSCxLQUFLa0YsU0FBUzNFLFNBQVc0RyxHQUczQm5ILEtBQUttRyxHQUFHTCxLQUFLLFFBRU45RixPQVNSLENBQ0QrRCxJQUFLLFFBQ0xRLE1BQU8sV0FHTCxPQUZBdkUsS0FBS21HLEdBQUdMLEtBQUssU0FFTjlGLE9BU1IsQ0FDRCtELElBQUssVUFDTFEsTUFBTyxXQUdMLE9BRkF2RSxLQUFLb0gsVUFBVyxFQUVUcEgsT0FTUixDQUNEK0QsSUFBSyxTQUNMUSxNQUFPLFdBR0wsT0FGQXZFLEtBQUtvSCxVQUFXLEVBRVRwSCxPQVdSLENBQ0QrRCxJQUFLLEtBQ0xRLE1BQU8sU0FBWWMsRUFBT0MsR0FHeEIsT0FGQXRGLEtBQUttRyxHQUFHWixHQUFHRixFQUFPQyxHQUVYdEYsT0FVUixDQUNEK0QsSUFBSyxTQUNMUSxNQUFPLFNBQWdCZ0MsR0FDckIsT0FBT3ZHLEtBQUtrRixTQUFTaEYsT0FBU3FHLElBUy9CLENBQ0R4QyxJQUFLLFdBQ0xzRCxJQUFLLFdBQ0gsT0FBT3JILEtBQUtzSCxJQVVkQyxJQUFLLFNBQWdCQyxHQUNmOUMsRUFBUzhDLEdBQ1h4SCxLQUFLc0gsR0FBS0UsRUFFVnJGLEVBQUssMkNBVVIsQ0FDRDRCLElBQUssUUFDTHNELElBQUssV0FDSCxPQUFPckgsS0FBS3lILElBU2RGLElBQUssU0FBZ0JoRSxHQUNuQnZELEtBQUt5SCxHQUFLbkQsRUFBTWYsS0FTakIsQ0FDRFEsSUFBSyxPQUNMc0QsSUFBSyxXQUNILE9BQU9ySCxLQUFLa0YsU0FBU2hGLE9BU3RCLENBQ0Q2RCxJQUFLLFdBQ0xzRCxJQUFLLFdBQ0gsT0FBT3JILEtBQUswSCxJQVNkSCxJQUFLLFNBQWdCSSxHQUNuQjNILEtBQUswSCxLQUFPQyxNQUdUNUgsR0FyVFAsU0FBU0EsRUFBTTZILEdBQ2IsSUFBSXpDLEVBQTZCLEVBQW5CakIsVUFBVVYsYUFBK0J5QyxJQUFqQi9CLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUNsRjNCLEVBQWV2QyxLQUFNRCxHQUVyQkMsS0FBS29HLEdBQUssR0FDVnBHLEtBQUsyRyxHQUFLLEdBQ1YzRyxLQUFLbUcsR0FBSyxJQUFJZixFQUVkcEYsS0FBS29ILFVBQVcsRUFDaEJwSCxLQUFLNEgsU0FBV0EsRUFDaEI1SCxLQUFLa0YsU0FBV0QsRUFBYWhGLEVBQVVrRixHQUN2Q25GLEtBQUswRixNQUFRMUYsS0FBS2tGLFNBQVMvRSxRQWdnQi9CLFNBQVMwSCxJQUNQLE9BQU8sSUFBSUMsTUFBT0MsVUFjcEIsU0FBUzNHLEVBQVM0RyxFQUFNQyxFQUFNOUMsR0FDNUIsSUFBSStDLE9BQVUsRUFDVnJDLE9BQVUsRUFDVnNDLE9BQU8sRUFDUEMsT0FBUyxFQUNUQyxFQUFXLEVBQ0RsRCxFQUFUQSxHQUFtQixHQUVaLFNBQVJtRCxJQUNGRCxHQUErQixJQUFwQmxELEVBQVFvRCxRQUFvQixFQUFJVixJQUMzQ0ssRUFBVSxLQUNWRSxFQUFTSixFQUFLUSxNQUFNM0MsRUFBU3NDLEdBQ3hCRCxJQUFTckMsRUFBVXNDLEVBQU8sTUFHakIsU0FBWk0sSUFDRixJQUFJQyxFQUFLYixJQUNKUSxJQUFnQyxJQUFwQmxELEVBQVFvRCxVQUFtQkYsRUFBV0ssR0FDdkQsSUFBSUMsRUFBWVYsR0FBUVMsRUFBS0wsR0FjN0IsT0FiQXhDLEVBQVU3RixLQUNWbUksRUFBT2pFLFVBQ0h5RSxHQUFhLEdBQWlCVixFQUFaVSxHQUNoQlQsSUFDRlUsYUFBYVYsR0FDYkEsRUFBVSxNQUVaRyxFQUFXSyxFQUNYTixFQUFTSixFQUFLUSxNQUFNM0MsRUFBU3NDLEdBQ3hCRCxJQUFTckMsRUFBVXNDLEVBQU8sT0FDckJELElBQWdDLElBQXJCL0MsRUFBUTBELFdBQzdCWCxFQUFVWSxXQUFXUixFQUFPSyxJQUV2QlAsRUFTVCxPQU5BSyxFQUFVTSxPQUFTLFdBQ2pCSCxhQUFhVixHQUNiRyxFQUFXLEVBQ1hILEVBQVVyQyxFQUFVc0MsRUFBTyxNQUd0Qk0sRUFHVCxJQUFJTyxFQUFjLENBQ2hCdkgsSUFBSyxDQUFDLGFBQWMsZUFDcEJDLElBQUssQ0FBQyxjQUFlLGVBK0d2QixTQUFTdUgsRUFBU0MsR0FDaEIsR0FBSUEsR0FBUUEsRUFBS0MsV0FBWSxDQUkzQixJQUhBLElBQUlDLEVBQUlGLEVBQUtDLFdBQVdFLFdBQ3BCQyxFQUFVLEdBRVBGLEVBQUdBLEVBQUlBLEVBQUVHLFlBQ0ssSUFBZkgsRUFBRUksVUFBa0JKLElBQU1GLEdBQzVCSSxFQUFRM0QsS0FBS3lELEdBSWpCLE9BQU9FLEVBR1QsTUFBTyxHQVNULFNBQVNHLEVBQU1QLEdBQ2IsU0FBSUEsR0FBUUEsYUFBZ0JRLE9BQU9DLGFBT3JDLElBQUlDLEVBQWlCLDBCQXNsQnJCLElBQUlDLEdBc0JGNUcsRUFBWTRHLEVBQWMsQ0FBQyxDQUN6QjlGLElBQUssS0FDTFEsTUFBTyxTQUFZa0IsRUFBUXFFLEVBQUlDLEVBQXhCLEdBQ0wsSUFBSUMsRUFBNkIsRUFBbkI5RixVQUFVVixhQUErQnlDLElBRGxELEdBQUEsRUFHRHhCLEVBQVNnQixLQUNYQSxFQUFTLENBQUNBLElBR1osSUFBSyxJQUFJbEMsRUFBSSxFQUFHQSxFQUFJa0MsRUFBT2pDLE9BQVFELElBQ2pDdkQsS0FBS2lLLFVBQVV4RSxFQUFPbEMsSUFBTXdHLEVBRTVCRCxFQUFHSSxpQkFBaUJ6RSxFQUFPbEMsR0FBSXZELEtBQUtpSyxVQUFVeEUsRUFBT2xDLElBQUt5RyxLQWE3RCxDQUNEakcsSUFBSyxNQUNMUSxNQUFPLFNBQWFrQixFQUFRcUUsRUFBckIsR0FDTCxJQUFJRSxFQUE2QixFQUFuQjlGLFVBQVVWLGFBQStCeUMsSUFEbEQsR0FBQSxFQUdEeEIsRUFBU2dCLEtBQ1hBLEVBQVMsQ0FBQ0EsSUFHWixJQUFLLElBQUlsQyxFQUFJLEVBQUdBLEVBQUlrQyxFQUFPakMsT0FBUUQsSUFDakN1RyxFQUFHSyxvQkFBb0IxRSxFQUFPbEMsR0FBSXZELEtBQUtpSyxVQUFVeEUsRUFBT2xDLElBQUt5RyxLQVVoRSxDQUNEakcsSUFBSyxVQUNMUSxNQUFPLGtCQUNFdkUsS0FBS2lLLGNBR1RKLEdBckVQLFNBQVNBLElBQ1AsSUFBSUksRUFBK0IsRUFBbkIvRixVQUFVVixhQUErQnlDLElBQWpCL0IsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQ3BGM0IsRUFBZXZDLEtBQU02SixHQUVyQjdKLEtBQUtpSyxVQUFZQSxFQXdIckIsSUFBSUcsRUFBbUIsQ0FBQyxNQUFPLE9BQzNCQyxFQUFtQixDQUNyQkMsSUFBSyxJQUNMQyxJQUFLLElBQ0xDLElBQUssS0E2SFAsU0FBU0MsRUFBSzFLLEVBQU8ySyxHQUNuQixNQUFPLENBT0xDLE9BQVEsU0FBZ0JDLEdBQ3RCLE9BQUlGLEVBQVdHLFVBQVVDLEdBQUcsUUFDbEJGLEVBR0hBLElBbUhiLFNBQVNHLEVBQVNoTCxFQUFPMkssRUFBWU0sR0FRbkMsSUFBSUMsRUFBZSxDQS9HckIsU0FBY2xMLEVBQU8ySyxHQUNuQixNQUFPLENBT0xDLE9BQVEsU0FBZ0JDLEdBQ3RCLE9BQU9BLEVBQVlGLEVBQVdRLEtBQUszRyxNQUFReEUsRUFBTTJGLFNBWXZELFNBQWUzRixFQUFPMkssR0FDcEIsTUFBTyxDQU9MQyxPQUFRLFNBQWdCQyxHQUN0QixPQUFPQSxFQUFZRixFQUFXUyxPQUFPQyxLQUFPLEtBWWxELFNBQWtCckwsRUFBTzJLLEdBQ3ZCLE1BQU8sQ0FPTEMsT0FBUSxTQUFnQkMsR0FDdEIsR0FBOEIsR0FBMUI3SyxFQUFNbUYsU0FBUzdFLFFBQWMsQ0FDL0IsSUFBSWlCLEVBQU9vSixFQUFXVyxLQUFLOUcsTUFFM0IsT0FBSUcsRUFBU3BELEdBQ0pzSixFQUFZdEosRUFBS2dLLE9BR25CVixFQUFZdEosRUFHckIsT0FBT3NKLEtBWWIsU0FBbUI3SyxFQUFPMkssR0FDeEIsTUFBTyxDQU9MQyxPQUFRLFNBQWdCQyxHQUN0QixJQUFJdEssRUFBTW9LLEVBQVdRLEtBQUszRyxNQUN0QmdILEVBQVFiLEVBQVdjLE1BQU1ELE1BQ3pCbEwsRUFBVU4sRUFBTW1GLFNBQVM3RSxRQUN6Qm9MLEVBQWFmLEVBQVdjLE1BQU1DLFdBRWxDLE1BQWdCLFdBQVpwTCxFQUNLdUssR0FBYVcsRUFBUSxFQUFJRSxFQUFhLEdBR3hDYixFQUFZYSxFQUFhcEwsRUFBVUMsRUFBTUQsTUFvQkZxTCxPQUFPM0wsRUFBTTRHLEdBQUksQ0FBQzhELElBRXBFLE1BQU8sQ0FPTGtCLE9BQVEsU0FBZ0JmLEdBQ3RCLElBQUssSUFBSXJILEVBQUksRUFBR0EsRUFBSTBILEVBQWF6SCxPQUFRRCxJQUFLLENBQzVDLElBQUlxSSxFQUFjWCxFQUFhMUgsR0FFM0JvQixFQUFXaUgsSUFBZ0JqSCxFQUFXaUgsSUFBY2pCLFFBQ3REQyxFQUFZZ0IsRUFBWTdMLEVBQU8ySyxFQUFZTSxHQUFRTCxPQUFPQyxHQUUxRHpJLEVBQUssa0ZBSVQsT0FBT3lJLElBK05iLElBQUlpQixHQUFrQixFQUV0QixJQUNFLElBQUlDLEVBQU9qSSxPQUFPQyxlQUFlLEdBQUksVUFBVyxDQUM5Q3VELElBQUssV0FDSHdFLEdBQWtCLEtBSXRCbkMsT0FBT1EsaUJBQWlCLGNBQWUsS0FBTTRCLEdBQzdDcEMsT0FBT1Msb0JBQW9CLGNBQWUsS0FBTTJCLEdBQ2hELE1BQU9DLElBRVQsSUFBSUMsRUFBb0JILEVBRXBCSSxFQUFlLENBQUMsYUFBYyxhQUM5QkMsRUFBYyxDQUFDLFlBQWEsYUFDNUJDLEVBQWEsQ0FBQyxXQUFZLGNBQWUsVUFBVyxjQUNwREMsRUFBZSxDQUFDLFlBQWEsWUFBYSxVQUFXLGNBbzlCekQsU0FBU0MsRUFBZ0JDLEdBQ3ZCLE9BQUk1SCxFQUFTNEgsSUF6Z0dHeEosRUEwZ0dFd0osRUF6Z0dYekksT0FBTzBJLEtBQUt6SixHQUFLMEosT0FBT0MsT0FBTyxTQUFVQyxFQUFHQyxHQUdqRCxPQUZBRCxFQUFFQyxHQUFLN0osRUFBSTZKLEdBRUpELEVBQUVDLEdBQUlELEdBQ1osTUF1Z0dEdkssRUFBSyx3Q0FHQSxJQS9nR1QsSUFBa0JXLEVBMG1HbEIsSUFBSThKLEVBQWEsQ0FFZkMsS0ExeEVGLFNBQWU5TSxFQUFPMkssR0FDcEIsSUFBSW1DLEVBQU8sQ0FNVHBHLE1BQU8sV0FDTHpHLEtBQUs4TSxLQUFPL00sRUFBTTZILFNBQ2xCNUgsS0FBSytNLE1BQVEvTSxLQUFLOE0sS0FBS0UsY0FBY3BELEdBQ3JDNUosS0FBS2lOLE9BQVNuSSxNQUFNOUIsVUFBVWtLLE1BQU03SSxLQUFLckUsS0FBS21OLFFBQVFDLFVBQVVDLE9BQU8sU0FBVUMsR0FDL0UsT0FBUUEsRUFBTUMsVUFBVUMsU0FBU3pOLEVBQU1tRixTQUFTMUQsUUFBUU8sZ0JBc0U5RCxPQWpFQWxDLEVBQU9nTixFQUFNLE9BQVEsQ0FNbkJ4RixJQUFLLFdBQ0gsT0FBT3dGLEVBQUtZLElBU2RsRyxJQUFLLFNBQWFtRixHQUNaakksRUFBU2lJLEtBQ1hBLEVBQUlnQixTQUFTVixjQUFjTixJQUd6QmpELEVBQU1pRCxHQUNSRyxFQUFLWSxHQUFLZixFQUVWdkssRUFBSyxnREFLWHRDLEVBQU9nTixFQUFNLFFBQVMsQ0FNcEJ4RixJQUFLLFdBQ0gsT0FBT3dGLEVBQUtsRyxJQVNkWSxJQUFLLFNBQWFvRyxHQUNabEUsRUFBTWtFLEdBQ1JkLEVBQUtsRyxHQUFLZ0gsRUFFVnhMLEVBQUssNENBQThDeUgsRUFBaUIsa0JBSzFFL0osRUFBT2dOLEVBQU0sVUFBVyxDQU10QnhGLElBQUssV0FDSCxPQUFPd0YsRUFBS0UsTUFBTUssU0FBUyxNQUl4QlAsR0Ewc0VQZSxVQXJ5Q0YsU0FBb0I3TixFQUFPMkssRUFBWU0sR0FDckMsSUFBSTRDLEVBQVksQ0FPZHJHLElBQUssU0FBYWhELEdBQ2hCLElBQUlzSixFQUFZOUMsRUFBUWhMLEVBQU8ySyxHQUFZaUIsT0FBT3BILEdBRWxEbUcsRUFBV21DLEtBQUtNLFFBQVFXLE1BQU1ELFVBQVksZ0JBQWtCLEVBQUlBLEVBQVksaUJBUzlFakksT0FBUSxXQUNOOEUsRUFBV21DLEtBQUtNLFFBQVFXLE1BQU1ELFVBQVksS0E2QzlDLE9BcENBN0MsRUFBT3pGLEdBQUcsT0FBUSxTQUFVTSxHQUMxQixJQUFJdkYsRUFBTW9LLEVBQVdRLEtBQUszRyxNQUN0QmYsRUFBU2tILEVBQVdjLE1BQU1oSSxPQUMxQitILEVBQVFiLEVBQVdjLE1BQU1DLFdBRTdCLE9BQUkxTCxFQUFNZ08sT0FBTyxhQUFlckQsRUFBVzdELElBQUltSCxTQUFTLE1BQ3REdEQsRUFBVzFELFdBQVdpSCxNQUFNLFdBQzFCakQsRUFBT2xGLEtBQUssa0JBRVo4SCxFQUFVckcsSUFBSWdFLEdBQVMvSCxFQUFTLE1BRzNCb0ssRUFBVXJHLEtBQUtnRSxFQUFRakwsRUFBTWtELElBR2xDekQsRUFBTWdPLE9BQU8sYUFBZXJELEVBQVc3RCxJQUFJbUgsU0FBUyxNQUN0RHRELEVBQVcxRCxXQUFXaUgsTUFBTSxXQUMxQmpELEVBQU9sRixLQUFLLGtCQUVaOEgsRUFBVXJHLElBQUksS0FHVHFHLEVBQVVyRyxJQUFJZ0UsRUFBUS9ILEVBQVNsRCxFQUFNa0QsSUFHdkNvSyxFQUFVckcsSUFBSTFCLEVBQVFxSSxZQU8vQmxELEVBQU96RixHQUFHLFVBQVcsV0FDbkJxSSxFQUFVaEksV0FHTGdJLEdBb3VDUDVHLFdBanVDRixTQUFxQmpILEVBQU8ySyxFQUFZTSxHQU90QyxJQUFJNUQsR0FBVyxFQUVYSixFQUFhLENBT2ZtSCxRQUFTLFNBQWlCQyxHQUN4QixJQUFJbEosRUFBV25GLEVBQU1tRixTQUVyQixPQUFLa0MsRUFJRWdILEVBQVcsUUFBVWxKLEVBQVMvRCxvQkFINUJpTixFQUFXLElBQU1wTyxLQUFLcU8sU0FBVyxNQUFRbkosRUFBUy9ELHFCQWE3RG9HLElBQUssU0FBQSxHQUNILElBQUk2RyxFQUE4QixFQUFuQmxLLFVBQVVWLGFBQStCeUMsSUFEckQsRUFBQSxFQUNnRixZQUVuRnlFLEVBQVdtQyxLQUFLTSxRQUFRVyxNQUFNUSxXQUFhdE8sS0FBS21PLFFBQVFDLElBUzFEeEksT0FBUSxXQUNOOEUsRUFBV21DLEtBQUtNLFFBQVFXLE1BQU1RLFdBQWEsSUFVN0NMLE1BQU8sU0FBZU0sR0FDcEJ6RixXQUFXLFdBQ1R5RixLQUNDdk8sS0FBS3FPLFdBU1ZHLE9BQVEsV0FDTnBILEdBQVcsRUFFWHBILEtBQUt1SCxPQVNQTixRQUFTLFdBQ1BHLEdBQVcsRUFFWHBILEtBQUt1SCxRQXdEVCxPQXBEQTFILEVBQU9tSCxFQUFZLFdBQVksQ0FPN0JLLElBQUssV0FDSCxJQUFJbkMsRUFBV25GLEVBQU1tRixTQUVyQixPQUFJbkYsRUFBTWdPLE9BQU8sV0FBYXJELEVBQVc3RCxJQUFJNEgsT0FDcEN2SixFQUFTaEUsZUFHWGdFLEVBQVNsRSxxQkFRcEJnSyxFQUFPekYsR0FBRyxPQUFRLFdBQ2hCeUIsRUFBV08sUUFTYnlELEVBQU96RixHQUFHLENBQUMsZUFBZ0IsU0FBVSxrQkFBbUIsV0FDdER5QixFQUFXQyxZQU9iK0QsRUFBT3pGLEdBQUcsTUFBTyxXQUNmeUIsRUFBV3dILFdBT2J4RCxFQUFPekYsR0FBRyxVQUFXLFdBQ25CeUIsRUFBV3BCLFdBR05vQixHQXVsQ1A2RCxVQWxrREYsU0FBb0I5SyxFQUFPMkssRUFBWU0sR0FDckMsSUFBSUgsRUFBWSxDQU1kcEUsTUFBTyxXQUNMekcsS0FBS3VFLE1BQVF4RSxFQUFNbUYsU0FBUzdELFdBVTlCcU4sUUFBUyxTQUFpQjlILEdBQ3hCLElBQUkrSCxFQUFRL0gsRUFBUXNHLE1BQU0sRUFBRyxHQUU3QixPQUFJbE4sS0FBSzhLLEdBQUcsT0FDSGxFLEVBQVFnSSxNQUFNRCxHQUFPRSxLQUFLeEUsRUFBaUJzRSxJQUc3Qy9ILEdBVVRrRSxHQUFJLFNBQVl6SixHQUNkLE9BQU9yQixLQUFLdUUsUUFBVWxELEdBU3hCeU4sU0FBVSxXQUNScEUsRUFBV21DLEtBQUtDLEtBQUtTLFVBQVV3QixJQUFJaFAsRUFBTW1GLFNBQVMxRCxRQUFRSCxVQUFVckIsS0FBS3VFLFNBUzNFeUssWUFBYSxXQUNYdEUsRUFBV21DLEtBQUtDLEtBQUtTLFVBQVUzSCxPQUFPN0YsRUFBTW1GLFNBQVMxRCxRQUFRSCxVQUFVckIsS0FBS3VFLFVBd0RoRixPQXBEQTFFLEVBQU9nTCxFQUFXLFFBQVMsQ0FNekJ4RCxJQUFLLFdBQ0gsT0FBT3dELEVBQVVvRSxJQVVuQjFILElBQUssU0FBYWhELElBQ3VCLEVBQW5DNkYsRUFBaUI4RSxRQUFRM0ssR0FDM0JzRyxFQUFVb0UsR0FBSzFLLEVBRWZwQyxFQUFLLDZDQVVYNkksRUFBT3pGLEdBQUcsQ0FBQyxVQUFXLFVBQVcsV0FDL0JzRixFQUFVbUUsZ0JBT1poRSxFQUFPekYsR0FBRyxTQUFVLFdBQ2xCc0YsRUFBVXBFLFVBUVp1RSxFQUFPekYsR0FBRyxDQUFDLGVBQWdCLFVBQVcsV0FDcENzRixFQUFVaUUsYUFHTGpFLEdBbTlDUFEsS0Exc0VGLFNBQWV0TCxFQUFPMkssRUFBWU0sR0FDaEMsSUFBSUssRUFBTyxDQU1UNUUsTUFBTyxXQUNMekcsS0FBS3VFLE1BQVF4RSxFQUFNbUYsU0FBUzVELE9BMkRoQyxPQXZEQXpCLEVBQU93TCxFQUFNLFFBQVMsQ0FNcEJoRSxJQUFLLFdBQ0gsT0FBT2dFLEVBQUs0RCxJQVVkMUgsSUFBSyxTQUFhaEQsR0FDWkcsRUFBU0gsSUFDWEEsRUFBTStHLE9BQVNoSCxFQUFNQyxFQUFNK0csUUFDM0IvRyxFQUFNMEosTUFBUTNKLEVBQU1DLEVBQU0wSixRQUUxQjFKLEVBQVFELEVBQU1DLEdBR2hCOEcsRUFBSzRELEdBQUsxSyxLQUlkMUUsRUFBT3dMLEVBQU0sV0FBWSxDQU12QmhFLElBQUssV0FDSCxJQUFJOUMsRUFBUThHLEVBQUs5RyxNQUNibkUsRUFBVUwsRUFBTW1GLFNBQVM5RSxRQUU3QixPQUFJc0UsRUFBU0gsR0FDSkEsRUFBTStHLE9BQVNsTCxFQUFVbUUsRUFBTTBKLE1BQVE3TixFQUdqQyxFQUFSbUUsRUFBWW5FLEtBUXZCNEssRUFBT3pGLEdBQUcsQ0FBQyxTQUFVLFVBQVcsV0FDOUI4RixFQUFLNUUsVUFHQTRFLEdBd29FUEcsTUFsaUVGLFNBQWdCekwsRUFBTzJLLEVBQVlNLEdBQ2pDLElBQUlRLEVBQVEsQ0FNVjJELFlBQWEsV0FJWCxJQUhBLElBQUk1RCxFQUFRdkwsS0FBS3lMLFdBQWEsS0FDMUJ3QixFQUFTdkMsRUFBV21DLEtBQUtJLE9BRXBCMUosRUFBSSxFQUFHQSxFQUFJMEosRUFBT3pKLE9BQVFELElBQ2pDMEosRUFBTzFKLEdBQUd1SyxNQUFNdkMsTUFBUUEsR0FVNUI2RCxhQUFjLFdBQ1oxRSxFQUFXbUMsS0FBS00sUUFBUVcsTUFBTXZDLE1BQVF2TCxLQUFLcVAsWUFBYyxNQVMzRHpKLE9BQVEsV0FHTixJQUZBLElBQUlxSCxFQUFTdkMsRUFBV21DLEtBQUtJLE9BRXBCMUosRUFBSSxFQUFHQSxFQUFJMEosRUFBT3pKLE9BQVFELElBQ2pDMEosRUFBTzFKLEdBQUd1SyxNQUFNdkMsTUFBUSxHQUcxQmIsRUFBV21DLEtBQUtNLFFBQVFXLE1BQU12QyxNQUFRLEtBbUUxQyxPQS9EQTFMLEVBQU8yTCxFQUFPLFNBQVUsQ0FNdEJuRSxJQUFLLFdBQ0gsT0FBT3FELEVBQVdtQyxLQUFLSSxPQUFPekosVUFJbEMzRCxFQUFPMkwsRUFBTyxRQUFTLENBTXJCbkUsSUFBSyxXQUNILE9BQU9xRCxFQUFXbUMsS0FBS0MsS0FBS3dDLGVBSWhDelAsRUFBTzJMLEVBQU8sY0FBZSxDQU0zQm5FLElBQUssV0FDSCxPQUFPbUUsRUFBTUMsV0FBYUQsRUFBTWhJLE9BQVNrSCxFQUFXUSxLQUFLRSxLQUFPVixFQUFXUyxPQUFPQyxRQUl0RnZMLEVBQU8yTCxFQUFPLGFBQWMsQ0FNMUJuRSxJQUFLLFdBQ0gsT0FBT21FLEVBQU1ELE1BQVF4TCxFQUFNbUYsU0FBUzlFLFFBQVVzSyxFQUFXVyxLQUFLa0UsU0FBVzdFLEVBQVdRLEtBQUtxRSxZQVU3RnZFLEVBQU96RixHQUFHLENBQUMsZUFBZ0IsU0FBVSxVQUFXLFdBQzlDaUcsRUFBTTJELGNBQ04zRCxFQUFNNEQsaUJBT1JwRSxFQUFPekYsR0FBRyxVQUFXLFdBQ25CaUcsRUFBTTVGLFdBR0Q0RixHQXk3RFBOLEtBNzZFRixTQUFlbkwsRUFBTzJLLEVBQVlNLEdBQ2hDLElBQUlFLEVBQU8sQ0FRVDFDLE1BQU8sU0FBZXlFLEdBQ3BCLElBQUssSUFBSTFKLEVBQUksRUFBR2lNLEVBQU12QyxFQUFPekosT0FBUUQsRUFBSWlNLEVBQUtqTSxJQUFLLENBQ2pELElBQUl1SyxFQUFRYixFQUFPMUosR0FBR3VLLE1BQ2xCek0sRUFBWXFKLEVBQVdHLFVBQVV0RyxNQUduQ3VKLEVBQU05RSxFQUFZM0gsR0FBVyxJQURyQixJQUFOa0MsRUFDaUN2RCxLQUFLdUUsTUFBUSxFQUFJLEtBRWpCLEdBR2pDaEIsSUFBTTBKLEVBQU96SixPQUFTLEVBQ3hCc0ssRUFBTTlFLEVBQVkzSCxHQUFXLElBQU1yQixLQUFLdUUsTUFBUSxFQUFJLEtBRXBEdUosRUFBTTlFLEVBQVkzSCxHQUFXLElBQU0sS0FZekN1RSxPQUFRLFNBQWdCcUgsR0FDdEIsSUFBSyxJQUFJMUosRUFBSSxFQUFHaU0sRUFBTXZDLEVBQU96SixPQUFRRCxFQUFJaU0sRUFBS2pNLElBQUssQ0FDakQsSUFBSXVLLEVBQVFiLEVBQU8xSixHQUFHdUssTUFFdEJBLEVBQU0yQixXQUFhLEdBQ25CM0IsRUFBTTRCLFlBQWMsTUEyRDFCLE9BdERBN1AsRUFBT3FMLEVBQU0sUUFBUyxDQU1wQjdELElBQUssV0FDSCxPQUFPL0MsRUFBTXZFLEVBQU1tRixTQUFTNUUsUUFJaENULEVBQU9xTCxFQUFNLE9BQVEsQ0FPbkI3RCxJQUFLLFdBQ0gsT0FBTzZELEVBQUszRyxPQUFTbUcsRUFBV2MsTUFBTWhJLE9BQVMsTUFJbkQzRCxFQUFPcUwsRUFBTSxXQUFZLENBT3ZCN0QsSUFBSyxXQUNILElBQUlqSCxFQUFVTCxFQUFNbUYsU0FBUzlFLFFBRTdCLE9BQU84SyxFQUFLM0csT0FBU25FLEVBQVUsR0FBS0EsS0FTeEM0SyxFQUFPekYsR0FBRyxDQUFDLGNBQWUsVUFBV25FLEVBQVMsV0FDNUM4SixFQUFLMUMsTUFBTWtDLEVBQVdtQyxLQUFLTSxRQUFRQyxXQUNsQyxLQU1IcEMsRUFBT3pGLEdBQUcsVUFBVyxXQUNuQjJGLEVBQUt0RixPQUFPOEUsRUFBV21DLEtBQUtNLFFBQVFDLFlBRy9CbEMsR0EyMEVQaEUsS0F2b0VGLFNBQWVuSCxFQUFPMkssRUFBWU0sR0FDaEMsSUFBSTlELEVBQU8sQ0FNVFQsTUFBTyxXQUNMekcsS0FBS3NILEdBQUssR0FVWlIsS0FBTSxTQUFBLEdBQ0osSUFBSTZJLEVBQVEzUCxLQUVSeU8sRUFBNEIsRUFBbkJ2SyxVQUFVVixhQUErQnlDLElBSGxELEVBQUEsRUFHNkUsRUFFakZqRyxLQUFLeU8sT0FBU0EsRUFFZHpELEVBQU9sRixLQUFLLE9BQVEsQ0FDbEJvSSxTQUFVbE8sS0FBS3VFLFFBR2pCbUcsRUFBVzFELFdBQVdpSCxNQUFNLFdBQzFCakQsRUFBT2xGLEtBQUssYUFBYyxDQUN4Qm9JLFNBQVV5QixFQUFNcEwsWUFpRXhCLE9BM0RBMUUsRUFBT3FILEVBQU0sU0FBVSxDQU1yQkcsSUFBSyxXQUNILE9BQU9ILEVBQUtJLElBU2RDLElBQUssU0FBYWhELEdBQ2hCMkMsRUFBS0ksR0FBTTFDLEVBQVlMLEdBQXdCLEVBQWZELEVBQU1DLE1BSTFDMUUsRUFBT3FILEVBQU0sWUFBYSxDQU14QkcsSUFBSyxXQUNILE9BQU9xRCxFQUFXYyxNQUFNQyxXQUFhMUwsRUFBTTJGLFNBSS9DN0YsRUFBT3FILEVBQU0sUUFBUyxDQU1wQkcsSUFBSyxXQUNILElBQUlvSCxFQUFTek8sS0FBS3lPLE9BQ2Q3RCxFQUFZNUssS0FBSzRLLFVBRXJCLE9BQUlGLEVBQVdHLFVBQVVDLEdBQUcsT0FDbkJGLEVBQVk2RCxFQUdkN0QsRUFBWTZELEtBU3ZCekQsRUFBT3pGLEdBQUcsQ0FBQyxlQUFnQixPQUFRLFdBQ2pDMkIsRUFBS0osU0FHQUksR0F3aUVQaUUsT0E1MURGLFNBQWlCcEwsRUFBTzJLLEVBQVlNLEdBQ2xDLElBQUlHLEVBQVMsQ0FJWDFFLE1BQU8sV0FDTHpHLEtBQUs0UCxNQUFRLEdBRVQ3UCxFQUFNZ08sT0FBTyxjQUNmL04sS0FBSzRQLE1BQVE1UCxLQUFLNlAsWUFVdEJBLFFBQVMsU0FBQSxHQWFQLElBWkEsSUFBSUQsRUFBMkIsRUFBbkIxTCxVQUFVVixhQUErQnlDLElBRDlDLEVBQUEsRUFDeUUsR0FDNUVnSCxFQUFTdkMsRUFBV21DLEtBQUtJLE9BQ3pCNkMsRUFBa0IvUCxFQUFNbUYsU0FDeEI5RSxFQUFVMFAsRUFBZ0IxUCxRQUMxQm9CLEVBQVVzTyxFQUFnQnRPLFFBSTFCdU8sRUFBTzNQLE1BRGNMLEVBQU1tRixTQUFTNUQsS0FFcEMwTyxFQUFRL0MsRUFBT0MsTUFBTSxFQUFHNkMsR0FDeEJFLEVBQU1oRCxFQUFPQyxPQUFPNkMsR0FFZnJELEVBQUksRUFBR0EsRUFBSXdELEtBQUtDLElBQUksRUFBR0QsS0FBS0UsTUFBTWhRLEVBQVU2TSxFQUFPekosU0FBVWtKLElBQUssQ0FDekUsSUFBSyxJQUFJbkosRUFBSSxFQUFHQSxFQUFJeU0sRUFBTXhNLE9BQVFELElBQUssQ0FDckMsSUFBSThNLEVBQVFMLEVBQU16TSxHQUFHK00sV0FBVSxHQUUvQkQsRUFBTTlDLFVBQVV3QixJQUFJdk4sRUFBUU8sWUFFNUI2TixFQUFNakssS0FBSzBLLEdBR2IsSUFBSyxJQUFJNUksRUFBSyxFQUFHQSxFQUFLd0ksRUFBSXpNLE9BQVFpRSxJQUFNLENBQ3RDLElBQUk4SSxFQUFTTixFQUFJeEksR0FBSTZJLFdBQVUsR0FFL0JDLEVBQU9oRCxVQUFVd0IsSUFBSXZOLEVBQVFPLFlBRTdCNk4sRUFBTVksUUFBUUQsSUFJbEIsT0FBT1gsR0FTVGEsT0FBUSxXQVlOLElBWEEsSUFBSWIsRUFBUTVQLEtBQUs0UCxNQUNiYyxFQUFtQmhHLEVBQVdtQyxLQUM5Qk0sRUFBVXVELEVBQWlCdkQsUUFDM0JGLEVBQVN5RCxFQUFpQnpELE9BRzFCMEQsRUFBT1QsS0FBS0UsTUFBTVIsRUFBTXBNLE9BQVMsR0FDakNvTixFQUFVaEIsRUFBTTFDLE1BQU0sRUFBR3lELEdBQU1FLFVBQy9CSixFQUFTYixFQUFNMUMsTUFBTXlELEVBQU1mLEVBQU1wTSxRQUNqQytILEVBQVFiLEVBQVdjLE1BQU1DLFdBQWEsS0FFakNsSSxFQUFJLEVBQUdBLEVBQUlrTixFQUFPak4sT0FBUUQsSUFDakM0SixFQUFRMkQsWUFBWUwsRUFBT2xOLElBRzdCLElBQUssSUFBSXdOLEVBQU0sRUFBR0EsRUFBTUgsRUFBUXBOLE9BQVF1TixJQUN0QzVELEVBQVE2RCxhQUFhSixFQUFRRyxHQUFNOUQsRUFBTyxJQUc1QyxJQUFLLElBQUlnRSxFQUFNLEVBQUdBLEVBQU1yQixFQUFNcE0sT0FBUXlOLElBQ3BDckIsRUFBTXFCLEdBQUtuRCxNQUFNdkMsTUFBUUEsR0FVN0IzRixPQUFRLFdBSU4sSUFIQSxJQUFJZ0ssRUFBUTVQLEtBQUs0UCxNQUdSck0sRUFBSSxFQUFHQSxFQUFJcU0sRUFBTXBNLE9BQVFELElBQ2hDbUgsRUFBV21DLEtBQUtNLFFBQVErRCxZQUFZdEIsRUFBTXJNLE1BNENoRCxPQXZDQTFELEVBQU9zTCxFQUFRLE9BQVEsQ0FNckI5RCxJQUFLLFdBQ0gsT0FBUXFELEVBQVdjLE1BQU1DLFdBQWFmLEVBQVdRLEtBQUszRyxPQUFTNEcsRUFBT3lFLE1BQU1wTSxVQVFoRndILEVBQU96RixHQUFHLFNBQVUsV0FDbEI0RixFQUFPdkYsU0FDUHVGLEVBQU8xRSxRQUNQMEUsRUFBT3NGLFdBT1R6RixFQUFPekYsR0FBRyxlQUFnQixXQUNwQnhGLEVBQU1nTyxPQUFPLGFBQ2Y1QyxFQUFPc0YsV0FRWHpGLEVBQU96RixHQUFHLFVBQVcsV0FDbkI0RixFQUFPdkYsV0FHRnVGLEdBa3REUGdHLE9Bbm9ERixTQUFpQnBSLEVBQU8ySyxFQUFZTSxHQU1sQyxJQUFJb0csRUFBUyxJQUFJdkgsRUFFYnNILEVBQVMsQ0FJWDFLLE1BQU8sV0FDTHpHLEtBQUtxUixRQVVQQSxLQUFNLFdBQ0pELEVBQU83TCxHQUFHLFNBQVVtRSxPQUFRdEksRUFBUyxXQUNuQzRKLEVBQU9sRixLQUFLLFdBQ1gvRixFQUFNbUYsU0FBUzlELFlBU3BCa1EsT0FBUSxXQUNORixFQUFPRyxJQUFJLFNBQVU3SCxVQWF6QixPQUxBc0IsRUFBT3pGLEdBQUcsVUFBVyxXQUNuQjRMLEVBQU9HLFNBQ1BGLEVBQU9JLFlBR0ZMLEdBbWxEUE0sTUExN0RGLFNBQWdCMVIsRUFBTzJLLEVBQVlNLEdBQ2pDLElBQUl5RyxFQUFRLENBT1ZoTCxNQUFPLFdBQ0x1RSxFQUFPbEYsS0FBSyxnQkFFWjlGLEtBQUswUixZQUNMMVIsS0FBSzJSLGNBRUwzRyxFQUFPbEYsS0FBSyxnQkFTZDRMLFVBQVcsV0FDVGhILEVBQVdtQyxLQUFLQyxLQUFLUyxVQUFVd0IsSUFBSWhQLEVBQU1tRixTQUFTMUQsUUFBUXpCLEVBQU1tRixTQUFTaEYsUUFTM0V5UixZQUFhLFdBQ1gsSUFBSW5RLEVBQVV6QixFQUFNbUYsU0FBUzFELFFBQ3pCOEwsRUFBUTVDLEVBQVdtQyxLQUFLSSxPQUFPbE4sRUFBTTJGLE9BRXJDNEgsSUFDRkEsRUFBTUMsVUFBVXdCLElBQUl2TixFQUFRUyxhQUU1QmdILEVBQVNxRSxHQUFPdkgsUUFBUSxTQUFVNkwsR0FDaENBLEVBQVFyRSxVQUFVM0gsT0FBT3BFLEVBQVFTLGlCQVd2QzRQLGNBQWUsV0FDYixJQUFJclEsRUFBVXpCLEVBQU1tRixTQUFTMUQsUUFFN0JrSixFQUFXbUMsS0FBS0MsS0FBS1MsVUFBVTNILE9BQU9wRSxFQUFRekIsRUFBTW1GLFNBQVNoRixPQUU3RHdLLEVBQVdtQyxLQUFLSSxPQUFPbEgsUUFBUSxTQUFVNkwsR0FDdkNBLEVBQVFyRSxVQUFVM0gsT0FBT3BFLEVBQVFTLGlCQStCdkMsT0FyQkErSSxFQUFPekYsR0FBRyxDQUFDLFVBQVcsVUFBVyxXQUMvQmtNLEVBQU1JLGtCQVFSN0csRUFBT3pGLEdBQUcsQ0FBQyxTQUFVLFVBQVcsV0FDOUJrTSxFQUFNaEwsVUFPUnVFLEVBQU96RixHQUFHLE9BQVEsV0FDaEJrTSxFQUFNRSxnQkFHREYsR0FrMkRQNUssSUFyc0ZGLFNBQWM5RyxFQUFPMkssRUFBWU0sR0FDL0IsSUFBSW5FLEVBQU0sQ0FNUkosTUFBTyxXQUNMekcsS0FBS3NILElBQUssR0FTWlIsS0FBTSxTQUFjZ0wsR0FDbEIsSUFBSW5DLEVBQVEzUCxLQUVQRCxFQUFNcUgsV0FDVHJILEVBQU1rSCxVQUVOakgsS0FBSzhSLEtBQU9BLEVBRVo5RyxFQUFPbEYsS0FBSyxhQUFjOUYsS0FBSzhSLE1BRS9COVIsS0FBSytSLFlBRUwvRyxFQUFPbEYsS0FBSyxNQUFPOUYsS0FBSzhSLE1BRXhCcEgsRUFBVzFELFdBQVdpSCxNQUFNLFdBQ3RCMEIsRUFBTXFDLFdBQ1JoSCxFQUFPbEYsS0FBSyxZQUFhNkosRUFBTW1DLE1BRzdCbkMsRUFBTXNDLFNBQ1JqSCxFQUFPbEYsS0FBSyxVQUFXNkosRUFBTW1DLE9BRzNCbkMsRUFBTTNCLFNBQVMsTUFBUTJCLEVBQU0zQixTQUFTLFFBQ3hDMkIsRUFBTXJJLElBQUssRUFFWDBELEVBQU9sRixLQUFLLGFBQWM2SixFQUFNbUMsT0FHbEM5RyxFQUFPbEYsS0FBSyxZQUFhNkosRUFBTW1DLE1BRS9CL1IsRUFBTXlPLGFBV1p1RCxVQUFXLFdBQ1QsSUFBSUQsRUFBTzlSLEtBQUs4UixLQUNadE8sRUFBU3hELEtBQUt3RCxPQUNkME8sRUFBUUosRUFBS0ksTUFDYjdRLEVBQVl5USxFQUFLelEsVUFHakI4USxFQXBrQmdCLGlCQW9rQlU3TixFQUFNNE4sSUFBNEIsSUFBakI1TixFQUFNNE4sR0FFckQsT0FBUTdRLEdBQ04sSUFBSyxJQUNXLE1BQVY2USxFQUNGblMsRUFBTTJGLE1BQVFsQyxFQUNMeEQsS0FBS2lTLFFBQ1JsUyxFQUFNZ08sT0FBTyxZQUFjaE8sRUFBTW1GLFNBQVNqRSxTQUM5Q2pCLEtBQUtzSCxJQUFLLEVBRVZ2SCxFQUFNMkYsTUFBUSxHQUVQeU0sRUFDVHBTLEVBQU0yRixPQUFTd0ssS0FBS2tDLElBQUk1TyxFQUFTekQsRUFBTTJGLE9BQVFwQixFQUFNNE4sSUFFckRuUyxFQUFNMkYsUUFFUixNQUVGLElBQUssSUFDVyxNQUFWd00sRUFDRm5TLEVBQU0yRixNQUFRLEVBQ0wxRixLQUFLZ1MsVUFDUmpTLEVBQU1nTyxPQUFPLFlBQWNoTyxFQUFNbUYsU0FBU2pFLFNBQzlDakIsS0FBS3NILElBQUssRUFFVnZILEVBQU0yRixNQUFRbEMsR0FFUDJPLEVBQ1RwUyxFQUFNMkYsT0FBU3dLLEtBQUtrQyxJQUFJclMsRUFBTTJGLE1BQU9wQixFQUFNNE4sSUFFM0NuUyxFQUFNMkYsUUFFUixNQUVGLElBQUssSUFDSDNGLEVBQU0yRixNQUFRd00sRUFDZCxNQUVGLFFBQ0UvUCxFQUFLLDhCQUFnQ2QsRUFBWTZRLEVBQVEscUJBVy9ERixRQUFTLFdBQ1AsT0FBdUIsSUFBaEJqUyxFQUFNMkYsT0FTZnVNLE1BQU8sV0FDTCxPQUFPbFMsRUFBTTJGLFFBQVUxRixLQUFLd0QsUUFVOUJ3SyxTQUFVLFNBQWtCM00sR0FDMUIsT0FBT3JCLEtBQUtzSCxJQUFNdEgsS0FBSzhSLEtBQUt6USxZQUFjQSxJQWdFOUMsT0E1REF4QixFQUFPZ0gsRUFBSyxPQUFRLENBTWxCUSxJQUFLLFdBQ0gsT0FBT3JILEtBQUtxUyxJQVNkOUssSUFBSyxTQUFhaEQsR0FDaEIsSUFBSStOLEVBQU8vTixFQUFNZ08sT0FBTyxHQUV4QnZTLEtBQUtxUyxHQUFLLENBQ1JoUixVQUFXa0QsRUFBTWdPLE9BQU8sRUFBRyxHQUMzQkwsTUFBT0ksRUFBT2hPLEVBQU1nTyxHQUFRaE8sRUFBTWdPLEdBQVFBLEVBQU8sTUFLdkR6UyxFQUFPZ0gsRUFBSyxTQUFVLENBT3BCUSxJQUFLLFdBQ0gsSUFBSW5DLEVBQVduRixFQUFNbUYsU0FDakIxQixFQUFTa0gsRUFBV21DLEtBQUtJLE9BQU96SixPQU1wQyxPQUFJekQsRUFBTWdPLE9BQU8sV0FBa0MsV0FBckI3SSxFQUFTN0UsU0FBd0I2RSxFQUFTeEUsTUFDL0Q4QyxFQUFTLEdBQUtjLEVBQU1ZLEVBQVM5RSxTQUFXLEdBQUtrRSxFQUFNWSxFQUFTN0UsU0FHOURtRCxFQUFTLEtBSXBCM0QsRUFBT2dILEVBQUssU0FBVSxDQU1wQlEsSUFBSyxXQUNILE9BQU9ySCxLQUFLc0gsTUFJVFQsR0E2L0VQMkwsTUFwa0NGLFNBQWdCelMsRUFBTzJLLEVBQVlNLEdBTWpDLElBQUlvRyxFQUFTLElBQUl2SCxFQUViNEksRUFBVyxFQUNYQyxFQUFjLEVBQ2RDLEVBQWMsRUFDZHZMLEdBQVcsRUFDWDRDLElBQVVnQyxHQUFvQixDQUFFNEcsU0FBUyxHQUV6Q0osRUFBUSxDQU1WL0wsTUFBTyxXQUNMekcsS0FBSzZTLGtCQVVQN0MsTUFBTyxTQUFlM0ssR0FDcEIsSUFBSytCLElBQWFySCxFQUFNcUgsU0FBVSxDQUNoQ3BILEtBQUtpSCxVQUVMLElBQUk2TCxFQUFROVMsS0FBSytTLFFBQVExTixHQUV6Qm9OLEVBQVcsS0FDWEMsRUFBY3BPLEVBQU13TyxFQUFNRSxPQUMxQkwsRUFBY3JPLEVBQU13TyxFQUFNRyxPQUUxQmpULEtBQUtrVCxnQkFDTGxULEtBQUttVCxlQUVMbkksRUFBT2xGLEtBQUssaUJBVWhCZ00sS0FBTSxTQUFjek0sR0FDbEIsSUFBS3RGLEVBQU1xSCxTQUFVLENBQ25CLElBQUkwSSxFQUFrQi9QLEVBQU1tRixTQUN4Qm5FLEVBQWErTyxFQUFnQi9PLFdBQzdCRCxFQUFhZ1AsRUFBZ0JoUCxXQUM3QlUsRUFBVXNPLEVBQWdCdE8sUUFHMUJzUixFQUFROVMsS0FBSytTLFFBQVExTixHQUVyQitOLEVBQVU5TyxFQUFNd08sRUFBTUUsT0FBU04sRUFDL0JXLEVBQVUvTyxFQUFNd08sRUFBTUcsT0FBU04sRUFDL0JXLEVBQVFwRCxLQUFLcUQsSUFBSUgsR0FBVyxHQUM1QkksRUFBUXRELEtBQUtxRCxJQUFJRixHQUFXLEdBQzVCSSxFQUFrQnZELEtBQUt3RCxLQUFLSixFQUFRRSxHQUNwQ0csRUFBZ0J6RCxLQUFLd0QsS0FBS0YsR0FJOUIsS0FBZSxLQUZmZixFQUFXdkMsS0FBSzBELEtBQUtELEVBQWdCRixJQUVoQnZELEtBQUsyRCxHQUFLOVMsR0FTN0IsT0FBTyxFQVJQc0UsRUFBTXlPLGtCQUVOcEosRUFBV3hELEtBQUtKLEtBQUtzTSxFQXB2RXRCVyxXQW92RXdDalQsSUFFdkM0SixFQUFXbUMsS0FBS0MsS0FBS1MsVUFBVXdCLElBQUl2TixFQUFRTSxVQUUzQ2tKLEVBQU9sRixLQUFLLGdCQWNsQm1LLElBQUssU0FBYTVLLEdBQ2hCLElBQUt0RixFQUFNcUgsU0FBVSxDQUNuQixJQUFJbEMsRUFBV25GLEVBQU1tRixTQUVqQjROLEVBQVE5UyxLQUFLK1MsUUFBUTFOLEdBQ3JCMk8sRUFBWWhVLEtBQUtnVSxVQUFVM08sR0FFM0I0TyxFQUFnQm5CLEVBQU1FLE1BQVFOLEVBQzlCd0IsRUFBc0IsSUFBWHpCLEVBQWlCdkMsS0FBSzJELEdBQ2pDM0IsRUFBUWhDLEtBQUtpRSxNQUFNRixFQUFnQnZKLEVBQVdjLE1BQU1DLFlBRXhEekwsS0FBS3dPLFNBRWV3RixFQUFoQkMsR0FBNkJDLEVBQVdoUCxFQUFTbkUsWUFFL0NtRSxFQUFTckUsV0FDWHFSLEVBQVFoQyxLQUFLa0MsSUFBSUYsRUFBTzVOLEVBQU1ZLEVBQVNyRSxZQUdyQzZKLEVBQVdHLFVBQVVDLEdBQUcsU0FDMUJvSCxHQUFTQSxHQUdYeEgsRUFBVzdELElBQUlDLEtBQUs0RCxFQUFXRyxVQUFVNkQsUUFBUSxJQUFNd0QsS0FDOUMrQixHQUFpQkQsR0FBYUUsRUFBV2hQLEVBQVNuRSxZQUV2RG1FLEVBQVNyRSxXQUNYcVIsRUFBUWhDLEtBQUtDLElBQUkrQixHQUFRNU4sRUFBTVksRUFBU3JFLFlBR3RDNkosRUFBV0csVUFBVUMsR0FBRyxTQUMxQm9ILEdBQVNBLEdBR1h4SCxFQUFXN0QsSUFBSUMsS0FBSzRELEVBQVdHLFVBQVU2RCxRQUFRLElBQU13RCxLQUd2RHhILEVBQVd4RCxLQUFLSixPQUdsQjRELEVBQVdtQyxLQUFLQyxLQUFLUyxVQUFVM0gsT0FBT1YsRUFBUzFELFFBQVFNLFVBRXZEOUIsS0FBS29VLGtCQUNMcFUsS0FBS3FVLGlCQUVMckosRUFBT2xGLEtBQUssZUFVaEIrTSxlQUFnQixXQUNkLElBQUlsRCxFQUFRM1AsS0FFUmtGLEVBQVduRixFQUFNbUYsU0FFakJBLEVBQVN2RSxnQkFDWHlRLEVBQU83TCxHQUFHMEcsRUFBYSxHQUFJdkIsRUFBV21DLEtBQUtNLFFBQVMsU0FBVTlILEdBQzVEc0ssRUFBTUssTUFBTTNLLElBQ1gyRSxHQUdEOUUsRUFBU3RFLGVBQ1h3USxFQUFPN0wsR0FBRzBHLEVBQWEsR0FBSXZCLEVBQVdtQyxLQUFLTSxRQUFTLFNBQVU5SCxHQUM1RHNLLEVBQU1LLE1BQU0zSyxJQUNYMkUsSUFVUHNLLGlCQUFrQixXQUNoQmxELEVBQU9HLElBQUl0RixFQUFhLEdBQUl2QixFQUFXbUMsS0FBS00sUUFBU25ELEdBQ3JEb0gsRUFBT0csSUFBSXRGLEVBQWEsR0FBSXZCLEVBQVdtQyxLQUFLTSxRQUFTbkQsSUFTdkRrSixjQUFlLFdBQ2IsSUFBSXFCLEVBQVN2VSxLQUVib1IsRUFBTzdMLEdBQUcyRyxFQUFheEIsRUFBV21DLEtBQUtNLFFBQVMvTCxFQUFTLFNBQVVpRSxHQUNqRWtQLEVBQU96QyxLQUFLek0sSUFDWHRGLEVBQU1tRixTQUFTOUQsVUFBVzRJLElBUy9Cb0ssZ0JBQWlCLFdBQ2ZoRCxFQUFPRyxJQUFJckYsRUFBYXhCLEVBQVdtQyxLQUFLTSxRQUFTbkQsSUFTbkRtSixhQUFjLFdBQ1osSUFBSXFCLEVBQVN4VSxLQUVib1IsRUFBTzdMLEdBQUc0RyxFQUFZekIsRUFBV21DLEtBQUtNLFFBQVMsU0FBVTlILEdBQ3ZEbVAsRUFBT3ZFLElBQUk1SyxNQVVmZ1AsZUFBZ0IsV0FDZGpELEVBQU9HLElBQUlwRixFQUFZekIsRUFBV21DLEtBQUtNLFVBU3pDNEYsUUFBUyxTQUFpQjFOLEdBQ3hCLE9BQXdDLEVBQXBDK0csRUFBYThDLFFBQVE3SixFQUFNbkYsTUFDdEJtRixFQUdGQSxFQUFNME4sUUFBUSxJQUFNMU4sRUFBTW9QLGVBQWUsSUFTbERULFVBQVcsU0FBbUIzTyxHQUM1QixJQUFJSCxFQUFXbkYsRUFBTW1GLFNBRXJCLE9BQXdDLEVBQXBDa0gsRUFBYThDLFFBQVE3SixFQUFNbkYsTUFDdEJnRixFQUFTdEUsY0FHWHNFLEVBQVN2RSxnQkFTbEI2TixPQUFRLFdBS04sT0FKQXBILEdBQVcsRUFFWHNELEVBQVcxRCxXQUFXd0gsU0FFZnhPLE1BU1RpSCxRQUFTLFdBS1AsT0FKQUcsR0FBVyxFQUVYc0QsRUFBVzFELFdBQVdDLFVBRWZqSCxPQXVCWCxPQWZBZ0wsRUFBT3pGLEdBQUcsY0FBZSxXQUN2Qm1GLEVBQVdtQyxLQUFLQyxLQUFLUyxVQUFVd0IsSUFBSWhQLEVBQU1tRixTQUFTMUQsUUFBUUssYUFPNURtSixFQUFPekYsR0FBRyxVQUFXLFdBQ25CaU4sRUFBTThCLG1CQUNOOUIsRUFBTTRCLGtCQUNONUIsRUFBTTZCLGlCQUNOakQsRUFBT0ksWUFHRmdCLEdBcXhCUGtDLE9BbHhCRixTQUFpQjNVLEVBQU8ySyxFQUFZTSxHQU1sQyxJQUFJb0csRUFBUyxJQUFJdkgsRUFFYjZLLEVBQVMsQ0FNWGpPLE1BQU8sV0FDTHpHLEtBQUtxUixRQVNQQSxLQUFNLFdBQ0pELEVBQU83TCxHQUFHLFlBQWFtRixFQUFXbUMsS0FBS00sUUFBU25OLEtBQUsyVSxZQVN2RHJELE9BQVEsV0FDTkYsRUFBT0csSUFBSSxZQUFhN0csRUFBV21DLEtBQUtNLFVBUzFDd0gsVUFBVyxTQUFtQnRQLEdBQzVCQSxFQUFNdVAsbUJBYVYsT0FMQTVKLEVBQU96RixHQUFHLFVBQVcsV0FDbkJtUCxFQUFPcEQsU0FDUEYsRUFBT0ksWUFHRmtELEdBeXRCUEcsUUF0dEJGLFNBQWtCOVUsRUFBTzJLLEVBQVlNLEdBTW5DLElBQUlvRyxFQUFTLElBQUl2SCxFQVNiaUwsR0FBVyxFQVNYQyxHQUFZLEVBRVpGLEVBQVUsQ0FNWnBPLE1BQU8sV0FPTHpHLEtBQUtnVixHQUFLdEssRUFBV21DLEtBQUtNLFFBQVE4SCxpQkFBaUIsS0FFbkRqVixLQUFLcVIsUUFTUEEsS0FBTSxXQUNKRCxFQUFPN0wsR0FBRyxRQUFTbUYsRUFBV21DLEtBQUtNLFFBQVNuTixLQUFLa1YsUUFTbkQ1RCxPQUFRLFdBQ05GLEVBQU9HLElBQUksUUFBUzdHLEVBQVdtQyxLQUFLTSxVQVV0QytILE1BQU8sU0FBZTdQLEdBQ2hCMFAsSUFDRjFQLEVBQU15TyxrQkFDTnpPLEVBQU11UCxtQkFVVk8sT0FBUSxXQUdOLEdBRkFKLEdBQVksR0FFUEQsRUFBVSxDQUNiLElBQUssSUFBSXZSLEVBQUksRUFBR0EsRUFBSXZELEtBQUs0UCxNQUFNcE0sT0FBUUQsSUFDckN2RCxLQUFLNFAsTUFBTXJNLEdBQUc2UixXQUFZLEVBRTFCcFYsS0FBSzRQLE1BQU1yTSxHQUFHOFIsYUFBYSxZQUFhclYsS0FBSzRQLE1BQU1yTSxHQUFHK1IsYUFBYSxTQUVuRXRWLEtBQUs0UCxNQUFNck0sR0FBR2dTLGdCQUFnQixRQUdoQ1QsR0FBVyxFQUdiLE9BQU85VSxNQVNUd1YsT0FBUSxXQUdOLEdBRkFULEdBQVksRUFFUkQsRUFBVSxDQUNaLElBQUssSUFBSXZSLEVBQUksRUFBR0EsRUFBSXZELEtBQUs0UCxNQUFNcE0sT0FBUUQsSUFDckN2RCxLQUFLNFAsTUFBTXJNLEdBQUc2UixXQUFZLEVBRTFCcFYsS0FBSzRQLE1BQU1yTSxHQUFHOFIsYUFBYSxPQUFRclYsS0FBSzRQLE1BQU1yTSxHQUFHK1IsYUFBYSxjQUdoRVIsR0FBVyxFQUdiLE9BQU85VSxPQTJDWCxPQXZDQUgsRUFBT2dWLEVBQVMsUUFBUyxDQU12QnhOLElBQUssV0FDSCxPQUFPd04sRUFBUUcsTUFRbkJoSyxFQUFPekYsR0FBRyxhQUFjLFdBQ3RCc1AsRUFBUU0sV0FPVm5LLEVBQU96RixHQUFHLFlBQWEsV0FDckJtRixFQUFXMUQsV0FBV2lILE1BQU0sV0FDMUI0RyxFQUFRVyxhQVFaeEssRUFBT3pGLEdBQUcsVUFBVyxXQUNuQnNQLEVBQVFXLFNBQ1JYLEVBQVF2RCxTQUNSRixFQUFPSSxZQUdGcUQsR0FtakJQWSxTQTdpQkYsU0FBbUIxVixFQUFPMkssRUFBWU0sR0FNcEMsSUFBSW9HLEVBQVMsSUFBSXZILEVBRWJHLElBQVVnQyxHQUFvQixDQUFFNEcsU0FBUyxHQUV6QzZDLEVBQVcsQ0FPYmhQLE1BQU8sV0FPTHpHLEtBQUswVixHQUFLaEwsRUFBV21DLEtBQUtDLEtBQUttSSxpQkEzQmxCLG1DQW1DYmpWLEtBQUtvRyxHQUFLc0UsRUFBV21DLEtBQUtDLEtBQUttSSxpQkFsQ2IsK0JBb0NsQmpWLEtBQUsyVixlQVNQQyxVQUFXLFdBQ1QsSUFBSyxJQUFJclMsRUFBSSxFQUFHQSxFQUFJdkQsS0FBSzBWLEdBQUdsUyxPQUFRRCxJQUNsQ3ZELEtBQUs4TyxTQUFTOU8sS0FBSzBWLEdBQUduUyxHQUFHNkosV0FVN0J5SSxhQUFjLFdBQ1osSUFBSyxJQUFJdFMsRUFBSSxFQUFHQSxFQUFJdkQsS0FBSzBWLEdBQUdsUyxPQUFRRCxJQUNsQ3ZELEtBQUtnUCxZQUFZaFAsS0FBSzBWLEdBQUduUyxHQUFHNkosV0FXaEMwQixTQUFVLFNBQWtCZ0gsR0FDMUIsSUFBSTVRLEVBQVduRixFQUFNbUYsU0FDakJjLEVBQU84UCxFQUFTL1YsRUFBTTJGLE9BRXRCTSxJQUNGQSxFQUFLdUgsVUFBVXdCLElBQUk3SixFQUFTMUQsUUFBUVEsV0FFcENpSCxFQUFTakQsR0FBTUQsUUFBUSxTQUFVNkwsR0FDL0JBLEVBQVFyRSxVQUFVM0gsT0FBT1YsRUFBUzFELFFBQVFRLGVBWWhEZ04sWUFBYSxTQUFxQjhHLEdBQ2hDLElBQUk5UCxFQUFPOFAsRUFBUy9WLEVBQU0yRixPQUV0Qk0sR0FDRkEsRUFBS3VILFVBQVUzSCxPQUFPN0YsRUFBTW1GLFNBQVMxRCxRQUFRUSxZQVVqRDJULFlBQWEsV0FDWCxJQUFLLElBQUlwUyxFQUFJLEVBQUdBLEVBQUl2RCxLQUFLb0csR0FBRzVDLE9BQVFELElBQ2xDdkQsS0FBS3FSLEtBQUtyUixLQUFLb0csR0FBRzdDLEdBQUc2SixXQVV6QjJJLGVBQWdCLFdBQ2QsSUFBSyxJQUFJeFMsRUFBSSxFQUFHQSxFQUFJdkQsS0FBS29HLEdBQUc1QyxPQUFRRCxJQUNsQ3ZELEtBQUtzUixPQUFPdFIsS0FBS29HLEdBQUc3QyxHQUFHNkosV0FXM0JpRSxLQUFNLFNBQWMyRSxHQUNsQixJQUFLLElBQUl6UyxFQUFJLEVBQUdBLEVBQUl5UyxFQUFTeFMsT0FBUUQsSUFDbkM2TixFQUFPN0wsR0FBRyxRQUFTeVEsRUFBU3pTLEdBQUl2RCxLQUFLa1YsT0FDckM5RCxFQUFPN0wsR0FBRyxhQUFjeVEsRUFBU3pTLEdBQUl2RCxLQUFLa1YsTUFBT2xMLElBV3JEc0gsT0FBUSxTQUFnQjBFLEdBQ3RCLElBQUssSUFBSXpTLEVBQUksRUFBR0EsRUFBSXlTLEVBQVN4UyxPQUFRRCxJQUNuQzZOLEVBQU9HLElBQUksQ0FBQyxRQUFTLGNBQWV5RSxFQUFTelMsS0FhakQyUixNQUFPLFNBQWU3UCxHQUNwQkEsRUFBTXVQLGlCQUVObEssRUFBVzdELElBQUlDLEtBQUs0RCxFQUFXRyxVQUFVNkQsUUFBUXJKLEVBQU00USxjQUFjWCxhQUFhLHNCQWtDdEYsT0E5QkF6VixFQUFPNFYsRUFBVSxRQUFTLENBTXhCcE8sSUFBSyxXQUNILE9BQU9vTyxFQUFTclAsTUFTcEI0RSxFQUFPekYsR0FBRyxDQUFDLGNBQWUsY0FBZSxXQUN2Q2tRLEVBQVNHLGNBT1g1SyxFQUFPekYsR0FBRyxVQUFXLFdBQ25Ca1EsRUFBU00saUJBQ1ROLEVBQVNJLGVBQ1R6RSxFQUFPSSxZQUdGaUUsR0E2V1BTLFNBMVdGLFNBQW1CblcsRUFBTzJLLEVBQVlNLEdBTXBDLElBQUlvRyxFQUFTLElBQUl2SCxFQUVicU0sRUFBVyxDQU1ielAsTUFBTyxXQUNEMUcsRUFBTW1GLFNBQVN6RSxVQUNqQlQsS0FBS3FSLFFBVVRBLEtBQU0sV0FDSkQsRUFBTzdMLEdBQUcsUUFBU21JLFNBQVUxTixLQUFLbVcsUUFTcEM3RSxPQUFRLFdBQ05GLEVBQU9HLElBQUksUUFBUzdELFdBVXRCeUksTUFBTyxTQUFlOVEsR0FDRSxLQUFsQkEsRUFBTStRLFNBQ1IxTCxFQUFXN0QsSUFBSUMsS0FBSzRELEVBQVdHLFVBQVU2RCxRQUFRLE1BRzdCLEtBQWxCckosRUFBTStRLFNBQ1IxTCxFQUFXN0QsSUFBSUMsS0FBSzRELEVBQVdHLFVBQVU2RCxRQUFRLFFBOEJ2RCxPQXBCQTFELEVBQU96RixHQUFHLENBQUMsVUFBVyxVQUFXLFdBQy9CMlEsRUFBUzVFLFdBT1h0RyxFQUFPekYsR0FBRyxTQUFVLFdBQ2xCMlEsRUFBU3pQLFVBT1h1RSxFQUFPekYsR0FBRyxVQUFXLFdBQ25CNkwsRUFBT0ksWUFHRjBFLEdBd1JQRyxTQXJSRixTQUFtQnRXLEVBQU8ySyxFQUFZTSxHQU1wQyxJQUFJb0csRUFBUyxJQUFJdkgsRUFFYndNLEVBQVcsQ0FNYjVQLE1BQU8sV0FDTHpHLEtBQUtnUSxRQUVEalEsRUFBTW1GLFNBQVMxRSxZQUNqQlIsS0FBS3FSLFFBV1RyQixNQUFPLFdBQ0wsSUFBSUwsRUFBUTNQLEtBRVJELEVBQU1tRixTQUFTM0UsVUFDYnFFLEVBQVk1RSxLQUFLeUgsTUFDbkJ6SCxLQUFLeUgsR0FBSzZPLFlBQVksV0FDcEIzRyxFQUFNNEcsT0FFTjdMLEVBQVc3RCxJQUFJQyxLQUFLLEtBRXBCNkksRUFBTUssU0FDTGhRLEtBQUt3VyxRQVdkRCxLQUFNLFdBQ0p2VyxLQUFLeUgsR0FBS2dQLGNBQWN6VyxLQUFLeUgsS0FTL0I0SixLQUFNLFdBQ0osSUFBSWtELEVBQVN2VSxLQUVib1IsRUFBTzdMLEdBQUcsWUFBYW1GLEVBQVdtQyxLQUFLQyxLQUFNLFdBQzNDeUgsRUFBT2dDLFNBR1RuRixFQUFPN0wsR0FBRyxXQUFZbUYsRUFBV21DLEtBQUtDLEtBQU0sV0FDMUN5SCxFQUFPdkUsV0FVWHNCLE9BQVEsV0FDTkYsRUFBT0csSUFBSSxDQUFDLFlBQWEsWUFBYTdHLEVBQVdtQyxLQUFLQyxRQXFFMUQsT0FqRUFqTixFQUFPd1csRUFBVSxPQUFRLENBT3ZCaFAsSUFBSyxXQUNILElBQUk5RyxFQUFXbUssRUFBV21DLEtBQUtJLE9BQU9sTixFQUFNMkYsT0FBTzRQLGFBQWEsdUJBRWhFLE9BQ1NoUixFQURML0QsR0FJU1IsRUFBTW1GLFNBQVMzRSxhQVNoQ3lLLEVBQU96RixHQUFHLENBQUMsVUFBVyxVQUFXLFdBQy9COFEsRUFBUy9FLFdBV1h0RyxFQUFPekYsR0FBRyxDQUFDLGFBQWMsUUFBUyxVQUFXLGNBQWUsVUFBVyxXQUNyRThRLEVBQVNFLFNBU1h2TCxFQUFPekYsR0FBRyxDQUFDLFlBQWEsT0FBUSxhQUFjLFdBQzVDOFEsRUFBU3JHLFVBT1hoRixFQUFPekYsR0FBRyxTQUFVLFdBQ2xCOFEsRUFBUzVQLFVBT1h1RSxFQUFPekYsR0FBRyxVQUFXLFdBQ25CNkwsRUFBT0ksWUFHRjZFLEdBaUlQSyxZQTlHRixTQUFzQjNXLEVBQU8ySyxFQUFZTSxHQU12QyxJQUFJb0csRUFBUyxJQUFJdkgsRUFPYjNFLEVBQVduRixFQUFNbUYsU0FTakJvSCxFQUFTRCxFQUFnQm5ILEVBQVMzRCxhQU9sQ3RCLEVBQVcrRCxFQUFTLEdBQUlrQixHQUV4QndSLEVBQWMsQ0FPaEJDLE1BQU8sU0FBZXJLLEdBQ3BCLFFBQWlDLElBQXRCNUMsT0FBT2tOLFdBQ2hCLElBQUssSUFBSUMsS0FBU3ZLLEVBQ2hCLEdBQUlBLEVBQU9sSSxlQUFleVMsSUFDcEJuTixPQUFPa04sV0FBVyxlQUFpQkMsRUFBUSxPQUFPQyxRQUNwRCxPQUFPeEssRUFBT3VLLEdBTXRCLE9BQU81VyxJQW9DWCxPQTVCQStELEVBQVNrQixFQUFVd1IsRUFBWUMsTUFBTXJLLElBTXJDOEUsRUFBTzdMLEdBQUcsU0FBVW1FLE9BQVF0SSxFQUFTLFdBQ25DckIsRUFBTW1GLFNBQVdELEVBQWFDLEVBQVV3UixFQUFZQyxNQUFNckssS0FDekR2TSxFQUFNbUYsU0FBUzlELFdBTWxCNEosRUFBT3pGLEdBQUcsU0FBVSxXQUNsQitHLEVBQVNELEVBQWdCQyxHQUV6QnJNLEVBQVcrRCxFQUFTLEdBQUlrQixLQU8xQjhGLEVBQU96RixHQUFHLFVBQVcsV0FDbkI2TCxFQUFPRyxJQUFJLFNBQVU3SCxVQUdoQmdOLElBK0JQLFNBQVNLLElBRVAsT0FEQXhVLEVBQWV2QyxLQUFNK1csR0FweEdPLFNBQVVDLEVBQU0zUyxHQUM5QyxJQUFLMlMsRUFDSCxNQUFNLElBQUlDLGVBQWUsNkRBRzNCLE9BQU81UyxHQUF5QixpQkFBVEEsR0FBcUMsbUJBQVRBLEVBQThCMlMsRUFBUDNTLEVBZ3hHakU2UyxDQUEwQmxYLE1BQU8rVyxFQUFTSSxXQUFhdFQsT0FBT3VULGVBQWVMLElBQVd2TyxNQUFNeEksS0FBTWtFLFlBYy9HLE9BbnpHZSxTQUFVbVQsRUFBVUMsR0FDakMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQ3RDLE1BQU0sSUFBSTVVLFVBQVUsa0VBQW9FNFUsR0FHMUZELEVBQVNyVSxVQUFZYSxPQUFPMFQsT0FBT0QsR0FBY0EsRUFBV3RVLFVBQVcsQ0FDckVELFlBQWEsQ0FDWHdCLE1BQU84UyxFQUNQM1QsWUFBWSxFQUNaRSxVQUFVLEVBQ1ZELGNBQWMsS0FHZDJULElBQVl6VCxPQUFPMlQsZUFBaUIzVCxPQUFPMlQsZUFBZUgsRUFBVUMsR0FBY0QsRUFBU0YsVUFBWUcsR0FveEczR0csQ0FBU1YsRUFnQlRoWCxHQVRBa0QsRUFBWThULEVBQVUsQ0FBQyxDQUNyQmhULElBQUssUUFDTFEsTUFBTyxTQUFBLEdBQ0wsSUFBSTJCLEVBQWdDLEVBQW5CaEMsVUFBVVYsYUFBK0J5QyxJQURyRCxFQUFBLEVBQ2dGLEdBRXJGLE9BdDBHSSxTQUFTb0IsRUFBSXFRLEVBQVF0SixFQUFVdUosR0FDeEIsT0FBWEQsSUFBaUJBLEVBQVNFLFNBQVM1VSxXQUN2QyxJQUFJNlUsRUFBT2hVLE9BQU9pVSx5QkFBeUJKLEVBQVF0SixHQUVuRCxRQUFhbkksSUFBVDRSLEVBQW9CLENBQ3RCLElBQUlFLEVBQVNsVSxPQUFPdVQsZUFBZU0sR0FFbkMsT0FBZSxPQUFYSyxPQUNGLEVBRU8xUSxFQUFJMFEsRUFBUTNKLEVBQVV1SixHQUUxQixHQUFJLFVBQVdFLEVBQ3BCLE9BQU9BLEVBQUt0VCxNQUVaLElBQUl5VCxFQUFTSCxFQUFLeFEsSUFFbEIsWUFBZXBCLElBQVgrUixFQUlHQSxFQUFPM1QsS0FBS3NULFFBSm5CLEVBcXpHU3RRLENBQUkwUCxFQUFTL1QsVUFBVW1VLFdBQWF0VCxPQUFPdVQsZUFBZUwsRUFBUy9ULFdBQVksUUFBU2hELE1BQU1xRSxLQUFLckUsS0FBTWdFLEVBQVMsR0FBSTRJLEVBQVkxRyxRQUd0STZRLElBUVhyTixPQUFPUSxpQkFBaUIsT0FBUSxTQUFVNkIsR0FDdEMsR0FBSTJCLFNBQVNWLGNBQWMsYUFBYyxDQUNyQyxJQUFJaUwsRUFBZ0J2SyxTQUFTVixjQUFjLG1CQUN4Q2lMLEVBQWNDLFlBQWNELEVBQWMzSSxjQUN6QzJJLEVBQWNuSyxNQUFNcUssZUFBaUIsY0FHekMsSUFBSUMsRUFBVSxJQUFJclksTUFBTSxZQUFhLENBQ2pDRyxLQUFNLFdBQ05FLFFBQVMsRUFDVEMsUUFBUyxTQUVUa0IsWUFBYSxDQUNUOFcsSUFBTSxDQUNGalksUUFBUyxHQUVia1ksSUFBSyxDQUNEbFksUUFBUyxNQXNCckIsU0FBU21ZLElBQ0wsSUFBSXRXLEVBQWN5TCxTQUFTVixjQUFjLG1DQUNyQ3dMLEVBQU92VyxFQUFZd1csdUJBQXVCekwsY0FBYyxzQkFDeEQwTCxFQUFTelcsRUFBWStLLGNBQWMsc0JBQ25DMkwsRUFBTzFXLEVBQVkyVyxtQkFBbUI1TCxjQUFjLHNCQUV4RDZMLEVBQU9MLEdBQ1BLLEVBQU9ILEdBQ1BHLEVBQU9GLEdBR1gsU0FBU0UsRUFBUXZMLEdBRUssVUFERkEsRUFBTWdJLGFBQWEsb0JBRS9CaEksRUFBTStILGFBQWEsTUFBTy9ILEVBQU1nSSxhQUFhLGFBQzdDaEksRUFBTStILGFBQWEsaUJBQWtCLFNBaEM3QytDLEVBQVE3UyxHQUFHLGNBQWUsV0FDdEJnVCxNQUdKSCxFQUFRN1MsR0FBRyxhQUFjLFdBQ3JCZ1QsTUFHSkgsRUFBUTdTLEdBQUcsWUFBYSxXQUNwQixJQUFJdVQsR0FBb0JwTCxTQUFTVixjQUFjLDBCQUEwQnNJLGFBQWEsa0JBQWtCcEksTUFBTSxHQUM5RzdLLFFBQVEwVyxJQUFJRCxHQUNaLElBQUlFLEVBQVksSUFBTUYsRUFDdEJiLEVBQWNnQixXQUFhRCxHQUFhZixFQUFjM0ksWUFBWSxFQUFJLE1BRzFFOEksRUFBUTNSIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogR2xpZGUuanMgdjMuNC4xXHJcbiAqIChjKSAyMDEzLTIwMTkgSsSZZHJ6ZWogQ2hhxYJ1YmVrIDxqZWRyemVqLmNoYWx1YmVrQGdtYWlsLmNvbT4gKGh0dHA6Ly9qZWRyemVqY2hhbHViZWsuY29tLylcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbC5HbGlkZSA9IGZhY3RvcnkoKSk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAvKipcclxuICAgICAqIFR5cGUgb2YgdGhlIG1vdmVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEF2YWlsYWJsZSB0eXBlczpcclxuICAgICAqIGBzbGlkZXJgIC0gUmV3aW5kcyBzbGlkZXIgdG8gdGhlIHN0YXJ0L2VuZCB3aGVuIGl0IHJlYWNoZXMgdGhlIGZpcnN0IG9yIGxhc3Qgc2xpZGUuXHJcbiAgICAgKiBgY2Fyb3VzZWxgIC0gQ2hhbmdlcyBzbGlkZXMgd2l0aG91dCBzdGFydGluZyBvdmVyIHdoZW4gaXQgcmVhY2hlcyB0aGUgZmlyc3Qgb3IgbGFzdCBzbGlkZS5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICB0eXBlOiAnc2xpZGVyJyxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0IGF0IHNwZWNpZmljIHNsaWRlIG51bWJlciBkZWZpbmVkIHdpdGggemVyby1iYXNlZCBpbmRleC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBzdGFydEF0OiAwLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBudW1iZXIgb2Ygc2xpZGVzIHZpc2libGUgb24gdGhlIHNpbmdsZSB2aWV3cG9ydC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBwZXJWaWV3OiAxLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9jdXMgY3VycmVudGx5IGFjdGl2ZSBzbGlkZSBhdCBhIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgdHJhY2suXHJcbiAgICAgKlxyXG4gICAgICogQXZhaWxhYmxlIGlucHV0czpcclxuICAgICAqIGBjZW50ZXJgIC0gQ3VycmVudCBzbGlkZSB3aWxsIGJlIGFsd2F5cyBmb2N1c2VkIGF0IHRoZSBjZW50ZXIgb2YgYSB0cmFjay5cclxuICAgICAqIGAwLDEsMiwzLi4uYCAtIEN1cnJlbnQgc2xpZGUgd2lsbCBiZSBmb2N1c2VkIG9uIHRoZSBzcGVjaWZpZWQgemVyby1iYXNlZCBpbmRleC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfE51bWJlcn1cclxuICAgICAqL1xyXG4gICAgZm9jdXNBdDogMCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgc2l6ZSBvZiB0aGUgZ2FwIGFkZGVkIGJldHdlZW4gc2xpZGVzLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGdhcDogMTAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFuZ2Ugc2xpZGVzIGFmdGVyIGEgc3BlY2lmaWVkIGludGVydmFsLiBVc2UgYGZhbHNlYCBmb3IgdHVybmluZyBvZmYgYXV0b3BsYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge051bWJlcnxCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBhdXRvcGxheTogZmFsc2UsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIGF1dG9wbGF5IG9uIG1vdXNlb3ZlciBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaG92ZXJwYXVzZTogdHJ1ZSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbG93IGZvciBjaGFuZ2luZyBzbGlkZXMgd2l0aCBsZWZ0IGFuZCByaWdodCBrZXlib2FyZCBhcnJvd3MuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGtleWJvYXJkOiB0cnVlLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcCBydW5uaW5nIGBwZXJWaWV3YCBudW1iZXIgb2Ygc2xpZGVzIGZyb20gdGhlIGVuZC4gVXNlIHRoaXNcclxuICAgICAqIG9wdGlvbiBpZiB5b3UgZG9uJ3Qgd2FudCB0byBoYXZlIGFuIGVtcHR5IHNwYWNlIGFmdGVyXHJcbiAgICAgKiBhIHNsaWRlci4gV29ya3Mgb25seSB3aXRoIGBzbGlkZXJgIHR5cGUgYW5kIGFcclxuICAgICAqIG5vbi1jZW50ZXJlZCBgZm9jdXNBdGAgc2V0dGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgYm91bmQ6IGZhbHNlLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWluaW1hbCBzd2lwZSBkaXN0YW5jZSBuZWVkZWQgdG8gY2hhbmdlIHRoZSBzbGlkZS4gVXNlIGBmYWxzZWAgZm9yIHR1cm5pbmcgb2ZmIGEgc3dpcGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHN3aXBlVGhyZXNob2xkOiA4MCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1pbmltYWwgbW91c2UgZHJhZyBkaXN0YW5jZSBuZWVkZWQgdG8gY2hhbmdlIHRoZSBzbGlkZS4gVXNlIGBmYWxzZWAgZm9yIHR1cm5pbmcgb2ZmIGEgZHJhZ2dpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge051bWJlcnxCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBkcmFnVGhyZXNob2xkOiAxMjAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIG1heGltdW0gbnVtYmVyIG9mIHNsaWRlcyB0byB3aGljaCBtb3ZlbWVudCB3aWxsIGJlIG1hZGUgb24gc3dpcGluZyBvciBkcmFnZ2luZy4gVXNlIGBmYWxzZWAgZm9yIHVubGltaXRlZC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfEJvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHBlclRvdWNoOiBmYWxzZSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vdmluZyBkaXN0YW5jZSByYXRpbyBvZiB0aGUgc2xpZGVzIG9uIGEgc3dpcGluZyBhbmQgZHJhZ2dpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgdG91Y2hSYXRpbzogMC41LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW5nbGUgcmVxdWlyZWQgdG8gYWN0aXZhdGUgc2xpZGVzIG1vdmluZyBvbiBzd2lwaW5nIG9yIGRyYWdnaW5nLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRvdWNoQW5nbGU6IDQ1LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDQwMCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyBsb29waW5nIHRoZSBgc2xpZGVyYCB0eXBlLiBTbGlkZXIgd2lsbCByZXdpbmQgdG8gdGhlIGZpcnN0L2xhc3Qgc2xpZGUgd2hlbiBpdCdzIGF0IHRoZSBzdGFydC9lbmQuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHJld2luZDogdHJ1ZSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIER1cmF0aW9uIG9mIHRoZSByZXdpbmRpbmcgYW5pbWF0aW9uIG9mIHRoZSBgc2xpZGVyYCB0eXBlIGluIG1pbGxpc2Vjb25kcy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICByZXdpbmREdXJhdGlvbjogODAwLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgYW5pbWF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGFuaW1hdGlvblRpbWluZ0Z1bmM6ICdjdWJpYy1iZXppZXIoLjE2NSwgLjg0MCwgLjQ0MCwgMSknLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhyb3R0bGUgY29zdGx5IGV2ZW50cyBhdCBtb3N0IG9uY2UgcGVyIGV2ZXJ5IHdhaXQgbWlsbGlzZWNvbmRzLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRocm90dGxlOiAxMCxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vdmluZyBkaXJlY3Rpb24gbW9kZS5cclxuICAgICAqXHJcbiAgICAgKiBBdmFpbGFibGUgaW5wdXRzOlxyXG4gICAgICogLSAnbHRyJyAtIGxlZnQgdG8gcmlnaHQgbW92ZW1lbnQsXHJcbiAgICAgKiAtICdydGwnIC0gcmlnaHQgdG8gbGVmdCBtb3ZlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBkaXJlY3Rpb246ICdsdHInLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRpc3RhbmNlIHZhbHVlIG9mIHRoZSBuZXh0IGFuZCBwcmV2aW91cyB2aWV3cG9ydHMgd2hpY2hcclxuICAgICAqIGhhdmUgdG8gcGVlayBpbiB0aGUgY3VycmVudCB2aWV3LiBBY2NlcHRzIG51bWJlciBhbmRcclxuICAgICAqIHBpeGVscyBhcyBhIHN0cmluZy4gTGVmdCBhbmQgcmlnaHQgcGVla2luZyBjYW4gYmVcclxuICAgICAqIHNldCB1cCBzZXBhcmF0ZWx5IHdpdGggYSBkaXJlY3Rpb25zIG9iamVjdC5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZTpcclxuICAgICAqIGAxMDBgIC0gUGVlayAxMDBweCBvbiB0aGUgYm90aCBzaWRlcy5cclxuICAgICAqIHsgYmVmb3JlOiAxMDAsIGFmdGVyOiA1MCB9YCAtIFBlZWsgMTAwcHggb24gdGhlIGxlZnQgc2lkZSBhbmQgNTBweCBvbiB0aGUgcmlnaHQgc2lkZS5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfFN0cmluZ3xPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHBlZWs6IDAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xsZWN0aW9uIG9mIG9wdGlvbnMgYXBwbGllZCBhdCBzcGVjaWZpZWQgbWVkaWEgYnJlYWtwb2ludHMuXHJcbiAgICAgKiBGb3IgZXhhbXBsZTogZGlzcGxheSB0d28gc2xpZGVzIHBlciB2aWV3IHVuZGVyIDgwMHB4LlxyXG4gICAgICogYHtcclxuICAgICAqICAgJzgwMHB4Jzoge1xyXG4gICAgICogICAgIHBlclZpZXc6IDJcclxuICAgICAqICAgfVxyXG4gICAgICogfWBcclxuICAgICAqL1xyXG4gICAgYnJlYWtwb2ludHM6IHt9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdGlvbiBvZiBpbnRlcm5hbGx5IHVzZWQgSFRNTCBjbGFzc2VzLlxyXG4gICAgICpcclxuICAgICAqIEB0b2RvIFJlZmFjdG9yIGBzbGlkZXJgIGFuZCBgY2Fyb3VzZWxgIHByb3BlcnRpZXMgdG8gc2luZ2xlIGB0eXBlOiB7IHNsaWRlcjogJycsIGNhcm91c2VsOiAnJyB9YCBvYmplY3RcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGNsYXNzZXM6IHtcclxuICAgICAgZGlyZWN0aW9uOiB7XHJcbiAgICAgICAgbHRyOiAnZ2xpZGUtLWx0cicsXHJcbiAgICAgICAgcnRsOiAnZ2xpZGUtLXJ0bCdcclxuICAgICAgfSxcclxuICAgICAgc2xpZGVyOiAnZ2xpZGUtLXNsaWRlcicsXHJcbiAgICAgIGNhcm91c2VsOiAnZ2xpZGUtLWNhcm91c2VsJyxcclxuICAgICAgc3dpcGVhYmxlOiAnZ2xpZGUtLXN3aXBlYWJsZScsXHJcbiAgICAgIGRyYWdnaW5nOiAnZ2xpZGUtLWRyYWdnaW5nJyxcclxuICAgICAgY2xvbmVTbGlkZTogJ2dsaWRlX19zbGlkZS0tY2xvbmUnLFxyXG4gICAgICBhY3RpdmVOYXY6ICdnbGlkZV9fYnVsbGV0LS1hY3RpdmUnLFxyXG4gICAgICBhY3RpdmVTbGlkZTogJ2dsaWRlX19zbGlkZS0tYWN0aXZlJyxcclxuICAgICAgZGlzYWJsZWRBcnJvdzogJ2dsaWRlX19hcnJvdy0tZGlzYWJsZWQnXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogT3V0cHV0cyB3YXJuaW5nIG1lc3NhZ2UgdG8gdGhlIGJvd3NlciBjb25zb2xlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7U3RyaW5nfSBtc2dcclxuICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHdhcm4obXNnKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiW0dsaWRlIHdhcm5dOiBcIiArIG1zZyk7XHJcbiAgfVxyXG5cclxuICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XHJcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xyXG4gIH07XHJcblxyXG4gIHZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcclxuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xyXG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xyXG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcclxuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gICAgfTtcclxuICB9KCk7XHJcblxyXG4gIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcclxuXHJcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xyXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcclxuICAgIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHByb3BlcnR5KTtcclxuXHJcbiAgICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcclxuXHJcbiAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XHJcbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0O1xyXG5cclxuICAgICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcclxuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XHJcbiAgICAgIGNvbnN0cnVjdG9yOiB7XHJcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcclxuICB9O1xyXG5cclxuICB2YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XHJcbiAgICBpZiAoIXNlbGYpIHtcclxuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIHZhbHVlIGVudGVyZWQgYXMgbnVtYmVyXHJcbiAgICogb3Igc3RyaW5nIHRvIGludGVnZXIgdmFsdWUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcclxuICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHRvSW50KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgdmFsdWUgZW50ZXJlZCBhcyBudW1iZXJcclxuICAgKiBvciBzdHJpbmcgdG8gZmxhdCB2YWx1ZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAgeyp9ICAgdmFsdWVcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gb2JqZWN0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7Kn0gdmFsdWVcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqXHJcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmVcclxuICAgKi9cclxuICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcclxuXHJcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIXZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1peGVkLW9wZXJhdG9yc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG51bWJlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAgeyp9IHZhbHVlXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgKi9cclxuICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGEgZnVuY3Rpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgdW5kZWZpbmVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7Kn0gdmFsdWVcclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gYXJyYXkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHsqfSB2YWx1ZVxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIHNwZWNpZmllZCBjb2xsZWN0aW9uIG9mIGV4dGVuc2lvbnMuXHJcbiAgICogRWFjaCBleHRlbnNpb24gcmVjZWl2ZXMgYWNjZXNzIHRvIGluc3RhbmNlIG9mIGdsaWRlIGFuZCByZXN0IG9mIGNvbXBvbmVudHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZ2xpZGVcclxuICAgKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5zaW9uc1xyXG4gICAqXHJcbiAgICogQHJldHVybnMge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBtb3VudChnbGlkZSwgZXh0ZW5zaW9ucywgZXZlbnRzKSB7XHJcbiAgICB2YXIgY29tcG9uZW50cyA9IHt9O1xyXG5cclxuICAgIGZvciAodmFyIG5hbWUgaW4gZXh0ZW5zaW9ucykge1xyXG4gICAgICBpZiAoaXNGdW5jdGlvbihleHRlbnNpb25zW25hbWVdKSkge1xyXG4gICAgICAgIGNvbXBvbmVudHNbbmFtZV0gPSBleHRlbnNpb25zW25hbWVdKGdsaWRlLCBjb21wb25lbnRzLCBldmVudHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdhcm4oJ0V4dGVuc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIF9uYW1lIGluIGNvbXBvbmVudHMpIHtcclxuICAgICAgaWYgKGlzRnVuY3Rpb24oY29tcG9uZW50c1tfbmFtZV0ubW91bnQpKSB7XHJcbiAgICAgICAgY29tcG9uZW50c1tfbmFtZV0ubW91bnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb21wb25lbnRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVmaW5lcyBnZXR0ZXIgYW5kIHNldHRlciBwcm9wZXJ0eSBvbiB0aGUgc3BlY2lmaWVkIG9iamVjdC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gb2JqICAgICAgICAgT2JqZWN0IHdoZXJlIHByb3BlcnR5IGhhcyB0byBiZSBkZWZpbmVkLlxyXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcHJvcCAgICAgICAgTmFtZSBvZiB0aGUgZGVmaW5lZCBwcm9wZXJ0eS5cclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRlZmluaXRpb24gIEdldCBhbmQgc2V0IGRlZmluaXRpb25zIGZvciB0aGUgcHJvcGVydHkuXHJcbiAgICogQHJldHVybiB7Vm9pZH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBwcm9wLCBkZWZpbml0aW9uKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZWZpbml0aW9uKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvcnRzIGFwaGFiZXRpY2FsbHkgb2JqZWN0IGtleXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9ialxyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBzb3J0S2V5cyhvYmopIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHIsIGspIHtcclxuICAgICAgcltrXSA9IG9ialtrXTtcclxuXHJcbiAgICAgIHJldHVybiByW2tdLCByO1xyXG4gICAgfSwge30pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWVyZ2VzIHBhc3NlZCBzZXR0aW5ncyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wdGlvbnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGRlZmF1bHRzXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBzZXR0aW5nc1xyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHNldHRpbmdzKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cywgc2V0dGluZ3MpO1xyXG5cclxuICAgIC8vIGBPYmplY3QuYXNzaWduYCBkbyBub3QgZGVlcGx5IG1lcmdlIG9iamVjdHMsIHNvIHdlXHJcbiAgICAvLyBoYXZlIHRvIGRvIGl0IG1hbnVhbGx5IGZvciBldmVyeSBuZXN0ZWQgb2JqZWN0XHJcbiAgICAvLyBpbiBvcHRpb25zLiBBbHRob3VnaCBpdCBkb2VzIG5vdCBsb29rIHNtYXJ0LFxyXG4gICAgLy8gaXQncyBzbWFsbGVyIGFuZCBmYXN0ZXIgdGhhbiBzb21lIGZhbmN5XHJcbiAgICAvLyBtZXJnaW5nIGRlZXAtbWVyZ2UgYWxnb3JpdGhtIHNjcmlwdC5cclxuICAgIGlmIChzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgnY2xhc3NlcycpKSB7XHJcbiAgICAgIG9wdGlvbnMuY2xhc3NlcyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cy5jbGFzc2VzLCBzZXR0aW5ncy5jbGFzc2VzKTtcclxuXHJcbiAgICAgIGlmIChzZXR0aW5ncy5jbGFzc2VzLmhhc093blByb3BlcnR5KCdkaXJlY3Rpb24nKSkge1xyXG4gICAgICAgIG9wdGlvbnMuY2xhc3Nlcy5kaXJlY3Rpb24gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMuY2xhc3Nlcy5kaXJlY3Rpb24sIHNldHRpbmdzLmNsYXNzZXMuZGlyZWN0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgnYnJlYWtwb2ludHMnKSkge1xyXG4gICAgICBvcHRpb25zLmJyZWFrcG9pbnRzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLmJyZWFrcG9pbnRzLCBzZXR0aW5ncy5icmVha3BvaW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICB2YXIgRXZlbnRzQnVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgYSBFdmVudEJ1cyBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50c0J1cygpIHtcclxuICAgICAgdmFyIGV2ZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XHJcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50c0J1cyk7XHJcblxyXG4gICAgICB0aGlzLmV2ZW50cyA9IGV2ZW50cztcclxuICAgICAgdGhpcy5ob3AgPSBldmVudHMuaGFzT3duUHJvcGVydHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGxpc3RlbmVyIHRvIHRoZSBzcGVjaWZlZCBldmVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZXZlbnRcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICBjcmVhdGVDbGFzcyhFdmVudHNCdXMsIFt7XHJcbiAgICAgIGtleTogJ29uJyxcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZXZlbnQpKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMub24oZXZlbnRbaV0sIGhhbmRsZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBldmVudCdzIG9iamVjdCBpZiBub3QgeWV0IGNyZWF0ZWRcclxuICAgICAgICBpZiAoIXRoaXMuaG9wLmNhbGwodGhpcy5ldmVudHMsIGV2ZW50KSkge1xyXG4gICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGhhbmRsZXIgdG8gcXVldWVcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChoYW5kbGVyKSAtIDE7XHJcblxyXG4gICAgICAgIC8vIFByb3ZpZGUgaGFuZGxlIGJhY2sgZm9yIHJlbW92YWwgb2YgZXZlbnRcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV2ZW50c1tldmVudF1baW5kZXhdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSdW5zIHJlZ2lzdGVyZWQgaGFuZGxlcnMgZm9yIHNwZWNpZmllZCBldmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGV2ZW50XHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dFxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2VtaXQnLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChldmVudCwgY29udGV4dCkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGV2ZW50KSkge1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoZXZlbnRbaV0sIGNvbnRleHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGRvZXNuJ3QgZXhpc3QsIG9yIHRoZXJlJ3Mgbm8gaGFuZGxlcnMgaW4gcXVldWUsIGp1c3QgbGVhdmVcclxuICAgICAgICBpZiAoIXRoaXMuaG9wLmNhbGwodGhpcy5ldmVudHMsIGV2ZW50KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3ljbGUgdGhyb3VnaCBldmVudHMgcXVldWUsIGZpcmUhXHJcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgIGl0ZW0oY29udGV4dCB8fCB7fSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1dKTtcclxuICAgIHJldHVybiBFdmVudHNCdXM7XHJcbiAgfSgpO1xyXG5cclxuICB2YXIgR2xpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBnbGlkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gR2xpZGUoc2VsZWN0b3IpIHtcclxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xyXG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBHbGlkZSk7XHJcblxyXG4gICAgICB0aGlzLl9jID0ge307XHJcbiAgICAgIHRoaXMuX3QgPSBbXTtcclxuICAgICAgdGhpcy5fZSA9IG5ldyBFdmVudHNCdXMoKTtcclxuXHJcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG4gICAgICB0aGlzLnNldHRpbmdzID0gbWVyZ2VPcHRpb25zKGRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgICAgdGhpcy5pbmRleCA9IHRoaXMuc2V0dGluZ3Muc3RhcnRBdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIGdsaWRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBleHRlbnNpb25zIENvbGxlY3Rpb24gb2YgZXh0ZW5zaW9ucyB0byBpbml0aWFsaXplLlxyXG4gICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgY3JlYXRlQ2xhc3MoR2xpZGUsIFt7XHJcbiAgICAgIGtleTogJ21vdW50JyxcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50JCQxKCkge1xyXG4gICAgICAgIHZhciBleHRlbnNpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5fZS5lbWl0KCdtb3VudC5iZWZvcmUnKTtcclxuXHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGV4dGVuc2lvbnMpKSB7XHJcbiAgICAgICAgICB0aGlzLl9jID0gbW91bnQodGhpcywgZXh0ZW5zaW9ucywgdGhpcy5fZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdhcm4oJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBvYmplY3Qgb24gYG1vdW50KClgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lLmVtaXQoJ21vdW50LmFmdGVyJyk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ29sbGVjdHMgYW4gaW5zdGFuY2UgYHRyYW5zbGF0ZWAgdHJhbnNmb3JtZXJzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtBcnJheX0gdHJhbnNmb3JtZXJzIENvbGxlY3Rpb24gb2YgdHJhbnNmb3JtZXJzLlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ211dGF0ZScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtdXRhdGUoKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XHJcblxyXG4gICAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybWVycykpIHtcclxuICAgICAgICAgIHRoaXMuX3QgPSB0cmFuc2Zvcm1lcnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdhcm4oJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBhcnJheSBvbiBgbXV0YXRlKClgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFVwZGF0ZXMgZ2xpZGUgd2l0aCBzcGVjaWZpZWQgc2V0dGluZ3MuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzZXR0aW5nc1xyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6ICd1cGRhdGUnLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XHJcblxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBtZXJnZU9wdGlvbnModGhpcy5zZXR0aW5ncywgc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoJ3N0YXJ0QXQnKSkge1xyXG4gICAgICAgICAgdGhpcy5pbmRleCA9IHNldHRpbmdzLnN0YXJ0QXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lLmVtaXQoJ3VwZGF0ZScpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENoYW5nZSBzbGlkZSB3aXRoIHNwZWNpZmllZCBwYXR0ZXJuLiBBIHBhdHRlcm4gbXVzdCBiZSBpbiB0aGUgc3BlY2lhbCBmb3JtYXQ6XHJcbiAgICAgICAqIGA+YCAtIE1vdmUgb25lIGZvcndhcmRcclxuICAgICAgICogYDxgIC0gTW92ZSBvbmUgYmFja3dhcmRcclxuICAgICAgICogYD17aX1gIC0gR28gdG8ge2l9IHplcm8tYmFzZWQgc2xpZGUgKGVxLiAnPTEnLCB3aWxsIGdvIHRvIHNlY29uZCBzbGlkZSlcclxuICAgICAgICogYD4+YCAtIFJld2luZHMgdG8gZW5kIChsYXN0IHNsaWRlKVxyXG4gICAgICAgKiBgPDxgIC0gUmV3aW5kcyB0byBzdGFydCAoZmlyc3Qgc2xpZGUpXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2dvJyxcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdvKHBhdHRlcm4pIHtcclxuICAgICAgICB0aGlzLl9jLlJ1bi5tYWtlKHBhdHRlcm4pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1vdmUgdHJhY2sgYnkgc3BlY2lmaWVkIGRpc3RhbmNlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlzdGFuY2VcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiAnbW92ZScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlKGRpc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5fYy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcclxuICAgICAgICB0aGlzLl9jLk1vdmUubWFrZShkaXN0YW5jZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRGVzdHJveSBpbnN0YW5jZSBhbmQgcmV2ZXJ0IGFsbCBjaGFuZ2VzIGRvbmUgYnkgdGhpcy5fYy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiAnZGVzdHJveScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2UuZW1pdCgnZGVzdHJveScpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFN0YXJ0IGluc3RhbmNlIGF1dG9wbGF5aW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0Jvb2xlYW58TnVtYmVyfSBpbnRlcnZhbCBSdW4gYXV0b3BsYXlpbmcgd2l0aCBwYXNzZWQgaW50ZXJ2YWwgcmVnYXJkbGVzcyBvZiBgYXV0b3BsYXlgIHNldHRpbmdzXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ3BsYXknLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcclxuICAgICAgICB2YXIgaW50ZXJ2YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoaW50ZXJ2YWwpIHtcclxuICAgICAgICAgIHRoaXMuc2V0dGluZ3MuYXV0b3BsYXkgPSBpbnRlcnZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2UuZW1pdCgncGxheScpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFN0b3AgaW5zdGFuY2UgYXV0b3BsYXlpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ3BhdXNlJyxcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuX2UuZW1pdCgncGF1c2UnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGdsaWRlIGludG8gYSBpZGxlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7R2xpZGV9XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIHtcclxuICAgICAga2V5OiAnZGlzYWJsZScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgZ2xpZGUgaW50byBhIGFjdGl2ZSBzdGF0dXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0dsaWRlfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2VuYWJsZScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkZHMgY3V1dG9tIGV2ZW50IGxpc3RlbmVyIHdpdGggaGFuZGxlci5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7U3RyaW5nfEFycmF5fSBldmVudFxyXG4gICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlclxyXG4gICAgICAgKiBAcmV0dXJuIHtHbGlkZX1cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6ICdvbicsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2Uub24oZXZlbnQsIGhhbmRsZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENoZWNrcyBpZiBnbGlkZSBpcyBhIHByZWNpc2VkIHR5cGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZVxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2lzVHlwZScsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1R5cGUobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnR5cGUgPT09IG5hbWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIHRoZSBjb3JlIG9wdGlvbnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6ICdzZXR0aW5ncycsXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0JCQxKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgY29yZSBvcHRpb25zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9cclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgICxcclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEobykge1xyXG4gICAgICAgIGlmIChpc09iamVjdChvKSkge1xyXG4gICAgICAgICAgdGhpcy5fbyA9IG87XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdhcm4oJ09wdGlvbnMgbXVzdCBiZSBhbiBgb2JqZWN0YCBpbnN0YW5jZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIGN1cnJlbnQgaW5kZXggb2YgdGhlIHNsaWRlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2luZGV4JyxcclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2k7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGN1cnJlbnQgaW5kZXggYSBzbGlkZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcbiAgICAgICxcclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEoaSkge1xyXG4gICAgICAgIHRoaXMuX2kgPSB0b0ludChpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdHlwZSBuYW1lIG9mIHRoZSBzbGlkZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgICAgICovXHJcblxyXG4gICAgfSwge1xyXG4gICAgICBrZXk6ICd0eXBlJyxcclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MudHlwZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGlkbGUgc3RhdHVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2Rpc2FibGVkJyxcclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIHZhbHVlIG9mIHRoZSBpZGxlIHN0YXR1cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXHJcbiAgICAgICxcclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQkJDEoc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy5fZCA9ICEhc3RhdHVzO1xyXG4gICAgICB9XHJcbiAgICB9XSk7XHJcbiAgICByZXR1cm4gR2xpZGU7XHJcbiAgfSgpO1xyXG5cclxuICBmdW5jdGlvbiBSdW4gKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIHZhciBSdW4gPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhdXRvcnVubmluZyBvZiB0aGUgZ2xpZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5fbyA9IGZhbHNlO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBNYWtlcyBnbGlkZXMgcnVubmluZyBiYXNlZCBvbiB0aGUgcGFzc2VkIG1vdmluZyBzY2hlbWEuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtb3ZlXHJcbiAgICAgICAqL1xyXG4gICAgICBtYWtlOiBmdW5jdGlvbiBtYWtlKG1vdmUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoIUdsaWRlLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICBHbGlkZS5kaXNhYmxlKCk7XHJcblxyXG4gICAgICAgICAgdGhpcy5tb3ZlID0gbW92ZTtcclxuXHJcbiAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLmJlZm9yZScsIHRoaXMubW92ZSk7XHJcblxyXG4gICAgICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcclxuXHJcbiAgICAgICAgICBFdmVudHMuZW1pdCgncnVuJywgdGhpcy5tb3ZlKTtcclxuXHJcbiAgICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNTdGFydCgpKSB7XHJcbiAgICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3J1bi5zdGFydCcsIF90aGlzLm1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXNFbmQoKSkge1xyXG4gICAgICAgICAgICAgIEV2ZW50cy5lbWl0KCdydW4uZW5kJywgX3RoaXMubW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5pc09mZnNldCgnPCcpIHx8IF90aGlzLmlzT2Zmc2V0KCc+JykpIHtcclxuICAgICAgICAgICAgICBfdGhpcy5fbyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLm9mZnNldCcsIF90aGlzLm1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBFdmVudHMuZW1pdCgncnVuLmFmdGVyJywgX3RoaXMubW92ZSk7XHJcblxyXG4gICAgICAgICAgICBHbGlkZS5lbmFibGUoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ2FsY3VsYXRlcyBjdXJyZW50IGluZGV4IGJhc2VkIG9uIGRlZmluZWQgbW92ZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGNhbGN1bGF0ZTogZnVuY3Rpb24gY2FsY3VsYXRlKCkge1xyXG4gICAgICAgIHZhciBtb3ZlID0gdGhpcy5tb3ZlLFxyXG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcclxuICAgICAgICB2YXIgc3RlcHMgPSBtb3ZlLnN0ZXBzLFxyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBtb3ZlLmRpcmVjdGlvbjtcclxuXHJcblxyXG4gICAgICAgIHZhciBjb3VudGFibGVTdGVwcyA9IGlzTnVtYmVyKHRvSW50KHN0ZXBzKSkgJiYgdG9JbnQoc3RlcHMpICE9PSAwO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgY2FzZSAnPic6XHJcbiAgICAgICAgICAgIGlmIChzdGVwcyA9PT0gJz4nKSB7XHJcbiAgICAgICAgICAgICAgR2xpZGUuaW5kZXggPSBsZW5ndGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0VuZCgpKSB7XHJcbiAgICAgICAgICAgICAgaWYgKCEoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiAhR2xpZGUuc2V0dGluZ3MucmV3aW5kKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgR2xpZGUuaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudGFibGVTdGVwcykge1xyXG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ICs9IE1hdGgubWluKGxlbmd0aCAtIEdsaWRlLmluZGV4LCAtdG9JbnQoc3RlcHMpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBHbGlkZS5pbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJzwnOlxyXG4gICAgICAgICAgICBpZiAoc3RlcHMgPT09ICc8Jykge1xyXG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU3RhcnQoKSkge1xyXG4gICAgICAgICAgICAgIGlmICghKEdsaWRlLmlzVHlwZSgnc2xpZGVyJykgJiYgIUdsaWRlLnNldHRpbmdzLnJld2luZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX28gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gbGVuZ3RoO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb3VudGFibGVTdGVwcykge1xyXG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4IC09IE1hdGgubWluKEdsaWRlLmluZGV4LCB0b0ludChzdGVwcykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIEdsaWRlLmluZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnPSc6XHJcbiAgICAgICAgICAgIEdsaWRlLmluZGV4ID0gc3RlcHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgZGlyZWN0aW9uIHBhdHRlcm4gWycgKyBkaXJlY3Rpb24gKyBzdGVwcyArICddIGhhcyBiZWVuIHVzZWQnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG9uIHRoZSBmaXJzdCBzbGlkZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAgICovXHJcbiAgICAgIGlzU3RhcnQ6IGZ1bmN0aW9uIGlzU3RhcnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIEdsaWRlLmluZGV4ID09PSAwO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDaGVja3MgaWYgd2UgYXJlIG9uIHRoZSBsYXN0IHNsaWRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuICAgICAgaXNFbmQ6IGZ1bmN0aW9uIGlzRW5kKCkge1xyXG4gICAgICAgIHJldHVybiBHbGlkZS5pbmRleCA9PT0gdGhpcy5sZW5ndGg7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENoZWNrcyBpZiB3ZSBhcmUgbWFraW5nIGEgb2Zmc2V0IHJ1bi5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvblxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuICAgICAgaXNPZmZzZXQ6IGZ1bmN0aW9uIGlzT2Zmc2V0KGRpcmVjdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vICYmIHRoaXMubW92ZS5kaXJlY3Rpb24gPT09IGRpcmVjdGlvbjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkZWZpbmUoUnVuLCAnbW92ZScsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIG1vdmUgc2NoZW1hLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIG1vdmUgc2NoZW1hLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICAgKi9cclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcclxuICAgICAgICB2YXIgc3RlcCA9IHZhbHVlLnN1YnN0cigxKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbSA9IHtcclxuICAgICAgICAgIGRpcmVjdGlvbjogdmFsdWUuc3Vic3RyKDAsIDEpLFxyXG4gICAgICAgICAgc3RlcHM6IHN0ZXAgPyB0b0ludChzdGVwKSA/IHRvSW50KHN0ZXApIDogc3RlcCA6IDBcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoUnVuLCAnbGVuZ3RoJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgcnVubmluZyBkaXN0YW5jZSBiYXNlZFxyXG4gICAgICAgKiBvbiB6ZXJvLWluZGV4aW5nIG51bWJlciBvZiBzbGlkZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xyXG4gICAgICAgIHZhciBsZW5ndGggPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGBib3VuZGAgb3B0aW9uIGlzIGFjaXR2ZSwgYSBtYXhpbXVtIHJ1bm5pbmcgZGlzdGFuY2Ugc2hvdWxkIGJlXHJcbiAgICAgICAgLy8gcmVkdWNlZCBieSBgcGVyVmlld2AgYW5kIGBmb2N1c0F0YCBzZXR0aW5ncy4gUnVubmluZyBkaXN0YW5jZVxyXG4gICAgICAgIC8vIHNob3VsZCBlbmQgYmVmb3JlIGNyZWF0aW5nIGFuIGVtcHR5IHNwYWNlIGFmdGVyIGluc3RhbmNlLlxyXG5cclxuICAgICAgICBpZiAoR2xpZGUuaXNUeXBlKCdzbGlkZXInKSAmJiBzZXR0aW5ncy5mb2N1c0F0ICE9PSAnY2VudGVyJyAmJiBzZXR0aW5ncy5ib3VuZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGxlbmd0aCAtIDEgLSAodG9JbnQoc2V0dGluZ3MucGVyVmlldykgLSAxKSArIHRvSW50KHNldHRpbmdzLmZvY3VzQXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxlbmd0aCAtIDE7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRlZmluZShSdW4sICdvZmZzZXQnLCB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHN0YXR1cyBvZiB0aGUgb2Zmc2V0dGluZyBmbGFnLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX287XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBSdW47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgY3VycmVudCB0aW1lLlxyXG4gICAqXHJcbiAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIG5vdygpIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgd2hlbiBpbnZva2VkLCB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkXHJcbiAgICogYXQgbW9zdCBvbmNlIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0XHJcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXHJcbiAgICogQHJldHVybiB7RnVuY3Rpb259XHJcbiAgICpcclxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcclxuICAgIHZhciB0aW1lb3V0ID0gdm9pZCAwLFxyXG4gICAgICAgIGNvbnRleHQgPSB2b2lkIDAsXHJcbiAgICAgICAgYXJncyA9IHZvaWQgMCxcclxuICAgICAgICByZXN1bHQgPSB2b2lkIDA7XHJcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xyXG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XHJcblxyXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XHJcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBub3coKTtcclxuICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdGhyb3R0bGVkID0gZnVuY3Rpb24gdGhyb3R0bGVkKCkge1xyXG4gICAgICB2YXIgYXQgPSBub3coKTtcclxuICAgICAgaWYgKCFwcmV2aW91cyAmJiBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlKSBwcmV2aW91cyA9IGF0O1xyXG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChhdCAtIHByZXZpb3VzKTtcclxuICAgICAgY29udGV4dCA9IHRoaXM7XHJcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XHJcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcmV2aW91cyA9IGF0O1xyXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XHJcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgb3B0aW9ucy50cmFpbGluZyAhPT0gZmFsc2UpIHtcclxuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aHJvdHRsZWQuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgIHByZXZpb3VzID0gMDtcclxuICAgICAgdGltZW91dCA9IGNvbnRleHQgPSBhcmdzID0gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRocm90dGxlZDtcclxuICB9XHJcblxyXG4gIHZhciBNQVJHSU5fVFlQRSA9IHtcclxuICAgIGx0cjogWydtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0J10sXHJcbiAgICBydGw6IFsnbWFyZ2luUmlnaHQnLCAnbWFyZ2luTGVmdCddXHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gR2FwcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xyXG4gICAgdmFyIEdhcHMgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBcHBsaWVzIGdhcHMgYmV0d2VlbiBzbGlkZXMuIEZpcnN0IGFuZCBsYXN0XHJcbiAgICAgICAqIHNsaWRlcyBkbyBub3QgcmVjZWl2ZSBpdCdzIGVkZ2UgbWFyZ2lucy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gc2xpZGVzXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkoc2xpZGVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgdmFyIHN0eWxlID0gc2xpZGVzW2ldLnN0eWxlO1xyXG4gICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IENvbXBvbmVudHMuRGlyZWN0aW9uLnZhbHVlO1xyXG5cclxuICAgICAgICAgIGlmIChpICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHN0eWxlW01BUkdJTl9UWVBFW2RpcmVjdGlvbl1bMF1dID0gdGhpcy52YWx1ZSAvIDIgKyAncHgnO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVswXV0gPSAnJztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoaSAhPT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgc3R5bGVbTUFSR0lOX1RZUEVbZGlyZWN0aW9uXVsxXV0gPSB0aGlzLnZhbHVlIC8gMiArICdweCc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdHlsZVtNQVJHSU5fVFlQRVtkaXJlY3Rpb25dWzFdXSA9ICcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlcyBnYXBzIGZyb20gdGhlIHNsaWRlcy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtIVE1MQ29sbGVjdGlvbn0gc2xpZGVzXHJcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxyXG4gICAgICAqL1xyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShzbGlkZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgc3R5bGUgPSBzbGlkZXNbaV0uc3R5bGU7XHJcblxyXG4gICAgICAgICAgc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xyXG4gICAgICAgICAgc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGVmaW5lKEdhcHMsICd2YWx1ZScsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIGdhcC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0b0ludChHbGlkZS5zZXR0aW5ncy5nYXApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoR2FwcywgJ2dyb3cnLCB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIGFkZGl0aW9uYWwgZGltZW50aW9ucyB2YWx1ZSBjYXVzZWQgYnkgZ2Fwcy5cclxuICAgICAgICogVXNlZCB0byBpbmNyZWFzZSB3aWR0aCBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcbiAgICAgICAqL1xyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gR2Fwcy52YWx1ZSAqIChDb21wb25lbnRzLlNpemVzLmxlbmd0aCAtIDEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoR2FwcywgJ3JlZHVjdG9yJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyByZWR1Y3Rpb24gdmFsdWUgY2F1c2VkIGJ5IGdhcHMuXHJcbiAgICAgICAqIFVzZWQgdG8gc3VidHJhY3Qgd2lkdGggb2YgdGhlIHNsaWRlcy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHZhciBwZXJWaWV3ID0gR2xpZGUuc2V0dGluZ3MucGVyVmlldztcclxuXHJcbiAgICAgICAgcmV0dXJuIEdhcHMudmFsdWUgKiAocGVyVmlldyAtIDEpIC8gcGVyVmlldztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBjYWxjdWxhdGVkIGdhcHM6XHJcbiAgICAgKiAtIGFmdGVyIGJ1aWxkaW5nLCBzbyBzbGlkZXMgKGluY2x1ZGluZyBjbG9uZXMpIHdpbGwgcmVjZWl2ZSBwcm9wZXIgbWFyZ2luc1xyXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJLCB0byByZWNhbGN1bGF0ZSBnYXBzIHdpdGggbmV3IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYWZ0ZXInLCAndXBkYXRlJ10sIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgR2Fwcy5hcHBseShDb21wb25lbnRzLkh0bWwud3JhcHBlci5jaGlsZHJlbik7XHJcbiAgICB9LCAzMCkpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGdhcHM6XHJcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0YWwgc3RhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBHYXBzLnJlbW92ZShDb21wb25lbnRzLkh0bWwud3JhcHBlci5jaGlsZHJlbik7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gR2FwcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbmRzIHNpYmxpbmdzIG5vZGVzIG9mIHRoZSBwYXNzZWQgbm9kZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge0VsZW1lbnR9IG5vZGVcclxuICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgKi9cclxuICBmdW5jdGlvbiBzaWJsaW5ncyhub2RlKSB7XHJcbiAgICBpZiAobm9kZSAmJiBub2RlLnBhcmVudE5vZGUpIHtcclxuICAgICAgdmFyIG4gPSBub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcclxuXHJcbiAgICAgIGZvciAoOyBuOyBuID0gbi5uZXh0U2libGluZykge1xyXG4gICAgICAgIGlmIChuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IG5vZGUpIHtcclxuICAgICAgICAgIG1hdGNoZWQucHVzaChuKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBtYXRjaGVkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiBwYXNzZWQgbm9kZSBleGlzdCBhbmQgaXMgYSB2YWxpZCBlbGVtZW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7RWxlbWVudH0gbm9kZVxyXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gZXhpc3Qobm9kZSkge1xyXG4gICAgaWYgKG5vZGUgJiYgbm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB2YXIgVFJBQ0tfU0VMRUNUT1IgPSAnW2RhdGEtZ2xpZGUtZWw9XCJ0cmFja1wiXSc7XHJcblxyXG4gIGZ1bmN0aW9uIEh0bWwgKEdsaWRlLCBDb21wb25lbnRzKSB7XHJcbiAgICB2YXIgSHRtbCA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHVwIHNsaWRlciBIVE1MIG5vZGVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0dsaWRlfSBnbGlkZVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucm9vdCA9IEdsaWRlLnNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMudHJhY2sgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihUUkFDS19TRUxFQ1RPUik7XHJcbiAgICAgICAgdGhpcy5zbGlkZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLndyYXBwZXIuY2hpbGRyZW4pLmZpbHRlcihmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgICAgIHJldHVybiAhc2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuY2xvbmVTbGlkZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGVmaW5lKEh0bWwsICdyb290Jywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBub2RlIG9mIHRoZSBnbGlkZSBtYWluIGVsZW1lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBIdG1sLl9yO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIG5vZGUgb2YgdGhlIGdsaWRlIG1haW4gZWxlbWVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocikge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhyKSkge1xyXG4gICAgICAgICAgciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iocik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXhpc3QocikpIHtcclxuICAgICAgICAgIEh0bWwuX3IgPSByO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB3YXJuKCdSb290IGVsZW1lbnQgbXVzdCBiZSBhIGV4aXN0aW5nIEh0bWwgbm9kZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZGVmaW5lKEh0bWwsICd0cmFjaycsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgbm9kZSBvZiB0aGUgZ2xpZGUgdHJhY2sgd2l0aCBzbGlkZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBIdG1sLl90O1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIG5vZGUgb2YgdGhlIGdsaWRlIHRyYWNrIHdpdGggc2xpZGVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgICAqL1xyXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0KSB7XHJcbiAgICAgICAgaWYgKGV4aXN0KHQpKSB7XHJcbiAgICAgICAgICBIdG1sLl90ID0gdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgd2FybignQ291bGQgbm90IGZpbmQgdHJhY2sgZWxlbWVudC4gUGxlYXNlIHVzZSAnICsgVFJBQ0tfU0VMRUNUT1IgKyAnIGF0dHJpYnV0ZS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRlZmluZShIdG1sLCAnd3JhcHBlcicsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgbm9kZSBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBIdG1sLnRyYWNrLmNoaWxkcmVuWzBdO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gSHRtbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFBlZWsgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIHZhciBQZWVrID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogU2V0dXBzIGhvdyBtdWNoIHRvIHBlZWsgYmFzZWQgb24gc2V0dGluZ3MuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IEdsaWRlLnNldHRpbmdzLnBlZWs7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGVmaW5lKFBlZWssICd2YWx1ZScsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgdmFsdWUgb2YgdGhlIHBlZWsuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ8T2JqZWN0fVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIFBlZWsuX3Y7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdGhlIHBlZWsuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWVcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgdmFsdWUuYmVmb3JlID0gdG9JbnQodmFsdWUuYmVmb3JlKTtcclxuICAgICAgICAgIHZhbHVlLmFmdGVyID0gdG9JbnQodmFsdWUuYWZ0ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFBlZWsuX3YgPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZGVmaW5lKFBlZWssICdyZWR1Y3RvcicsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgcmVkdWN0aW9uIHZhbHVlIGNhdXNlZCBieSBwZWVrLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gUGVlay52YWx1ZTtcclxuICAgICAgICB2YXIgcGVyVmlldyA9IEdsaWRlLnNldHRpbmdzLnBlclZpZXc7XHJcblxyXG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgIHJldHVybiB2YWx1ZS5iZWZvcmUgLyBwZXJWaWV3ICsgdmFsdWUuYWZ0ZXIgLyBwZXJWaWV3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICogMiAvIHBlclZpZXc7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVjYWxjdWxhdGUgcGVla2luZyBzaXplcyBvbjpcclxuICAgICAqIC0gd2hlbiByZXNpemluZyB3aW5kb3cgdG8gdXBkYXRlIHRvIHByb3BlciBwZXJjZW50c1xyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oWydyZXNpemUnLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgUGVlay5tb3VudCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFBlZWs7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNb3ZlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICB2YXIgTW92ZSA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnN0cnVjdHMgbW92ZSBjb21wb25lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuX28gPSAwO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDYWxjdWxhdGVzIGEgbW92ZW1lbnQgdmFsdWUgYmFzZWQgb24gcGFzc2VkIG9mZnNldCBhbmQgY3VycmVudGx5IGFjdGl2ZSBpbmRleC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBvZmZzZXRcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIG1ha2U6IGZ1bmN0aW9uIG1ha2UoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcclxuXHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcblxyXG4gICAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlJywge1xyXG4gICAgICAgICAgbW92ZW1lbnQ6IHRoaXMudmFsdWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmFmdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdtb3ZlLmFmdGVyJywge1xyXG4gICAgICAgICAgICBtb3ZlbWVudDogX3RoaXMudmFsdWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGRlZmluZShNb3ZlLCAnb2Zmc2V0Jywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBhbiBvZmZzZXQgdmFsdWUgdXNlZCB0byBtb2RpZnkgY3VycmVudCB0cmFuc2xhdGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBNb3ZlLl9vO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXRzIGFuIG9mZnNldCB2YWx1ZSB1c2VkIHRvIG1vZGlmeSBjdXJyZW50IHRyYW5zbGF0ZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAgICAgKi9cclxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcclxuICAgICAgICBNb3ZlLl9vID0gIWlzVW5kZWZpbmVkKHZhbHVlKSA/IHRvSW50KHZhbHVlKSA6IDA7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRlZmluZShNb3ZlLCAndHJhbnNsYXRlJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBhIHJhdyBtb3ZlbWVudCB2YWx1ZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudHMuU2l6ZXMuc2xpZGVXaWR0aCAqIEdsaWRlLmluZGV4O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoTW92ZSwgJ3ZhbHVlJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBhbiBhY3R1YWwgbW92ZW1lbnQgdmFsdWUgY29ycmVjdGVkIGJ5IG9mZnNldC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSB0aGlzLnRyYW5zbGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSArIG9mZnNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBvZmZzZXQ7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSBtb3ZlbWVudCB0byBwcm9wZXIgc2xpZGUgb246XHJcbiAgICAgKiAtIGJlZm9yZSBidWlsZCwgc28gZ2xpZGUgd2lsbCBzdGFydCBhdCBgc3RhcnRBdGAgaW5kZXhcclxuICAgICAqIC0gb24gZWFjaCBzdGFuZGFyZCBydW4gdG8gbW92ZSB0byBuZXdseSBjYWxjdWxhdGVkIGluZGV4XHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmJlZm9yZScsICdydW4nXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBNb3ZlLm1ha2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBNb3ZlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU2l6ZXMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIHZhciBTaXplcyA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHVwcyBkaW1lbnRpb25zIG9mIHNsaWRlcy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldHVwU2xpZGVzOiBmdW5jdGlvbiBzZXR1cFNsaWRlcygpIHtcclxuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLnNsaWRlV2lkdGggKyAncHgnO1xyXG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZXR1cHMgZGltZW50aW9ucyBvZiBzbGlkZXMgd3JhcHBlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldHVwV3JhcHBlcjogZnVuY3Rpb24gc2V0dXBXcmFwcGVyKGRpbWVudGlvbikge1xyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLndpZHRoID0gdGhpcy53cmFwcGVyU2l6ZSArICdweCc7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlbW92ZXMgYXBwbGllZCBzdHlsZXMgZnJvbSBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xyXG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGRlZmluZShTaXplcywgJ2xlbmd0aCcsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgY291bnQgbnVtYmVyIG9mIHRoZSBzbGlkZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBDb21wb25lbnRzLkh0bWwuc2xpZGVzLmxlbmd0aDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZGVmaW5lKFNpemVzLCAnd2lkdGgnLCB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHdpZHRoIHZhbHVlIG9mIHRoZSBnbGlkZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudHMuSHRtbC5yb290Lm9mZnNldFdpZHRoO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoU2l6ZXMsICd3cmFwcGVyU2l6ZScsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgc2l6ZSBvZiB0aGUgc2xpZGVzIHdyYXBwZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiBTaXplcy5zbGlkZVdpZHRoICogU2l6ZXMubGVuZ3RoICsgQ29tcG9uZW50cy5HYXBzLmdyb3cgKyBDb21wb25lbnRzLkNsb25lcy5ncm93O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBkZWZpbmUoU2l6ZXMsICdzbGlkZVdpZHRoJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyB3aWR0aCB2YWx1ZSBvZiB0aGUgc2luZ2xlIHNsaWRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgICAqL1xyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gU2l6ZXMud2lkdGggLyBHbGlkZS5zZXR0aW5ncy5wZXJWaWV3IC0gQ29tcG9uZW50cy5QZWVrLnJlZHVjdG9yIC0gQ29tcG9uZW50cy5HYXBzLnJlZHVjdG9yO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IGNhbGN1bGF0ZWQgZ2xpZGUncyBkaW1lbnNpb25zOlxyXG4gICAgICogLSBiZWZvcmUgYnVpbGRpbmcsIHNvIG90aGVyIGRpbWVudGlvbnMgKGUuZy4gdHJhbnNsYXRlKSB3aWxsIGJlIGNhbGN1bGF0ZWQgcHJvcGVydGx5XHJcbiAgICAgKiAtIHdoZW4gcmVzaXppbmcgd2luZG93IHRvIHJlY2FsY3VsYXRlIHNpbGRlcyBkaW1lbnNpb25zXHJcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHZpYSBBUEksIHRvIGNhbGN1bGF0ZSBkaW1lbnNpb25zIGJhc2VkIG9uIG5ldyBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbihbJ2J1aWxkLmJlZm9yZScsICdyZXNpemUnLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgU2l6ZXMuc2V0dXBTbGlkZXMoKTtcclxuICAgICAgU2l6ZXMuc2V0dXBXcmFwcGVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBjYWxjdWxhdGVkIGdsaWRlJ3MgZGltZW5zaW9uczpcclxuICAgICAqIC0gb24gZGVzdG90aW5nIHRvIGJyaW5nIG1hcmt1cCB0byBpdHMgaW5pdGFsIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgU2l6ZXMucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gU2l6ZXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBCdWlsZCAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xyXG4gICAgdmFyIEJ1aWxkID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogSW5pdCBnbGlkZSBidWlsZGluZy4gQWRkcyBjbGFzc2VzLCBzZXRzXHJcbiAgICAgICAqIGRpbWVuc2lvbnMgYW5kIHNldHVwcyBpbml0aWFsIHN0YXRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIEV2ZW50cy5lbWl0KCdidWlsZC5iZWZvcmUnKTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlQ2xhc3MoKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZUNsYXNzKCk7XHJcblxyXG4gICAgICAgIEV2ZW50cy5lbWl0KCdidWlsZC5hZnRlcicpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBZGRzIGB0eXBlYCBjbGFzcyB0byB0aGUgZ2xpZGUgZWxlbWVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHR5cGVDbGFzczogZnVuY3Rpb24gdHlwZUNsYXNzKCkge1xyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlc1tHbGlkZS5zZXR0aW5ncy50eXBlXSk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgc2xpZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBhY3RpdmVDbGFzczogZnVuY3Rpb24gYWN0aXZlQ2xhc3MoKSB7XHJcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBHbGlkZS5zZXR0aW5ncy5jbGFzc2VzO1xyXG4gICAgICAgIHZhciBzbGlkZSA9IENvbXBvbmVudHMuSHRtbC5zbGlkZXNbR2xpZGUuaW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5hY3RpdmVTbGlkZSk7XHJcblxyXG4gICAgICAgICAgc2libGluZ3Moc2xpZGUpLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcclxuICAgICAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmVzIEhUTUwgY2xhc3NlcyBhcHBsaWVkIGF0IGJ1aWxkaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgcmVtb3ZlQ2xhc3NlczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcclxuICAgICAgICB2YXIgY2xhc3NlcyA9IEdsaWRlLnNldHRpbmdzLmNsYXNzZXM7XHJcblxyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3Nlc1tHbGlkZS5zZXR0aW5ncy50eXBlXSk7XHJcblxyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC5zbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2libGluZykge1xyXG4gICAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuYWN0aXZlU2xpZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXIgYnVpbGRpbmcgY2xhc3NlczpcclxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBIVE1MIHRvIGl0cyBpbml0aWFsIHN0YXRlXHJcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlbW92ZSBjbGFzc2VzIGJlZm9yZSByZW1vdW50aW5nIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oWydkZXN0cm95JywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEJ1aWxkLnJlbW92ZUNsYXNzZXMoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3VudCBjb21wb25lbnQ6XHJcbiAgICAgKiAtIG9uIHJlc2l6aW5nIG9mIHRoZSB3aW5kb3cgdG8gY2FsY3VsYXRlIG5ldyBkaW1lbnRpb25zXHJcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHNldHRpbmdzIHZpYSBBUElcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsncmVzaXplJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEJ1aWxkLm1vdW50KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3YXAgYWN0aXZlIGNsYXNzIG9mIGN1cnJlbnQgc2xpZGU6XHJcbiAgICAgKiAtIGFmdGVyIGVhY2ggbW92ZSB0byB0aGUgbmV3IGluZGV4XHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignbW92ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgQnVpbGQuYWN0aXZlQ2xhc3MoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBCdWlsZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIENsb25lcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xyXG4gICAgdmFyIENsb25lcyA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZSBwYXR0ZXJuIG1hcCBhbmQgY29sbGVjdCBzbGlkZXMgdG8gYmUgY2xvbmVkLlxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSkge1xyXG4gICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuY29sbGVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ29sbGVjdCBjbG9uZXMgd2l0aCBwYXR0ZXJuLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgY29sbGVjdDogZnVuY3Rpb24gY29sbGVjdCgpIHtcclxuICAgICAgICB2YXIgaXRlbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xyXG4gICAgICAgIHZhciBzbGlkZXMgPSBDb21wb25lbnRzLkh0bWwuc2xpZGVzO1xyXG4gICAgICAgIHZhciBfR2xpZGUkc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncyxcclxuICAgICAgICAgICAgcGVyVmlldyA9IF9HbGlkZSRzZXR0aW5ncy5wZXJWaWV3LFxyXG4gICAgICAgICAgICBjbGFzc2VzID0gX0dsaWRlJHNldHRpbmdzLmNsYXNzZXM7XHJcblxyXG5cclxuICAgICAgICB2YXIgcGVla0luY3JlbWVudGVyID0gKyEhR2xpZGUuc2V0dGluZ3MucGVlaztcclxuICAgICAgICB2YXIgcGFydCA9IHBlclZpZXcgKyBwZWVrSW5jcmVtZW50ZXI7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gc2xpZGVzLnNsaWNlKDAsIHBhcnQpO1xyXG4gICAgICAgIHZhciBlbmQgPSBzbGlkZXMuc2xpY2UoLXBhcnQpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocGVyVmlldyAvIHNsaWRlcy5sZW5ndGgpKTsgcisrKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjbG9uZSA9IHN0YXJ0W2ldLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGNsb25lLmNsYXNzTGlzdC5hZGQoY2xhc3Nlcy5jbG9uZVNsaWRlKTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goY2xvbmUpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBlbmQubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfY2xvbmUgPSBlbmRbX2ldLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIF9jbG9uZS5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuY2xvbmVTbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBpdGVtcy51bnNoaWZ0KF9jbG9uZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFwcGVuZCBjbG9uZWQgc2xpZGVzIHdpdGggZ2VuZXJhdGVkIHBhdHRlcm4uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZCgpIHtcclxuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xyXG4gICAgICAgIHZhciBfQ29tcG9uZW50cyRIdG1sID0gQ29tcG9uZW50cy5IdG1sLFxyXG4gICAgICAgICAgICB3cmFwcGVyID0gX0NvbXBvbmVudHMkSHRtbC53cmFwcGVyLFxyXG4gICAgICAgICAgICBzbGlkZXMgPSBfQ29tcG9uZW50cyRIdG1sLnNsaWRlcztcclxuXHJcblxyXG4gICAgICAgIHZhciBoYWxmID0gTWF0aC5mbG9vcihpdGVtcy5sZW5ndGggLyAyKTtcclxuICAgICAgICB2YXIgcHJlcGVuZCA9IGl0ZW1zLnNsaWNlKDAsIGhhbGYpLnJldmVyc2UoKTtcclxuICAgICAgICB2YXIgYXBwZW5kID0gaXRlbXMuc2xpY2UoaGFsZiwgaXRlbXMubGVuZ3RoKTtcclxuICAgICAgICB2YXIgd2lkdGggPSBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGggKyAncHgnO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFwcGVuZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChhcHBlbmRbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgcHJlcGVuZC5sZW5ndGg7IF9pMisrKSB7XHJcbiAgICAgICAgICB3cmFwcGVyLmluc2VydEJlZm9yZShwcmVwZW5kW19pMl0sIHNsaWRlc1swXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBpdGVtcy5sZW5ndGg7IF9pMysrKSB7XHJcbiAgICAgICAgICBpdGVtc1tfaTNdLnN0eWxlLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmUgYWxsIGNsb25lZCBzbGlkZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLml0ZW1zO1xyXG5cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIucmVtb3ZlQ2hpbGQoaXRlbXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkZWZpbmUoQ2xvbmVzLCAnZ3JvdycsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgYWRkaXRpb25hbCBkaW1lbnRpb25zIHZhbHVlIGNhdXNlZCBieSBjbG9uZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiAoQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoICsgQ29tcG9uZW50cy5HYXBzLnZhbHVlKSAqIENsb25lcy5pdGVtcy5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kIGFkZGl0aW9uYWwgc2xpZGUncyBjbG9uZXM6XHJcbiAgICAgKiAtIHdoaWxlIGdsaWRlJ3MgdHlwZSBpcyBgY2Fyb3VzZWxgXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBDbG9uZXMucmVtb3ZlKCk7XHJcbiAgICAgIENsb25lcy5tb3VudCgpO1xyXG4gICAgICBDbG9uZXMuYXBwZW5kKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGVuZCBhZGRpdGlvbmFsIHNsaWRlJ3MgY2xvbmVzOlxyXG4gICAgICogLSB3aGlsZSBnbGlkZSdzIHR5cGUgaXMgYGNhcm91c2VsYFxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ2J1aWxkLmJlZm9yZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSkge1xyXG4gICAgICAgIENsb25lcy5hcHBlbmQoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgY2xvbmVzIEhUTUxFbGVtZW50czpcclxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gYnJpbmcgSFRNTCB0byBpdHMgaW5pdGlhbCBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIENsb25lcy5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBDbG9uZXM7XHJcbiAgfVxyXG5cclxuICB2YXIgRXZlbnRzQmluZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgYSBFdmVudHNCaW5kZXIgaW5zdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50c0JpbmRlcigpIHtcclxuICAgICAgdmFyIGxpc3RlbmVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XHJcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50c0JpbmRlcik7XHJcblxyXG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgZXZlbnRzIGxpc3RlbmVycyB0byBhcnJvd3MgSFRNTCBlbGVtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXl9IGV2ZW50c1xyXG4gICAgICogQHBhcmFtICB7RWxlbWVudHxXaW5kb3d8RG9jdW1lbnR9IGVsXHJcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2xvc3VyZVxyXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbnxPYmplY3R9IGNhcHR1cmVcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgY3JlYXRlQ2xhc3MoRXZlbnRzQmluZGVyLCBbe1xyXG4gICAgICBrZXk6ICdvbicsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudHMsIGVsLCBjbG9zdXJlKSB7XHJcbiAgICAgICAgdmFyIGNhcHR1cmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoaXNTdHJpbmcoZXZlbnRzKSkge1xyXG4gICAgICAgICAgZXZlbnRzID0gW2V2ZW50c107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRzW2ldXSA9IGNsb3N1cmU7XHJcblxyXG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudHNbaV0sIHRoaXMubGlzdGVuZXJzW2V2ZW50c1tpXV0sIGNhcHR1cmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYXJyb3dzIEhUTUwgZWxlbWVudHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge1N0cmluZ3xBcnJheX0gZXZlbnRzXHJcbiAgICAgICAqIEBwYXJhbSAge0VsZW1lbnR8V2luZG93fERvY3VtZW50fSBlbFxyXG4gICAgICAgKiBAcGFyYW0gIHtCb29sZWFufE9iamVjdH0gY2FwdHVyZVxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ29mZicsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnRzLCBlbCkge1xyXG4gICAgICAgIHZhciBjYXB0dXJlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50cykpIHtcclxuICAgICAgICAgIGV2ZW50cyA9IFtldmVudHNdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCB0aGlzLmxpc3RlbmVyc1tldmVudHNbaV1dLCBjYXB0dXJlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXN0cm95IGNvbGxlY3RlZCBsaXN0ZW5lcnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHtWb2lkfVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9LCB7XHJcbiAgICAgIGtleTogJ2Rlc3Ryb3knLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5lcnM7XHJcbiAgICAgIH1cclxuICAgIH1dKTtcclxuICAgIHJldHVybiBFdmVudHNCaW5kZXI7XHJcbiAgfSgpO1xyXG5cclxuICBmdW5jdGlvbiBSZXNpemUgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxyXG4gICAgICovXHJcbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xyXG5cclxuICAgIHZhciBSZXNpemUgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyB3aW5kb3cgYmluZGluZ3MuXHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kKCk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEJpbmRzIGByZXpzaXplYCBsaXN0ZW5lciB0byB0aGUgd2luZG93LlxyXG4gICAgICAgKiBJdCdzIGEgY29zdGx5IGV2ZW50LCBzbyB3ZSBhcmUgZGVib3VuY2luZyBpdC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XHJcbiAgICAgICAgQmluZGVyLm9uKCdyZXNpemUnLCB3aW5kb3csIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIEV2ZW50cy5lbWl0KCdyZXNpemUnKTtcclxuICAgICAgICB9LCBHbGlkZS5zZXR0aW5ncy50aHJvdHRsZSkpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIHRoZSB3aW5kb3cuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcclxuICAgICAgICBCaW5kZXIub2ZmKCdyZXNpemUnLCB3aW5kb3cpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20gd2luZG93OlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byByZW1vdmUgYWRkZWQgRXZlbnRMaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFJlc2l6ZS51bmJpbmQoKTtcclxuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBSZXNpemU7XHJcbiAgfVxyXG5cclxuICB2YXIgVkFMSURfRElSRUNUSU9OUyA9IFsnbHRyJywgJ3J0bCddO1xyXG4gIHZhciBGTElQRURfTU9WRU1FTlRTID0ge1xyXG4gICAgJz4nOiAnPCcsXHJcbiAgICAnPCc6ICc+JyxcclxuICAgICc9JzogJz0nXHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gRGlyZWN0aW9uIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICB2YXIgRGlyZWN0aW9uID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogU2V0dXBzIGdhcCB2YWx1ZSBiYXNlZCBvbiBzZXR0aW5ncy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIG1vdW50OiBmdW5jdGlvbiBtb3VudCgpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gR2xpZGUuc2V0dGluZ3MuZGlyZWN0aW9uO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXNvbHZlcyBwYXR0ZXJuIGJhc2VkIG9uIGRpcmVjdGlvbiB2YWx1ZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVyblxyXG4gICAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICAgKi9cclxuICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShwYXR0ZXJuKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gcGF0dGVybi5zbGljZSgwLCAxKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXMoJ3J0bCcpKSB7XHJcbiAgICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCh0b2tlbikuam9pbihGTElQRURfTU9WRU1FTlRTW3Rva2VuXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGF0dGVybjtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ2hlY2tzIHZhbHVlIG9mIGRpcmVjdGlvbiBtb2RlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uXHJcbiAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuICAgICAgaXM6IGZ1bmN0aW9uIGlzKGRpcmVjdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBkaXJlY3Rpb247XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFwcGxpZXMgZGlyZWN0aW9uIGNsYXNzIHRvIHRoZSByb290IEhUTUwgZWxlbWVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcygpIHtcclxuICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKEdsaWRlLnNldHRpbmdzLmNsYXNzZXMuZGlyZWN0aW9uW3RoaXMudmFsdWVdKTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlcyBkaXJlY3Rpb24gY2xhc3MgZnJvbSB0aGUgcm9vdCBIVE1MIGVsZW1lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoKSB7XHJcbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmRpcmVjdGlvblt0aGlzLnZhbHVlXSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGVmaW5lKERpcmVjdGlvbiwgJ3ZhbHVlJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIERpcmVjdGlvbi5fdjtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0aGUgZGlyZWN0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKFZBTElEX0RJUkVDVElPTlMuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xyXG4gICAgICAgICAgRGlyZWN0aW9uLl92ID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdhcm4oJ0RpcmVjdGlvbiB2YWx1ZSBtdXN0IGJlIGBsdHJgIG9yIGBydGxgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENsZWFyIGRpcmVjdGlvbiBjbGFzczpcclxuICAgICAqIC0gb24gZGVzdHJveSB0byBicmluZyBIVE1MIHRvIGl0cyBpbml0aWFsIHN0YXRlXHJcbiAgICAgKiAtIG9uIHVwZGF0ZSB0byByZW1vdmUgY2xhc3MgYmVmb3JlIHJlYXBwbGluZyBiZWxsb3dcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBEaXJlY3Rpb24ucmVtb3ZlQ2xhc3MoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3VudCBjb21wb25lbnQ6XHJcbiAgICAgKiAtIG9uIHVwZGF0ZSB0byByZWZsZWN0IGNoYW5nZXMgaW4gZGlyZWN0aW9uIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBEaXJlY3Rpb24ubW91bnQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgZGlyZWN0aW9uIGNsYXNzOlxyXG4gICAgICogLSBiZWZvcmUgYnVpbGRpbmcgdG8gYXBwbHkgY2xhc3MgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlYXBwbHkgZGlyZWN0aW9uIGNsYXNzIHRoYXQgbWF5IGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3VwZGF0ZSddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIERpcmVjdGlvbi5hZGRDbGFzcygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIERpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZmxlY3RzIHZhbHVlIG9mIGdsaWRlIG1vdmVtZW50LlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBSdGwgKEdsaWRlLCBDb21wb25lbnRzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvKipcclxuICAgICAgICogTmVnYXRlcyB0aGUgcGFzc2VkIHRyYW5zbGF0ZSBpZiBnbGlkZSBpcyBpbiBSVEwgb3B0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxyXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcclxuICAgICAgICBpZiAoQ29tcG9uZW50cy5EaXJlY3Rpb24uaXMoJ3J0bCcpKSB7XHJcbiAgICAgICAgICByZXR1cm4gLXRyYW5zbGF0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggYSBgZ2FwYCBzZXR0aW5ncy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gR2FwIChHbGlkZSwgQ29tcG9uZW50cykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1vZGlmaWVzIHBhc3NlZCB0cmFuc2xhdGUgdmFsdWUgd2l0aCBudW1iZXIgaW4gdGhlIGBnYXBgIHNldHRpbmdzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRyYW5zbGF0ZVxyXG4gICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb2RpZnk6IGZ1bmN0aW9uIG1vZGlmeSh0cmFuc2xhdGUpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlICsgQ29tcG9uZW50cy5HYXBzLnZhbHVlICogR2xpZGUuaW5kZXg7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggd2lkdGggb2YgYWRkaXRpb25hbCBjbG9uZXMgd2lkdGguXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXHJcbiAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIEdyb3cgKEdsaWRlLCBDb21wb25lbnRzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvKipcclxuICAgICAgICogQWRkcyB0byB0aGUgcGFzc2VkIHRyYW5zbGF0ZSB3aWR0aCBvZiB0aGUgaGFsZiBvZiBjbG9uZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGUgKyBDb21wb25lbnRzLkNsb25lcy5ncm93IC8gMjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZXMgZ2xpZGUgbW92ZW1lbnQgd2l0aCBhIGBwZWVrYCBzZXR0aW5ncy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gR2xpZGVcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IENvbXBvbmVudHNcclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICovXHJcbiAgZnVuY3Rpb24gUGVla2luZyAoR2xpZGUsIENvbXBvbmVudHMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBNb2RpZmllcyBwYXNzZWQgdHJhbnNsYXRlIHZhbHVlIHdpdGggYSBgcGVla2Agc2V0dGluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB0cmFuc2xhdGVcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgbW9kaWZ5OiBmdW5jdGlvbiBtb2RpZnkodHJhbnNsYXRlKSB7XHJcbiAgICAgICAgaWYgKEdsaWRlLnNldHRpbmdzLmZvY3VzQXQgPj0gMCkge1xyXG4gICAgICAgICAgdmFyIHBlZWsgPSBDb21wb25lbnRzLlBlZWsudmFsdWU7XHJcblxyXG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHBlZWspKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGUgLSBwZWVrLmJlZm9yZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gcGVlaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGVzIGdsaWRlIG1vdmVtZW50IHdpdGggYSBgZm9jdXNBdGAgc2V0dGluZ3MuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9IEdsaWRlXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBDb21wb25lbnRzXHJcbiAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIEZvY3VzaW5nIChHbGlkZSwgQ29tcG9uZW50cykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1vZGlmaWVzIHBhc3NlZCB0cmFuc2xhdGUgdmFsdWUgd2l0aCBpbmRleCBpbiB0aGUgYGZvY3VzQXRgIHNldHRpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIG1vZGlmeTogZnVuY3Rpb24gbW9kaWZ5KHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciBnYXAgPSBDb21wb25lbnRzLkdhcHMudmFsdWU7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gQ29tcG9uZW50cy5TaXplcy53aWR0aDtcclxuICAgICAgICB2YXIgZm9jdXNBdCA9IEdsaWRlLnNldHRpbmdzLmZvY3VzQXQ7XHJcbiAgICAgICAgdmFyIHNsaWRlV2lkdGggPSBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGg7XHJcblxyXG4gICAgICAgIGlmIChmb2N1c0F0ID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZSAtICh3aWR0aCAvIDIgLSBzbGlkZVdpZHRoIC8gMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlIC0gc2xpZGVXaWR0aCAqIGZvY3VzQXQgLSBnYXAgKiBmb2N1c0F0O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbGllcyBkaWZmcmVudCB0cmFuc2Zvcm1lcnMgb24gdHJhbnNsYXRlIHZhbHVlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBHbGlkZVxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gQ29tcG9uZW50c1xyXG4gICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBtdXRhdG9yIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlIGluc3RhbmNlIHRyYW5zZm9ybWVycyB3aXRoIGNvbGxlY3Rpb24gb2YgZGVmYXVsdCB0cmFuc2Zvcm1lcnMuXHJcbiAgICAgKiBJdCdzIGltcG9ydGFudCB0aGF0IHRoZSBSdGwgY29tcG9uZW50IGJlIGxhc3Qgb24gdGhlIGxpc3QsXHJcbiAgICAgKiBzbyBpdCByZWZsZWN0cyBhbGwgcHJldmlvdXMgdHJhbnNmb3JtYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgdmFyIFRSQU5TRk9STUVSUyA9IFtHYXAsIEdyb3csIFBlZWtpbmcsIEZvY3VzaW5nXS5jb25jYXQoR2xpZGUuX3QsIFtSdGxdKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvKipcclxuICAgICAgICogUGlwbGluZXMgdHJhbnNsYXRlIHZhbHVlIHdpdGggcmVnaXN0ZXJlZCB0cmFuc2Zvcm1lcnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdHJhbnNsYXRlXHJcbiAgICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAgICovXHJcbiAgICAgIG11dGF0ZTogZnVuY3Rpb24gbXV0YXRlKHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgVFJBTlNGT1JNRVJTLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSBUUkFOU0ZPUk1FUlNbaV07XHJcblxyXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odHJhbnNmb3JtZXIpICYmIGlzRnVuY3Rpb24odHJhbnNmb3JtZXIoKS5tb2RpZnkpKSB7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IHRyYW5zZm9ybWVyKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpLm1vZGlmeSh0cmFuc2xhdGUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2FybignVHJhbnNmb3JtZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGBtb2RpZnkoKWAgbWV0aG9kJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gVHJhbnNsYXRlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICB2YXIgVHJhbnNsYXRlID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogU2V0cyB2YWx1ZSBvZiB0cmFuc2xhdGUgb24gSFRNTCBlbGVtZW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IG11dGF0b3IoR2xpZGUsIENvbXBvbmVudHMpLm11dGF0ZSh2YWx1ZSk7XHJcblxyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgLTEgKiB0cmFuc2Zvcm0gKyAncHgsIDBweCwgMHB4KSc7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlbW92ZXMgdmFsdWUgb2YgdHJhbnNsYXRlIGZyb20gSFRNTCBlbGVtZW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICAgICAgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gJyc7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbmV3IHRyYW5zbGF0ZSB2YWx1ZTpcclxuICAgICAqIC0gb24gbW92ZSB0byByZWZsZWN0IGluZGV4IGNoYW5nZVxyXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJIHRvIHJlZmxlY3QgcG9zc2libGUgY2hhbmdlcyBpbiBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignbW92ZScsIGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgIHZhciBnYXAgPSBDb21wb25lbnRzLkdhcHMudmFsdWU7XHJcbiAgICAgIHZhciBsZW5ndGggPSBDb21wb25lbnRzLlNpemVzLmxlbmd0aDtcclxuICAgICAgdmFyIHdpZHRoID0gQ29tcG9uZW50cy5TaXplcy5zbGlkZVdpZHRoO1xyXG5cclxuICAgICAgaWYgKEdsaWRlLmlzVHlwZSgnY2Fyb3VzZWwnKSAmJiBDb21wb25lbnRzLlJ1bi5pc09mZnNldCgnPCcpKSB7XHJcbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmFmdGVyKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIEV2ZW50cy5lbWl0KCd0cmFuc2xhdGUuanVtcCcpO1xyXG5cclxuICAgICAgICAgIFRyYW5zbGF0ZS5zZXQod2lkdGggKiAobGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gVHJhbnNsYXRlLnNldCgtd2lkdGggLSBnYXAgKiBsZW5ndGgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoR2xpZGUuaXNUeXBlKCdjYXJvdXNlbCcpICYmIENvbXBvbmVudHMuUnVuLmlzT2Zmc2V0KCc+JykpIHtcclxuICAgICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3RyYW5zbGF0ZS5qdW1wJyk7XHJcblxyXG4gICAgICAgICAgVHJhbnNsYXRlLnNldCgwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFRyYW5zbGF0ZS5zZXQod2lkdGggKiBsZW5ndGggKyBnYXAgKiBsZW5ndGgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gVHJhbnNsYXRlLnNldChjb250ZXh0Lm1vdmVtZW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHRyYW5zbGF0ZTpcclxuICAgICAqIC0gb24gZGVzdHJveWluZyB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRhbCBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFRyYW5zbGF0ZS5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBUcmFuc2xhdGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBUcmFuc2l0aW9uIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIGluYWN0aXZpdHkgc3RhdHVzIG9mIHRyYW5zaXRpb24uXHJcbiAgICAgKiBXaGVuIHRydWUgdHJhbnNpdGlvbiBpcyBub3QgYXBwbGllZC5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdmFyIGRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgdmFyIFRyYW5zaXRpb24gPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb21wb3NlcyBzdHJpbmcgb2YgdGhlIENTUyB0cmFuc2l0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcclxuICAgICAgICogQHJldHVybiB7U3RyaW5nfVxyXG4gICAgICAgKi9cclxuICAgICAgY29tcG9zZTogZnVuY3Rpb24gY29tcG9zZShwcm9wZXJ0eSkge1xyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IEdsaWRlLnNldHRpbmdzO1xyXG5cclxuICAgICAgICBpZiAoIWRpc2FibGVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gcHJvcGVydHkgKyAnICcgKyB0aGlzLmR1cmF0aW9uICsgJ21zICcgKyBzZXR0aW5ncy5hbmltYXRpb25UaW1pbmdGdW5jO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5ICsgJyAwbXMgJyArIHNldHRpbmdzLmFuaW1hdGlvblRpbWluZ0Z1bmM7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgdmFsdWUgb2YgdHJhbnNpdGlvbiBvbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gcHJvcGVydHlcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xyXG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3RyYW5zZm9ybSc7XHJcblxyXG4gICAgICAgIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnN0eWxlLnRyYW5zaXRpb24gPSB0aGlzLmNvbXBvc2UocHJvcGVydHkpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmVzIHZhbHVlIG9mIHRyYW5zaXRpb24gZnJvbSBIVE1MIGVsZW1lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICBDb21wb25lbnRzLkh0bWwud3JhcHBlci5zdHlsZS50cmFuc2l0aW9uID0gJyc7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJ1bnMgY2FsbGJhY2sgYWZ0ZXIgYW5pbWF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGFmdGVyOiBmdW5jdGlvbiBhZnRlcihjYWxsYmFjaykge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9LCB0aGlzLmR1cmF0aW9uKTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRW5hYmxlIHRyYW5zaXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuICAgICAgICBkaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLnNldCgpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEaXNhYmxlIHRyYW5zaXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xyXG4gICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBkZWZpbmUoVHJhbnNpdGlvbiwgJ2R1cmF0aW9uJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBiYXNlZFxyXG4gICAgICAgKiBvbiBjdXJyZW50bHkgcnVubmluZyBhbmltYXRpb24gdHlwZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIGlmIChHbGlkZS5pc1R5cGUoJ3NsaWRlcicpICYmIENvbXBvbmVudHMuUnVuLm9mZnNldCkge1xyXG4gICAgICAgICAgcmV0dXJuIHNldHRpbmdzLnJld2luZER1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLmFuaW1hdGlvbkR1cmF0aW9uO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0cmFuc2l0aW9uIGBzdHlsZWAgdmFsdWU6XHJcbiAgICAgKiAtIG9uIGVhY2ggbW92aW5nLCBiZWNhdXNlIGl0IG1heSBiZSBjbGVhcmVkIGJ5IG9mZnNldCBtb3ZlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignbW92ZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHJhbnNpdGlvbi5zZXQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzYWJsZSB0cmFuc2l0aW9uOlxyXG4gICAgICogLSBiZWZvcmUgaW5pdGlhbCBidWlsZCB0byBhdm9pZCB0cmFuc2l0aW9uaW5nIGZyb20gYDBgIHRvIGBzdGFydEF0YCBpbmRleFxyXG4gICAgICogLSB3aGlsZSByZXNpemluZyB3aW5kb3cgYW5kIHJlY2FsY3VsYXRpbmcgZGltZW50aW9uc1xyXG4gICAgICogLSBvbiBqdW1waW5nIGZyb20gb2Zmc2V0IHRyYW5zaXRpb24gYXQgc3RhcnQgYW5kIGVuZCBlZGdlcyBpbiBgY2Fyb3VzZWxgIHR5cGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsnYnVpbGQuYmVmb3JlJywgJ3Jlc2l6ZScsICd0cmFuc2xhdGUuanVtcCddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFRyYW5zaXRpb24uZGlzYWJsZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUgdHJhbnNpdGlvbjpcclxuICAgICAqIC0gb24gZWFjaCBydW5uaW5nLCBiZWNhdXNlIGl0IG1heSBiZSBkaXNhYmxlZCBieSBvZmZzZXQgbW92ZVxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ3J1bicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHJhbnNpdGlvbi5lbmFibGUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHRyYW5zaXRpb246XHJcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gYnJpbmcgbWFya3VwIHRvIGl0cyBpbml0YWwgc3RhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBUcmFuc2l0aW9uLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFRyYW5zaXRpb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZXN0IHZpYSBhIGdldHRlciBpbiB0aGUgb3B0aW9ucyBvYmplY3QgdG8gc2VlXHJcbiAgICogaWYgdGhlIHBhc3NpdmUgcHJvcGVydHkgaXMgYWNjZXNzZWQuXHJcbiAgICpcclxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kI2ZlYXR1cmUtZGV0ZWN0aW9uXHJcbiAgICovXHJcblxyXG4gIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlJywgbnVsbCwgb3B0cyk7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmUnLCBudWxsLCBvcHRzKTtcclxuICB9IGNhdGNoIChlKSB7fVxyXG5cclxuICB2YXIgc3VwcG9ydHNQYXNzaXZlJDEgPSBzdXBwb3J0c1Bhc3NpdmU7XHJcblxyXG4gIHZhciBTVEFSVF9FVkVOVFMgPSBbJ3RvdWNoc3RhcnQnLCAnbW91c2Vkb3duJ107XHJcbiAgdmFyIE1PVkVfRVZFTlRTID0gWyd0b3VjaG1vdmUnLCAnbW91c2Vtb3ZlJ107XHJcbiAgdmFyIEVORF9FVkVOVFMgPSBbJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJywgJ21vdXNldXAnLCAnbW91c2VsZWF2ZSddO1xyXG4gIHZhciBNT1VTRV9FVkVOVFMgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdtb3VzZWxlYXZlJ107XHJcblxyXG4gIGZ1bmN0aW9uIFN3aXBlIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cclxuICAgICAqL1xyXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcclxuXHJcbiAgICB2YXIgc3dpcGVTaW4gPSAwO1xyXG4gICAgdmFyIHN3aXBlU3RhcnRYID0gMDtcclxuICAgIHZhciBzd2lwZVN0YXJ0WSA9IDA7XHJcbiAgICB2YXIgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIHZhciBjYXB0dXJlID0gc3VwcG9ydHNQYXNzaXZlJDEgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xyXG5cclxuICAgIHZhciBTd2lwZSA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEluaXRpYWxpemVzIHN3aXBlIGJpbmRpbmdzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuYmluZFN3aXBlU3RhcnQoKTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogSGFuZGxlciBmb3IgYHN3aXBlc3RhcnRgIGV2ZW50LiBDYWxjdWxhdGVzIGVudHJ5IHBvaW50cyBvZiB0aGUgdXNlcidzIHRhcC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIWRpc2FibGVkICYmICFHbGlkZS5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgdGhpcy5kaXNhYmxlKCk7XHJcblxyXG4gICAgICAgICAgdmFyIHN3aXBlID0gdGhpcy50b3VjaGVzKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICBzd2lwZVNpbiA9IG51bGw7XHJcbiAgICAgICAgICBzd2lwZVN0YXJ0WCA9IHRvSW50KHN3aXBlLnBhZ2VYKTtcclxuICAgICAgICAgIHN3aXBlU3RhcnRZID0gdG9JbnQoc3dpcGUucGFnZVkpO1xyXG5cclxuICAgICAgICAgIHRoaXMuYmluZFN3aXBlTW92ZSgpO1xyXG4gICAgICAgICAgdGhpcy5iaW5kU3dpcGVFbmQoKTtcclxuXHJcbiAgICAgICAgICBFdmVudHMuZW1pdCgnc3dpcGUuc3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEhhbmRsZXIgZm9yIGBzd2lwZW1vdmVgIGV2ZW50LiBDYWxjdWxhdGVzIHVzZXIncyB0YXAgYW5nbGUgYW5kIGRpc3RhbmNlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcclxuICAgICAgICovXHJcbiAgICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIUdsaWRlLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICB2YXIgX0dsaWRlJHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgdG91Y2hBbmdsZSA9IF9HbGlkZSRzZXR0aW5ncy50b3VjaEFuZ2xlLFxyXG4gICAgICAgICAgICAgIHRvdWNoUmF0aW8gPSBfR2xpZGUkc2V0dGluZ3MudG91Y2hSYXRpbyxcclxuICAgICAgICAgICAgICBjbGFzc2VzID0gX0dsaWRlJHNldHRpbmdzLmNsYXNzZXM7XHJcblxyXG5cclxuICAgICAgICAgIHZhciBzd2lwZSA9IHRoaXMudG91Y2hlcyhldmVudCk7XHJcblxyXG4gICAgICAgICAgdmFyIHN1YkV4U3ggPSB0b0ludChzd2lwZS5wYWdlWCkgLSBzd2lwZVN0YXJ0WDtcclxuICAgICAgICAgIHZhciBzdWJFeVN5ID0gdG9JbnQoc3dpcGUucGFnZVkpIC0gc3dpcGVTdGFydFk7XHJcbiAgICAgICAgICB2YXIgcG93RVggPSBNYXRoLmFicyhzdWJFeFN4IDw8IDIpO1xyXG4gICAgICAgICAgdmFyIHBvd0VZID0gTWF0aC5hYnMoc3ViRXlTeSA8PCAyKTtcclxuICAgICAgICAgIHZhciBzd2lwZUh5cG90ZW51c2UgPSBNYXRoLnNxcnQocG93RVggKyBwb3dFWSk7XHJcbiAgICAgICAgICB2YXIgc3dpcGVDYXRoZXR1cyA9IE1hdGguc3FydChwb3dFWSk7XHJcblxyXG4gICAgICAgICAgc3dpcGVTaW4gPSBNYXRoLmFzaW4oc3dpcGVDYXRoZXR1cyAvIHN3aXBlSHlwb3RlbnVzZSk7XHJcblxyXG4gICAgICAgICAgaWYgKHN3aXBlU2luICogMTgwIC8gTWF0aC5QSSA8IHRvdWNoQW5nbGUpIHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICBDb21wb25lbnRzLk1vdmUubWFrZShzdWJFeFN4ICogdG9GbG9hdCh0b3VjaFJhdGlvKSk7XHJcblxyXG4gICAgICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzZXMuZHJhZ2dpbmcpO1xyXG5cclxuICAgICAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLm1vdmUnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEhhbmRsZXIgZm9yIGBzd2lwZWVuZGAgZXZlbnQuIEZpbml0aWFsaXplcyB1c2VyJ3MgdGFwIGFuZCBkZWNpZGVzIGFib3V0IGdsaWRlIG1vdmUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIUdsaWRlLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgICB2YXIgc3dpcGUgPSB0aGlzLnRvdWNoZXMoZXZlbnQpO1xyXG4gICAgICAgICAgdmFyIHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICB2YXIgc3dpcGVEaXN0YW5jZSA9IHN3aXBlLnBhZ2VYIC0gc3dpcGVTdGFydFg7XHJcbiAgICAgICAgICB2YXIgc3dpcGVEZWcgPSBzd2lwZVNpbiAqIDE4MCAvIE1hdGguUEk7XHJcbiAgICAgICAgICB2YXIgc3RlcHMgPSBNYXRoLnJvdW5kKHN3aXBlRGlzdGFuY2UgLyBDb21wb25lbnRzLlNpemVzLnNsaWRlV2lkdGgpO1xyXG5cclxuICAgICAgICAgIHRoaXMuZW5hYmxlKCk7XHJcblxyXG4gICAgICAgICAgaWYgKHN3aXBlRGlzdGFuY2UgPiB0aHJlc2hvbGQgJiYgc3dpcGVEZWcgPCBzZXR0aW5ncy50b3VjaEFuZ2xlKSB7XHJcbiAgICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGlzIHBvc2l0aXZlIGFuZCBncmVhdGVyIHRoYW4gdGhyZXNob2xkIG1vdmUgYmFja3dhcmQuXHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5wZXJUb3VjaCkge1xyXG4gICAgICAgICAgICAgIHN0ZXBzID0gTWF0aC5taW4oc3RlcHMsIHRvSW50KHNldHRpbmdzLnBlclRvdWNoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChDb21wb25lbnRzLkRpcmVjdGlvbi5pcygncnRsJykpIHtcclxuICAgICAgICAgICAgICBzdGVwcyA9IC1zdGVwcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc8JyArIHN0ZXBzKSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlRGlzdGFuY2UgPCAtdGhyZXNob2xkICYmIHN3aXBlRGVnIDwgc2V0dGluZ3MudG91Y2hBbmdsZSkge1xyXG4gICAgICAgICAgICAvLyBXaGlsZSBzd2lwZSBpcyBuZWdhdGl2ZSBhbmQgbG93ZXIgdGhhbiBuZWdhdGl2ZSB0aHJlc2hvbGQgbW92ZSBmb3J3YXJkLlxyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MucGVyVG91Y2gpIHtcclxuICAgICAgICAgICAgICBzdGVwcyA9IE1hdGgubWF4KHN0ZXBzLCAtdG9JbnQoc2V0dGluZ3MucGVyVG91Y2gpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKENvbXBvbmVudHMuRGlyZWN0aW9uLmlzKCdydGwnKSkge1xyXG4gICAgICAgICAgICAgIHN0ZXBzID0gLXN0ZXBzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoJz4nICsgc3RlcHMpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFdoaWxlIHN3aXBlIGRvbid0IHJlYWNoIGRpc3RhbmNlIGFwcGx5IHByZXZpb3VzIHRyYW5zZm9ybS5cclxuICAgICAgICAgICAgQ29tcG9uZW50cy5Nb3ZlLm1ha2UoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBDb21wb25lbnRzLkh0bWwucm9vdC5jbGFzc0xpc3QucmVtb3ZlKHNldHRpbmdzLmNsYXNzZXMuZHJhZ2dpbmcpO1xyXG5cclxuICAgICAgICAgIHRoaXMudW5iaW5kU3dpcGVNb3ZlKCk7XHJcbiAgICAgICAgICB0aGlzLnVuYmluZFN3aXBlRW5kKCk7XHJcblxyXG4gICAgICAgICAgRXZlbnRzLmVtaXQoJ3N3aXBlLmVuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQmluZHMgc3dpcGUncyBzdGFydGluZyBldmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGJpbmRTd2lwZVN0YXJ0OiBmdW5jdGlvbiBiaW5kU3dpcGVTdGFydCgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnN3aXBlVGhyZXNob2xkKSB7XHJcbiAgICAgICAgICBCaW5kZXIub24oU1RBUlRfRVZFTlRTWzBdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnN0YXJ0KGV2ZW50KTtcclxuICAgICAgICAgIH0sIGNhcHR1cmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmRyYWdUaHJlc2hvbGQpIHtcclxuICAgICAgICAgIEJpbmRlci5vbihTVEFSVF9FVkVOVFNbMV0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuc3RhcnQoZXZlbnQpO1xyXG4gICAgICAgICAgfSwgY2FwdHVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbmJpbmRzIHN3aXBlJ3Mgc3RhcnRpbmcgZXZlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICB1bmJpbmRTd2lwZVN0YXJ0OiBmdW5jdGlvbiB1bmJpbmRTd2lwZVN0YXJ0KCkge1xyXG4gICAgICAgIEJpbmRlci5vZmYoU1RBUlRfRVZFTlRTWzBdLCBDb21wb25lbnRzLkh0bWwud3JhcHBlciwgY2FwdHVyZSk7XHJcbiAgICAgICAgQmluZGVyLm9mZihTVEFSVF9FVkVOVFNbMV0sIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCBjYXB0dXJlKTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQmluZHMgc3dpcGUncyBtb3ZpbmcgZXZlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBiaW5kU3dpcGVNb3ZlOiBmdW5jdGlvbiBiaW5kU3dpcGVNb3ZlKCkge1xyXG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICBCaW5kZXIub24oTU9WRV9FVkVOVFMsIENvbXBvbmVudHMuSHRtbC53cmFwcGVyLCB0aHJvdHRsZShmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgIF90aGlzMi5tb3ZlKGV2ZW50KTtcclxuICAgICAgICB9LCBHbGlkZS5zZXR0aW5ncy50aHJvdHRsZSksIGNhcHR1cmUpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbmJpbmRzIHN3aXBlJ3MgbW92aW5nIGV2ZW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgdW5iaW5kU3dpcGVNb3ZlOiBmdW5jdGlvbiB1bmJpbmRTd2lwZU1vdmUoKSB7XHJcbiAgICAgICAgQmluZGVyLm9mZihNT1ZFX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGNhcHR1cmUpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBCaW5kcyBzd2lwZSdzIGVuZGluZyBldmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGJpbmRTd2lwZUVuZDogZnVuY3Rpb24gYmluZFN3aXBlRW5kKCkge1xyXG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgICBCaW5kZXIub24oRU5EX0VWRU5UUywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgX3RoaXMzLmVuZChldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFVuYmluZHMgc3dpcGUncyBlbmRpbmcgZXZlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICB1bmJpbmRTd2lwZUVuZDogZnVuY3Rpb24gdW5iaW5kU3dpcGVFbmQoKSB7XHJcbiAgICAgICAgQmluZGVyLm9mZihFTkRfRVZFTlRTLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE5vcm1hbGl6ZXMgZXZlbnQgdG91Y2hlcyBwb2ludHMgYWNjb3J0aW5nIHRvIGRpZmZlcmVudCB0eXBlcy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50XHJcbiAgICAgICAqL1xyXG4gICAgICB0b3VjaGVzOiBmdW5jdGlvbiB0b3VjaGVzKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKE1PVVNFX0VWRU5UUy5pbmRleE9mKGV2ZW50LnR5cGUpID4gLTEpIHtcclxuICAgICAgICAgIHJldHVybiBldmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBldmVudC50b3VjaGVzWzBdIHx8IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHZhbHVlIG9mIG1pbmltdW0gc3dpcGUgZGlzdGFuY2Ugc2V0dGluZ3MgYmFzZWQgb24gZXZlbnQgdHlwZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgdGhyZXNob2xkOiBmdW5jdGlvbiB0aHJlc2hvbGQoZXZlbnQpIHtcclxuICAgICAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcclxuXHJcbiAgICAgICAgaWYgKE1PVVNFX0VWRU5UUy5pbmRleE9mKGV2ZW50LnR5cGUpID4gLTEpIHtcclxuICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5kcmFnVGhyZXNob2xkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLnN3aXBlVGhyZXNob2xkO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFbmFibGVzIHN3aXBlIGV2ZW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzZWxmfVxyXG4gICAgICAgKi9cclxuICAgICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmVuYWJsZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRGlzYWJsZXMgc3dpcGUgZXZlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge3NlbGZ9XHJcbiAgICAgICAqL1xyXG4gICAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xyXG4gICAgICAgIGRpc2FibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgQ29tcG9uZW50cy5UcmFuc2l0aW9uLmRpc2FibGUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgY29tcG9uZW50IGNsYXNzOlxyXG4gICAgICogLSBhZnRlciBpbml0aWFsIGJ1aWxkaW5nXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignYnVpbGQuYWZ0ZXInLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIENvbXBvbmVudHMuSHRtbC5yb290LmNsYXNzTGlzdC5hZGQoR2xpZGUuc2V0dGluZ3MuY2xhc3Nlcy5zd2lwZWFibGUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgc3dpcGluZyBiaW5kaW5nczpcclxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gcmVtb3ZlIGFkZGVkIEV2ZW50TGlzdGVuZXJzXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgU3dpcGUudW5iaW5kU3dpcGVTdGFydCgpO1xyXG4gICAgICBTd2lwZS51bmJpbmRTd2lwZU1vdmUoKTtcclxuICAgICAgU3dpcGUudW5iaW5kU3dpcGVFbmQoKTtcclxuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBTd2lwZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEltYWdlcyAoR2xpZGUsIENvbXBvbmVudHMsIEV2ZW50cykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW5jZSBvZiB0aGUgYmluZGVyIGZvciBET00gRXZlbnRzLlxyXG4gICAgICpcclxuICAgICAqIEB0eXBlIHtFdmVudHNCaW5kZXJ9XHJcbiAgICAgKi9cclxuICAgIHZhciBCaW5kZXIgPSBuZXcgRXZlbnRzQmluZGVyKCk7XHJcblxyXG4gICAgdmFyIEltYWdlcyA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEJpbmRzIGxpc3RlbmVyIHRvIGdsaWRlIHdyYXBwZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kKCk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEJpbmRzIGBkcmFnc3RhcnRgIGV2ZW50IG9uIHdyYXBwZXIgdG8gcHJldmVudCBkcmFnZ2luZyBpbWFnZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKCkge1xyXG4gICAgICAgIEJpbmRlci5vbignZHJhZ3N0YXJ0JywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIHRoaXMuZHJhZ3N0YXJ0KTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogVW5iaW5kcyBgZHJhZ3N0YXJ0YCBldmVudCBvbiB3cmFwcGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XHJcbiAgICAgICAgQmluZGVyLm9mZignZHJhZ3N0YXJ0JywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFdmVudCBoYW5kbGVyLiBQcmV2ZW50cyBkcmFnZ2luZy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGRyYWdzdGFydDogZnVuY3Rpb24gZHJhZ3N0YXJ0KGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBiaW5kaW5ncyBmcm9tIGltYWdlczpcclxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gcmVtb3ZlIGFkZGVkIEV2ZW50TGlzdGVuZXJzXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgSW1hZ2VzLnVuYmluZCgpO1xyXG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIEltYWdlcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEFuY2hvcnMgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxyXG4gICAgICovXHJcbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgZGV0YWNoaW5nIHN0YXR1cyBvZiBhbmNob3JzLlxyXG4gICAgICogUHJldmVudHMgZGV0YWNoaW5nIG9mIGFscmVhZHkgZGV0YWNoZWQgYW5jaG9ycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHR5cGUge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHZhciBkZXRhY2hlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgcHJldmVudGluZyBzdGF0dXMgb2YgYW5jaG9ycy5cclxuICAgICAqIElmIGB0cnVlYCByZWRpcmVjdGlvbiBhZnRlciBjbGljayB3aWxsIGJlIGRpc2FibGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdmFyIHByZXZlbnRlZCA9IGZhbHNlO1xyXG5cclxuICAgIHZhciBBbmNob3JzID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogU2V0dXBzIGEgaW5pdGlhbCBzdGF0ZSBvZiBhbmNob3JzIGNvbXBvbmVudC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgY29sbGVjdGlvbiBvZiBhbmNob3JzIGVsZW1lbnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fYSA9IENvbXBvbmVudHMuSHRtbC53cmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kKCk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEJpbmRzIGV2ZW50cyB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcclxuICAgICAgICBCaW5kZXIub24oJ2NsaWNrJywgQ29tcG9uZW50cy5IdG1sLndyYXBwZXIsIHRoaXMuY2xpY2spO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbmJpbmRzIGV2ZW50cyBhdHRhY2hlZCB0byBhbmNob3JzIGluc2lkZSBhIHRyYWNrLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XHJcbiAgICAgICAgQmluZGVyLm9mZignY2xpY2snLCBDb21wb25lbnRzLkh0bWwud3JhcHBlcik7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEhhbmRsZXIgZm9yIGNsaWNrIGV2ZW50LiBQcmV2ZW50cyBjbGlja3Mgd2hlbiBnbGlkZSBpcyBpbiBgcHJldmVudGAgc3RhdHVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2ZW50XHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZXZlbnQpIHtcclxuICAgICAgICBpZiAocHJldmVudGVkKSB7XHJcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXRhY2hlcyBhbmNob3JzIGNsaWNrIGV2ZW50IGluc2lkZSBnbGlkZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7c2VsZn1cclxuICAgICAgICovXHJcbiAgICAgIGRldGFjaDogZnVuY3Rpb24gZGV0YWNoKCkge1xyXG4gICAgICAgIHByZXZlbnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICghZGV0YWNoZWQpIHtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2ldLmRyYWdnYWJsZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicsIHRoaXMuaXRlbXNbaV0uZ2V0QXR0cmlidXRlKCdocmVmJykpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5yZW1vdmVBdHRyaWJ1dGUoJ2hyZWYnKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkZXRhY2hlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQXR0YWNoZXMgYW5jaG9ycyBjbGljayBldmVudHMgaW5zaWRlIGdsaWRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzZWxmfVxyXG4gICAgICAgKi9cclxuICAgICAgYXR0YWNoOiBmdW5jdGlvbiBhdHRhY2goKSB7XHJcbiAgICAgICAgcHJldmVudGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChkZXRhY2hlZCkge1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uZHJhZ2dhYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0uc2V0QXR0cmlidXRlKCdocmVmJywgdGhpcy5pdGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaHJlZicpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkZXRhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZGVmaW5lKEFuY2hvcnMsICdpdGVtcycsIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEdldHMgY29sbGVjdGlvbiBvZiB0aGUgYXJyb3dzIEhUTUwgZWxlbWVudHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50W119XHJcbiAgICAgICAqL1xyXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICByZXR1cm4gQW5jaG9ycy5fYTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRhY2ggYW5jaG9ycyBpbnNpZGUgc2xpZGVzOlxyXG4gICAgICogLSBvbiBzd2lwaW5nLCBzbyB0aGV5IHdvbid0IHJlZGlyZWN0IHRvIGl0cyBgaHJlZmAgYXR0cmlidXRlc1xyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oJ3N3aXBlLm1vdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEFuY2hvcnMuZGV0YWNoKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBhbmNob3JzIGluc2lkZSBzbGlkZXM6XHJcbiAgICAgKiAtIGFmdGVyIHN3aXBpbmcgYW5kIHRyYW5zaXRpb25zIGVuZHMsIHNvIHRoZXkgY2FuIHJlZGlyZWN0IGFmdGVyIGNsaWNrIGFnYWluXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignc3dpcGUuZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBDb21wb25lbnRzLlRyYW5zaXRpb24uYWZ0ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIEFuY2hvcnMuYXR0YWNoKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbmJpbmQgYW5jaG9ycyBpbnNpZGUgc2xpZGVzOlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBicmluZyBhbmNob3JzIHRvIGl0cyBpbml0aWFsIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgQW5jaG9ycy5hdHRhY2goKTtcclxuICAgICAgQW5jaG9ycy51bmJpbmQoKTtcclxuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBBbmNob3JzO1xyXG4gIH1cclxuXHJcbiAgdmFyIE5BVl9TRUxFQ1RPUiA9ICdbZGF0YS1nbGlkZS1lbD1cImNvbnRyb2xzW25hdl1cIl0nO1xyXG4gIHZhciBDT05UUk9MU19TRUxFQ1RPUiA9ICdbZGF0YS1nbGlkZS1lbF49XCJjb250cm9sc1wiXSc7XHJcblxyXG4gIGZ1bmN0aW9uIENvbnRyb2xzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cclxuICAgICAqL1xyXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcclxuXHJcbiAgICB2YXIgY2FwdHVyZSA9IHN1cHBvcnRzUGFzc2l2ZSQxID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcclxuXHJcbiAgICB2YXIgQ29udHJvbHMgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0cyBhcnJvd3MuIEJpbmRzIGV2ZW50cyBsaXN0ZW5lcnNcclxuICAgICAgICogdG8gdGhlIGFycm93cyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgbmF2aWdhdGlvbiBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbiA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoTkFWX1NFTEVDVE9SKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiBjb250cm9scyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7SFRNTENvbGxlY3Rpb259XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fYyA9IENvbXBvbmVudHMuSHRtbC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoQ09OVFJPTFNfU0VMRUNUT1IpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZEJpbmRpbmdzKCk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFNldHMgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgc2xpZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBzZXRBY3RpdmU6IGZ1bmN0aW9uIHNldEFjdGl2ZSgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHRoaXMuYWRkQ2xhc3ModGhpcy5fbltpXS5jaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmVzIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IHNsaWRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgcmVtb3ZlQWN0aXZlOiBmdW5jdGlvbiByZW1vdmVBY3RpdmUoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKHRoaXMuX25baV0uY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogVG9nZ2xlcyBhY3RpdmUgY2xhc3Mgb24gaXRlbXMgaW5zaWRlIG5hdmlnYXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBjb250cm9sc1xyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIGFkZENsYXNzKGNvbnRyb2xzKSB7XHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gR2xpZGUuc2V0dGluZ3M7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBjb250cm9sc1tHbGlkZS5pbmRleF07XHJcblxyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoc2V0dGluZ3MuY2xhc3Nlcy5hY3RpdmVOYXYpO1xyXG5cclxuICAgICAgICAgIHNpYmxpbmdzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKHNpYmxpbmcpIHtcclxuICAgICAgICAgICAgc2libGluZy5jbGFzc0xpc3QucmVtb3ZlKHNldHRpbmdzLmNsYXNzZXMuYWN0aXZlTmF2KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlcyBhY3RpdmUgY2xhc3MgZnJvbSBhY3RpdmUgY29udHJvbC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoY29udHJvbHMpIHtcclxuICAgICAgICB2YXIgaXRlbSA9IGNvbnRyb2xzW0dsaWRlLmluZGV4XTtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShHbGlkZS5zZXR0aW5ncy5jbGFzc2VzLmFjdGl2ZU5hdik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBZGRzIGhhbmRsZXMgdG8gdGhlIGVhY2ggZ3JvdXAgb2YgY29udHJvbHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBhZGRCaW5kaW5nczogZnVuY3Rpb24gYWRkQmluZGluZ3MoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB0aGlzLmJpbmQodGhpcy5fY1tpXS5jaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZW1vdmVzIGhhbmRsZXMgZnJvbSB0aGUgZWFjaCBncm91cCBvZiBjb250cm9scy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHJlbW92ZUJpbmRpbmdzOiBmdW5jdGlvbiByZW1vdmVCaW5kaW5ncygpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHRoaXMudW5iaW5kKHRoaXMuX2NbaV0uY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQmluZHMgZXZlbnRzIHRvIGFycm93cyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBlbGVtZW50c1xyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgYmluZDogZnVuY3Rpb24gYmluZChlbGVtZW50cykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIEJpbmRlci5vbignY2xpY2snLCBlbGVtZW50c1tpXSwgdGhpcy5jbGljayk7XHJcbiAgICAgICAgICBCaW5kZXIub24oJ3RvdWNoc3RhcnQnLCBlbGVtZW50c1tpXSwgdGhpcy5jbGljaywgY2FwdHVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbmJpbmRzIGV2ZW50cyBiaW5kZWQgdG8gdGhlIGFycm93cyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0hUTUxDb2xsZWN0aW9ufSBlbGVtZW50c1xyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWxlbWVudHMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBCaW5kZXIub2ZmKFsnY2xpY2snLCAndG91Y2hzdGFydCddLCBlbGVtZW50c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBIYW5kbGVzIGBjbGlja2AgZXZlbnQgb24gdGhlIGFycm93cyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKiBNb3ZlcyBzbGlkZXIgaW4gZHJpZWN0aW9uIHByZWNpc2VkIGluXHJcbiAgICAgICAqIGBkYXRhLWdsaWRlLWRpcmAgYXR0cmlidXRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnRcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIENvbXBvbmVudHMuUnVuLm1ha2UoQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZShldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1nbGlkZS1kaXInKSkpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGRlZmluZShDb250cm9scywgJ2l0ZW1zJywge1xyXG4gICAgICAvKipcclxuICAgICAgICogR2V0cyBjb2xsZWN0aW9uIG9mIHRoZSBjb250cm9scyBIVE1MIGVsZW1lbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xzLl9jO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3YXAgYWN0aXZlIGNsYXNzIG9mIGN1cnJlbnQgbmF2aWdhdGlvbiBpdGVtOlxyXG4gICAgICogLSBhZnRlciBtb3VudGluZyB0byBzZXQgaXQgdG8gaW5pdGlhbCBpbmRleFxyXG4gICAgICogLSBhZnRlciBlYWNoIG1vdmUgdG8gdGhlIG5ldyBpbmRleFxyXG4gICAgICovXHJcbiAgICBFdmVudHMub24oWydtb3VudC5hZnRlcicsICdtb3ZlLmFmdGVyJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgQ29udHJvbHMuc2V0QWN0aXZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBiaW5kaW5ncyBhbmQgSFRNTCBDbGFzc2VzOlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRpYWwgc3RhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBDb250cm9scy5yZW1vdmVCaW5kaW5ncygpO1xyXG4gICAgICBDb250cm9scy5yZW1vdmVBY3RpdmUoKTtcclxuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBDb250cm9scztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEtleWJvYXJkIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cclxuICAgICAqL1xyXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcclxuXHJcbiAgICB2YXIgS2V5Ym9hcmQgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBCaW5kcyBrZXlib2FyZCBldmVudHMgb24gY29tcG9uZW50IG1vdW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5rZXlib2FyZCkge1xyXG4gICAgICAgICAgdGhpcy5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBZGRzIGtleWJvYXJkIHByZXNzIGV2ZW50cy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XHJcbiAgICAgICAgQmluZGVyLm9uKCdrZXl1cCcsIGRvY3VtZW50LCB0aGlzLnByZXNzKTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlcyBrZXlib2FyZCBwcmVzcyBldmVudHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcclxuICAgICAgICBCaW5kZXIub2ZmKCdrZXl1cCcsIGRvY3VtZW50KTtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogSGFuZGxlcyBrZXlib2FyZCdzIGFycm93cyBwcmVzcyBhbmQgbW92aW5nIGdsaWRlIGZvd2FyZCBhbmQgYmFja3dhcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZXZlbnRcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHByZXNzOiBmdW5jdGlvbiBwcmVzcyhldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzOSkge1xyXG4gICAgICAgICAgQ29tcG9uZW50cy5SdW4ubWFrZShDb21wb25lbnRzLkRpcmVjdGlvbi5yZXNvbHZlKCc+JykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3KSB7XHJcbiAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmUoJzwnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGJpbmRpbmdzIGZyb20ga2V5Ym9hcmQ6XHJcbiAgICAgKiAtIG9uIGRlc3Ryb3lpbmcgdG8gcmVtb3ZlIGFkZGVkIGV2ZW50c1xyXG4gICAgICogLSBvbiB1cGRhdGluZyB0byByZW1vdmUgZXZlbnRzIGJlZm9yZSByZW1vdW50aW5nXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbihbJ2Rlc3Ryb3knLCAndXBkYXRlJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgS2V5Ym9hcmQudW5iaW5kKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW91bnQgY29tcG9uZW50XHJcbiAgICAgKiAtIG9uIHVwZGF0aW5nIHRvIHJlZmxlY3QgcG90ZW50aWFsIGNoYW5nZXMgaW4gc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEtleWJvYXJkLm1vdW50KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3kgYmluZGVyOlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nIHRvIHJlbW92ZSBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBCaW5kZXIuZGVzdHJveSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIEtleWJvYXJkO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQXV0b3BsYXkgKEdsaWRlLCBDb21wb25lbnRzLCBFdmVudHMpIHtcclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFuY2Ugb2YgdGhlIGJpbmRlciBmb3IgRE9NIEV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7RXZlbnRzQmluZGVyfVxyXG4gICAgICovXHJcbiAgICB2YXIgQmluZGVyID0gbmV3IEV2ZW50c0JpbmRlcigpO1xyXG5cclxuICAgIHZhciBBdXRvcGxheSA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGF1dG9wbGF5aW5nIGFuZCBldmVudHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBtb3VudDogZnVuY3Rpb24gbW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydCgpO1xyXG5cclxuICAgICAgICBpZiAoR2xpZGUuc2V0dGluZ3MuaG92ZXJwYXVzZSkge1xyXG4gICAgICAgICAgdGhpcy5iaW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTdGFydHMgYXV0b3BsYXlpbmcgaW4gY29uZmlndXJlZCBpbnRlcnZhbC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gZm9yY2UgUnVuIGF1dG9wbGF5aW5nIHdpdGggcGFzc2VkIGludGVydmFsIHJlZ2FyZGxlc3Mgb2YgYGF1dG9wbGF5YCBzZXR0aW5nc1xyXG4gICAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICAgKi9cclxuICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChHbGlkZS5zZXR0aW5ncy5hdXRvcGxheSkge1xyXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHRoaXMuX2kpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2kgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuc3RvcCgpO1xyXG5cclxuICAgICAgICAgICAgICBDb21wb25lbnRzLlJ1bi5tYWtlKCc+Jyk7XHJcblxyXG4gICAgICAgICAgICAgIF90aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMudGltZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTdG9wcyBhdXRvcnVubmluZyBvZiB0aGUgZ2xpZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgICAqL1xyXG4gICAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xyXG4gICAgICAgIHRoaXMuX2kgPSBjbGVhckludGVydmFsKHRoaXMuX2kpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTdG9wcyBhdXRvcGxheWluZyB3aGlsZSBtb3VzZSBpcyBvdmVyIGdsaWRlJ3MgYXJlYS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XHJcblxyXG4gICAgICAgIEJpbmRlci5vbignbW91c2VvdmVyJywgQ29tcG9uZW50cy5IdG1sLnJvb3QsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIF90aGlzMi5zdG9wKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIEJpbmRlci5vbignbW91c2VvdXQnLCBDb21wb25lbnRzLkh0bWwucm9vdCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMyLnN0YXJ0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFVuYmluZCBtb3VzZW92ZXIgZXZlbnRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJucyB7Vm9pZH1cclxuICAgICAgICovXHJcbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkge1xyXG4gICAgICAgIEJpbmRlci5vZmYoWydtb3VzZW92ZXInLCAnbW91c2VvdXQnXSwgQ29tcG9uZW50cy5IdG1sLnJvb3QpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGRlZmluZShBdXRvcGxheSwgJ3RpbWUnLCB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBHZXRzIHRpbWUgcGVyaW9kIHZhbHVlIGZvciB0aGUgYXV0b3BsYXkgaW50ZXJ2YWwuIFByaW9yaXRpemVzXHJcbiAgICAgICAqIHRpbWVzIGluIGBkYXRhLWdsaWRlLWF1dG9wbGF5YCBhdHRydWJ1dGVzIG92ZXIgb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICAgKi9cclxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgdmFyIGF1dG9wbGF5ID0gQ29tcG9uZW50cy5IdG1sLnNsaWRlc1tHbGlkZS5pbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLWdsaWRlLWF1dG9wbGF5Jyk7XHJcblxyXG4gICAgICAgIGlmIChhdXRvcGxheSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRvSW50KGF1dG9wbGF5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b0ludChHbGlkZS5zZXR0aW5ncy5hdXRvcGxheSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcCBhdXRvcGxheWluZyBhbmQgdW5iaW5kIGV2ZW50czpcclxuICAgICAqIC0gb24gZGVzdHJveWluZywgdG8gY2xlYXIgZGVmaW5lZCBpbnRlcnZhbFxyXG4gICAgICogLSBvbiB1cGRhdGluZyB2aWEgQVBJIHRvIHJlc2V0IGludGVydmFsIHRoYXQgbWF5IGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsnZGVzdHJveScsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBBdXRvcGxheS51bmJpbmQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcCBhdXRvcGxheWluZzpcclxuICAgICAqIC0gYmVmb3JlIGVhY2ggcnVuLCB0byByZXN0YXJ0IGF1dG9wbGF5aW5nXHJcbiAgICAgKiAtIG9uIHBhdXNpbmcgdmlhIEFQSVxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBjbGVhciBkZWZpbmVkIGludGVydmFsXHJcbiAgICAgKiAtIHdoaWxlIHN0YXJ0aW5nIGEgc3dpcGVcclxuICAgICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZXNldCBpbnRlcnZhbCB0aGF0IG1heSBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbihbJ3J1bi5iZWZvcmUnLCAncGF1c2UnLCAnZGVzdHJveScsICdzd2lwZS5zdGFydCcsICd1cGRhdGUnXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBBdXRvcGxheS5zdG9wKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0IGF1dG9wbGF5aW5nOlxyXG4gICAgICogLSBhZnRlciBlYWNoIHJ1biwgdG8gcmVzdGFydCBhdXRvcGxheWluZ1xyXG4gICAgICogLSBvbiBwbGF5aW5nIHZpYSBBUElcclxuICAgICAqIC0gd2hpbGUgZW5kaW5nIGEgc3dpcGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKFsncnVuLmFmdGVyJywgJ3BsYXknLCAnc3dpcGUuZW5kJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgQXV0b3BsYXkuc3RhcnQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3VudCBhdXRvcGxheWluZzpcclxuICAgICAqIC0gb24gdXBkYXRpbmcgdmlhIEFQSSB0byByZXNldCBpbnRlcnZhbCB0aGF0IG1heSBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbigndXBkYXRlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBBdXRvcGxheS5tb3VudCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95IGEgYmluZGVyOlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nIGdsaWRlIGluc3RhbmNlIHRvIGNsZWFydXAgbGlzdGVuZXJzXHJcbiAgICAgKi9cclxuICAgIEV2ZW50cy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgQmluZGVyLmRlc3Ryb3koKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBBdXRvcGxheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNvcnRzIGtleXMgb2YgYnJlYWtwb2ludCBvYmplY3Qgc28gdGhleSB3aWxsIGJlIG9yZGVyZWQgZnJvbSBsb3dlciB0byBiaWdnZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXHJcbiAgICogQHJldHVybnMge09iamVjdH1cclxuICAgKi9cclxuICBmdW5jdGlvbiBzb3J0QnJlYWtwb2ludHMocG9pbnRzKSB7XHJcbiAgICBpZiAoaXNPYmplY3QocG9pbnRzKSkge1xyXG4gICAgICByZXR1cm4gc29ydEtleXMocG9pbnRzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdhcm4oJ0JyZWFrcG9pbnRzIG9wdGlvbiBtdXN0IGJlIGFuIG9iamVjdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEJyZWFrcG9pbnRzIChHbGlkZSwgQ29tcG9uZW50cywgRXZlbnRzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbmNlIG9mIHRoZSBiaW5kZXIgZm9yIERPTSBFdmVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUge0V2ZW50c0JpbmRlcn1cclxuICAgICAqL1xyXG4gICAgdmFyIEJpbmRlciA9IG5ldyBFdmVudHNCaW5kZXIoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIHJlZmVyZW5jZSB0byBzZXR0aW5ncy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgc2V0dGluZ3MgPSBHbGlkZS5zZXR0aW5ncztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIHJlZmVyZW5jZSB0byBicmVha3BvaW50cyBvYmplY3QgaW4gc2V0dGluZ3MuIFNvcnRzIGJyZWFrcG9pbnRzXHJcbiAgICAgKiBmcm9tIHNtYWxsZXIgdG8gbGFyZ2VyLiBJdCBpcyByZXF1aXJlZCBpbiBvcmRlciB0byBwcm9wZXJcclxuICAgICAqIG1hdGNoaW5nIGN1cnJlbnRseSBhY3RpdmUgYnJlYWtwb2ludCBzZXR0aW5ncy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgcG9pbnRzID0gc29ydEJyZWFrcG9pbnRzKHNldHRpbmdzLmJyZWFrcG9pbnRzKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhY2hlIGluaXRpYWwgc2V0dGluZ3MgYmVmb3JlIG92ZXJ3cml0dGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgZGVmYXVsdHMgPSBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MpO1xyXG5cclxuICAgIHZhciBCcmVha3BvaW50cyA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIE1hdGNoZXMgc2V0dGluZ3MgZm9yIGN1cnJlY3RseSBtYXRjaGluZyBtZWRpYSBicmVha3BvaW50LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRzXHJcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgICAqL1xyXG4gICAgICBtYXRjaDogZnVuY3Rpb24gbWF0Y2gocG9pbnRzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cubWF0Y2hNZWRpYSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIGZvciAodmFyIHBvaW50IGluIHBvaW50cykge1xyXG4gICAgICAgICAgICBpZiAocG9pbnRzLmhhc093blByb3BlcnR5KHBvaW50KSkge1xyXG4gICAgICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogJyArIHBvaW50ICsgJ3B4KScpLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwb2ludHNbcG9pbnRdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcndyaXRlIGluc3RhbmNlIHNldHRpbmdzIHdpdGggY3VycmVudGx5IG1hdGNoaW5nIGJyZWFrcG9pbnQgc2V0dGluZ3MuXHJcbiAgICAgKiBUaGlzIGhhcHBlbnMgcmlnaHQgYWZ0ZXIgY29tcG9uZW50IGluaXRpYWxpemF0aW9uLlxyXG4gICAgICovXHJcbiAgICBfZXh0ZW5kcyhzZXR0aW5ncywgQnJlYWtwb2ludHMubWF0Y2gocG9pbnRzKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgZ2xpZGUgd2l0aCBzZXR0aW5ncyBvZiBtYXRjaGVkIGJyZWtwb2ludDpcclxuICAgICAqIC0gd2luZG93IHJlc2l6ZSB0byB1cGRhdGUgc2xpZGVyXHJcbiAgICAgKi9cclxuICAgIEJpbmRlci5vbigncmVzaXplJywgd2luZG93LCB0aHJvdHRsZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIEdsaWRlLnNldHRpbmdzID0gbWVyZ2VPcHRpb25zKHNldHRpbmdzLCBCcmVha3BvaW50cy5tYXRjaChwb2ludHMpKTtcclxuICAgIH0sIEdsaWRlLnNldHRpbmdzLnRocm90dGxlKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvcnQgYW5kIHVwZGF0ZSBkZWZhdWx0IHNldHRpbmdzOlxyXG4gICAgICogLSBvbiByZWluaXQgdmlhIEFQSSwgc28gYnJlYWtwb2ludCBtYXRjaGluZyB3aWxsIGJlIHBlcmZvcm1lZCB3aXRoIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCd1cGRhdGUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHBvaW50cyA9IHNvcnRCcmVha3BvaW50cyhwb2ludHMpO1xyXG5cclxuICAgICAgZGVmYXVsdHMgPSBfZXh0ZW5kcyh7fSwgc2V0dGluZ3MpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbmJpbmQgcmVzaXplIGxpc3RlbmVyOlxyXG4gICAgICogLSBvbiBkZXN0cm95aW5nLCB0byBicmluZyBtYXJrdXAgdG8gaXRzIGluaXRpYWwgc3RhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICBCaW5kZXIub2ZmKCdyZXNpemUnLCB3aW5kb3cpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIEJyZWFrcG9pbnRzO1xyXG4gIH1cclxuXHJcbiAgdmFyIENPTVBPTkVOVFMgPSB7XHJcbiAgICAvLyBSZXF1aXJlZFxyXG4gICAgSHRtbDogSHRtbCxcclxuICAgIFRyYW5zbGF0ZTogVHJhbnNsYXRlLFxyXG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcclxuICAgIERpcmVjdGlvbjogRGlyZWN0aW9uLFxyXG4gICAgUGVlazogUGVlayxcclxuICAgIFNpemVzOiBTaXplcyxcclxuICAgIEdhcHM6IEdhcHMsXHJcbiAgICBNb3ZlOiBNb3ZlLFxyXG4gICAgQ2xvbmVzOiBDbG9uZXMsXHJcbiAgICBSZXNpemU6IFJlc2l6ZSxcclxuICAgIEJ1aWxkOiBCdWlsZCxcclxuICAgIFJ1bjogUnVuLFxyXG5cclxuICAgIC8vIE9wdGlvbmFsXHJcbiAgICBTd2lwZTogU3dpcGUsXHJcbiAgICBJbWFnZXM6IEltYWdlcyxcclxuICAgIEFuY2hvcnM6IEFuY2hvcnMsXHJcbiAgICBDb250cm9sczogQ29udHJvbHMsXHJcbiAgICBLZXlib2FyZDogS2V5Ym9hcmQsXHJcbiAgICBBdXRvcGxheTogQXV0b3BsYXksXHJcbiAgICBCcmVha3BvaW50czogQnJlYWtwb2ludHNcclxuICB9O1xyXG5cclxuICB2YXIgR2xpZGUkMSA9IGZ1bmN0aW9uIChfQ29yZSkge1xyXG4gICAgaW5oZXJpdHMoR2xpZGUkJDEsIF9Db3JlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBHbGlkZSQkMSgpIHtcclxuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xpZGUkJDEpO1xyXG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoR2xpZGUkJDEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihHbGlkZSQkMSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNsYXNzKEdsaWRlJCQxLCBbe1xyXG4gICAgICBrZXk6ICdtb3VudCcsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudCgpIHtcclxuICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XHJcblxyXG4gICAgICAgIHJldHVybiBnZXQoR2xpZGUkJDEucHJvdG90eXBlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR2xpZGUkJDEucHJvdG90eXBlKSwgJ21vdW50JywgdGhpcykuY2FsbCh0aGlzLCBfZXh0ZW5kcyh7fSwgQ09NUE9ORU5UUywgZXh0ZW5zaW9ucykpO1xyXG4gICAgICB9XHJcbiAgICB9XSk7XHJcbiAgICByZXR1cm4gR2xpZGUkJDE7XHJcbiAgfShHbGlkZSk7XHJcblxyXG4gIHJldHVybiBHbGlkZSQxO1xyXG5cclxufSkpKTtcclxuXHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcm91c2VsJykpIHtcclxuICAgICAgICB2YXIgY2Fyb3VzZWxUb29scyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC10b29scycpO1xyXG4gICAgICAgIGlmKGNhcm91c2VsVG9vbHMuc2Nyb2xsV2lkdGggPiBjYXJvdXNlbFRvb2xzLm9mZnNldFdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNhcm91c2VsVG9vbHMuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnZmxleC1zdGFydCc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNsaWRlcjIgPSBuZXcgR2xpZGUoJy5jYXJvdXNlbCcsIHtcclxuICAgICAgICAgICAgdHlwZTogJ2Nhcm91c2VsJyxcclxuICAgICAgICAgICAgcGVyVmlldzogMyxcclxuICAgICAgICAgICAgZm9jdXNBdDogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIC8vcGVlazogJzUwJywgLy8geyBiZWZvcmU6IDEwMCwgYWZ0ZXI6IDUwIH0gLSBwZWVrIDEwMHB4IG9uIHRoZSBsZWZ0IHNpZGUgYW5kIDUwcHggb25cclxuICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgIDEwMDA6IHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJWaWV3OiAyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgNjQwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyVmlldzogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNsaWRlcjIub24oJ2J1aWxkLmFmdGVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBnZXRTbGlkZXMoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2xpZGVyMi5vbignbW92ZS5hZnRlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2V0U2xpZGVzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNsaWRlcjIub24oJ3J1bi5hZnRlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVRvb2xJbmRleCA9ICsoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdsaWRlX19idWxsZXQtLWFjdGl2ZScpLmdldEF0dHJpYnV0ZSgnZGF0YS1nbGlkZS1kaXInKS5zbGljZSgxKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFjdGl2ZVRvb2xJbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxWYWwgPSAxMzQgKiBhY3RpdmVUb29sSW5kZXg7XHJcbiAgICAgICAgICAgIGNhcm91c2VsVG9vbHMuc2Nyb2xsTGVmdCA9IHNjcm9sbFZhbCAtIChjYXJvdXNlbFRvb2xzLm9mZnNldFdpZHRoLzIgLSA2Nyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNsaWRlcjIubW91bnQoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U2xpZGVzICgpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZVNsaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcm91c2VsIC5nbGlkZV9fc2xpZGUtLWFjdGl2ZScpXHJcbiAgICAgICAgICAgIHZhciBwcmV2ID0gYWN0aXZlU2xpZGUucHJldmlvdXNFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtaXRlbSBpbWcnKTtcclxuICAgICAgICAgICAgdmFyIGNlbnRlciA9IGFjdGl2ZVNsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5jYXJvdXNlbC1pdGVtIGltZycpO1xyXG4gICAgICAgICAgICB2YXIgbmV4dCA9IGFjdGl2ZVNsaWRlLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuY2Fyb3VzZWwtaXRlbSBpbWcnKTtcclxuXHJcbiAgICAgICAgICAgIHNldEltZyhwcmV2KTtcclxuICAgICAgICAgICAgc2V0SW1nKGNlbnRlcik7XHJcbiAgICAgICAgICAgIHNldEltZyhuZXh0KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRJbWcgKHNsaWRlKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9jZXNzZWQgPSBzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvY2Vzc2VkJylcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3NlZCA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKCdzcmMnLCBzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJykpXHJcbiAgICAgICAgICAgICAgICBzbGlkZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvY2Vzc2VkJywgJ3RydWUnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSk7Il19
